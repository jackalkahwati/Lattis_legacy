###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        16/Apr/2015  21:19:51
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\VeloLabs\SkyLock Project\Source\startup.c
#    Command line =  
#        "C:\VeloLabs\SkyLock Project\Source\startup.c" -D NRF51 -D
#        BLE_STACK_SUPPORT_REQD -lCN "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\List\" -o "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\Obj\" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Normal.h" -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\include\" -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\include\ARMFiles\" -I
#        "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\drivers_nrf\hal\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\softdevice\s110\headers\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\toolchain\" -I
#        "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\softdevice\common\softdevice_handler\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\util\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\scheduler\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\timer\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\ble\common\" -Ol
#    List file    =  
#        C:\VeloLabs\SkyLock Project\Source\IAR_7_30_4\Debug\List\startup.lst
#    Object file  =  
#        C:\VeloLabs\SkyLock Project\Source\IAR_7_30_4\Debug\Obj\startup.o
#
###############################################################################

C:\VeloLabs\SkyLock Project\Source\startup.c
      1          /*
      2          ** Proprietary Rights Notice
      3          **
      4          ** This material contains the valuable properties and trade secrets of:
      5          **
      6          **    Velo Labs
      7          **    San Francisco, CA, USA
      8          **
      9          ** All rights reserved. No part of this work may be reproduced, distributed, or
     10          ** transmitted in any form or by any means, including photocopying, recording,
     11          ** or other electronic or mechanical methods, without the prior written permission
     12          ** of Velo Labs.
     13          **
     14          ** Copyright (c) 2015, Velo Labs
     15          ** Contains Confidential and Trade Secret Information
     16          */
     17          
     18          /*
     19          ** File Name:  startup.c
     20          **
     21          ** Purpose:    Primary entry point for code startup. There is a low level boot strap
     22          **             routine that will take care of C variable initialization prior to this
     23          **             which also provides a hook to a routine here that is exectuted immediately
     24          **             upon startup and prior to setting up the C variables.
     25          **
     26          **             In general this file should contain all the one time events associated
     27          **             with the startup event.
     28          **
     29          ** Key Implementation Notes:
     30          **
     31          ** #1). Setup all the interrupts we want to use before we activate the Soft Device. Once the Soft Device is
     32          **      running you are no longer supposed to be using the CMSIS functions to control interrupts. But based
     33          **      on the current Soft Device (7.2) the only functions I can find (sd_nvic_SetPriority, in nrf_soc.c)
     34          **      just call the CMSIS functions anyways. So just get things setup before the Soft Device and don't worry
     35          **      about it. Also, did confirm that the Soft Device will not initialize if you setup these interrupts
     36          **      with a high priority. It does check and won't load.
     37          */
     38          
     39          #include "master.h"
     40          #include "stdio.h"
     41          #include "hardware.h"
     42          #include "i2c.h"
     43          #include "uart.h"
     44          #include "utils.h"
     45          #include "timers.h"
     46          #include "ble_skylock.h"
     47          
     48          /*
     49          ** We really only want these located in the raw, binary code image but if we don't reference them
     50          ** then the linker will drop them from our code image.
     51          */

   \                                 In section .rodata, align 4
     52          const unsigned char PartNumber[] = PART_NUMBER_VER_M "." PART_NUMBER_REV_M "." PART_NUMBER_MINOR_M;
   \                     PartNumber:
   \   00000000   0x30 0x31          DC8 "01.00.05"
   \              0x2E 0x30    
   \              0x30 0x2E    
   \              0x30 0x35    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
     53          const unsigned char CopyRight[] = COPYRIGHT_M;
   \                     CopyRight:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 70H, 79H, 72H, 69H, 67H, 68H
   \              0x70 0x79    
   \              0x72 0x69    
   \              0x67 0x68    
   \   00000008   0x74 0x20          DC8 74H, 20H, 28H, 63H, 29H, 20H, 32H, 30H
   \              0x28 0x63    
   \              0x29 0x20    
   \              0x32 0x30    
   \   00000010   0x31 0x35          DC8 31H, 35H, 2CH, 20H, 56H, 65H, 6CH, 6FH
   \              0x2C 0x20    
   \              0x56 0x65    
   \              0x6C 0x6F    
   \   00000018   0x20 0x4C          DC8 20H, 4CH, 61H, 62H, 73H, 2CH, 20H, 41H
   \              0x61 0x62    
   \              0x73 0x2C    
   \              0x20 0x41    
   \   00000020   0x6C 0x6C          DC8 6CH, 6CH, 20H, 52H, 69H, 67H, 68H, 74H
   \              0x20 0x52    
   \              0x69 0x67    
   \              0x68 0x74    
   \   00000028   0x73 0x20          DC8 73H, 20H, 52H, 65H, 73H, 65H, 72H, 76H
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x72 0x76    
   \   00000030   0x65 0x64          DC8 65H, 64H, 0
   \              0x00         
   \   00000033   0x00               DC8 0
     54          
     55          #if 0
     56          /*
     57          ** This routine is called from the IAR boot loader. If we don't provide this function, then
     58          ** they will provide their own. For IAR, this is called a few instructions into the raw boot cycle.
     59          ** The CPU comes to life, grabs the reboot vector and jumps to that and within a couple instructions
     60          ** this is called. After the return from this function, then all the C variables are setup and
     61          ** "main" is called.
     62          **
     63          ** The primary things to put into this function (if anything) would be any initialization of I/O
     64          ** that needs to be done quick and grabbing any data from RAM that we might want to recover after
     65          ** a reboot. Otherwise pretty much everything else can wait until main.
     66          **
     67          ** Since this product is running on the Nordic chip and there is a Soft Device which basically has
     68          ** control of the chip there really isn't anything important that we should need. So compile this
     69          ** function out so that if later we switch to GCC or some other compiler we don't have a conflict
     70          ** since we really don't have a use for this.
     71          **
     72          ** But keep the code here for future reference.
     73          */
     74          unsigned char __low_level_init (void)
     75          {
     76             return (1);  //Tell c-startup to init the segments
     77          }
     78          #endif
     79          
     80          /*
     81          ** Starting point for actual code execution
     82          */

   \                                 In section .text, align 2, keep-with-next
     83          void main(void)
     84          {
   \                     main: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     85             unsigned int count;
     86          
     87             Timer_Setup();
   \   00000002   0x.... 0x....      BL       Timer_Setup
     88             UART_Setup();
   \   00000006   0x.... 0x....      BL       UART_Setup
     89          
     90             I2C_Setup();
   \   0000000A   0x.... 0x....      BL       I2C_Setup
     91          
     92             Motor_Setup();
   \   0000000E   0x.... 0x....      BL       Motor_Setup
     93             TS_Setup();
   \   00000012   0x.... 0x....      BL       TS_Setup
     94             Magnet_Setup();
   \   00000016   0x.... 0x....      BL       Magnet_Setup
     95          
     96             Accelerometer_Setup ();
   \   0000001A   0x.... 0x....      BL       Accelerometer_Setup
     97          
     98             MFG_Mode();
   \   0000001E   0x.... 0x....      BL       MFG_Mode
     99          
    100             BLE_Setup();
   \   00000022   0x.... 0x....      BL       BLE_Setup
    101          
    102          
    103             count = 0;
   \   00000026   0x2400             MOVS     R4,#+0
    104             while (TRUE)
    105                {
    106                if (count != runtimeSeconds)
   \                     ??main_0: (+1)
   \   00000028   0x....             LDR      R0,??DataTable5
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD0FB             BEQ      ??main_0
    107                   {
    108                   count = runtimeSeconds;
   \   00000030   0x....             LDR      R0,??DataTable5
   \   00000032   0x6804             LDR      R4,[R0, #+0]
    109                   TS_ToggleTestLED ();
   \   00000034   0x.... 0x....      BL       TS_ToggleTestLED
   \   00000038   0xE7F6             B        ??main_0
    110                   }
    111                }
    112          }
    113          
    114          /*
    115          ** If we need to restart, this is the way to do it. This function will make
    116          ** sure we restart properly.
    117          */

   \                                 In section .text, align 2, keep-with-next
    118          void
    119          ForceRestart (void)
    120          {
   \                     ForceRestart: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    121             printf("Got restart request\n");
   \   00000002   0x....             LDR      R0,??DataTable5_1
   \   00000004   0x.... 0x....      BL       printf
    122             UART0_TxFlush ();
   \   00000008   0x.... 0x....      BL       UART0_TxFlush
    123          
    124             __disable_interrupt();
   \   0000000C   0xB672             CPSID    I
    125          
    126          #ifdef DEBUG
    127             while (TRUE);
   \                     ??ForceRestart_0: (+1)
   \   0000000E   0xE7FE             B        ??ForceRestart_0
    128          #else
    129             NVIC_SystemReset();
    130          #endif
    131          }
    132          
    133          /*
    134          ** If we take one of these exceptions, what we will get on the stack when we hit the exception is the following:
    135          **    PSR
    136          **    PC
    137          **    LR
    138          **    R12
    139          **    R3
    140          **    R2
    141          **    R1
    142          **    R0
    143          **
    144          ** If we keep each fault handler simple then they will push R7 and LR.
    145          ** The Fault Exit routine will also push R4 and LR
    146          **
    147          ** So given all that, We want PC which should then be 11 pushes back on the stack. Go back 10 since SP is already
    148          ** pointing at the last one.
    149          */

   \                                 In section .text, align 2, keep-with-next
    150          void
    151          FaultExit (unsigned char *str)
    152          {
   \                     FaultExit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    153             unsigned int *sp = GetStackPointer();
   \   00000004   0x.... 0x....      BL       GetStackPointer
    154          
    155             printf("%s Fault at %lx\n", str, *(sp + 10));
   \   00000008   0x6A82             LDR      R2,[R0, #+40]
   \   0000000A   0x0021             MOVS     R1,R4
   \   0000000C   0x....             LDR      R0,??DataTable5_2
   \   0000000E   0x.... 0x....      BL       printf
    156          
    157                /* Make sure we reboot after this */
    158             ForceRestart();
   \   00000012   0x.... 0x....      BL       ForceRestart
    159          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    160          
    161          

   \                                 In section .text, align 2, keep-with-next
    162          void
    163          NMI_Handler (void)
    164          {
   \                     NMI_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    165             FaultExit ("NMI");
   \   00000002   0x....             ADR      R0,??DataTable5_3  ;; "NMI"
   \   00000004   0x.... 0x....      BL       FaultExit
    166          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    167          

   \                                 In section .text, align 2, keep-with-next
    168          void
    169          HardFault_Handler (void)
    170          {
   \                     HardFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    171          //break this down for MPU error
    172             FaultExit ("Hard");
   \   00000002   0x....             LDR      R0,??DataTable5_4
   \   00000004   0x.... 0x....      BL       FaultExit
    173          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    174          

   \                                 In section .text, align 2, keep-with-next
    175          void
    176          intvec_NotSupported (void)
    177          {
   \                     intvec_NotSupported: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    178             FaultExit ("Not Supported");
   \   00000002   0x....             LDR      R0,??DataTable5_5
   \   00000004   0x.... 0x....      BL       FaultExit
    179          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     runtimeSeconds

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x4E 0x4D          DC8      "NMI"
   \              0x49 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x47 0x6F          DC8 "Got restart request\012"
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x73 0x74    
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x25 0x73          DC8 "%s Fault at %lx\012"
   \              0x20 0x46    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x25 0x6C    
   \              0x78 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x4E 0x4D          DC8 "NMI"
   \              0x49 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x48 0x61          DC8 "Hard"
   \              0x72 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x4E 0x6F          DC8 "Not Supported"
   \              0x74 0x20    
   \              0x53 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0
    180          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   FaultExit
         8   -> ForceRestart
         8   -> GetStackPointer
         8   -> printf
       8   ForceRestart
         8   -> UART0_TxFlush
         8   -> printf
       8   HardFault_Handler
         8   -> FaultExit
       8   NMI_Handler
         8   -> FaultExit
       8   intvec_NotSupported
         8   -> FaultExit
       8   main
         8   -> Accelerometer_Setup
         8   -> BLE_Setup
         8   -> I2C_Setup
         8   -> MFG_Mode
         8   -> Magnet_Setup
         8   -> Motor_Setup
         8   -> TS_Setup
         8   -> TS_ToggleTestLED
         8   -> Timer_Setup
         8   -> UART_Setup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
      24  ?_0
      20  ?_1
       4  ?_2
       8  ?_3
      16  ?_4
      52  CopyRight
      24  FaultExit
      16  ForceRestart
      10  HardFault_Handler
      10  NMI_Handler
      12  PartNumber
      10  intvec_NotSupported
      58  main

 
 136 bytes in section .rodata
 152 bytes in section .text
 
 152 bytes of CODE  memory
 136 bytes of CONST memory

Errors: none
Warnings: none
