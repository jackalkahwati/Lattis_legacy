###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        07/Apr/2015  15:40:36
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\VeloLabs\SkyLock Project\Source\ble_lbs.c
#    Command line =  
#        "C:\VeloLabs\SkyLock Project\Source\ble_lbs.c" -D NRF51 -D
#        BLE_STACK_SUPPORT_REQD -lCN "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\Debug\List\" -o "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\Debug\Obj\" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Normal.h" -I "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\include\" -I "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\include\ARMFiles\" -I "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\drivers_nrf\hal\" -I
#        "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\softdevice\s110\headers\"
#        -I "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\toolchain\" -I
#        "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\softdevice\common\softdevice_handler\"
#        -I "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\libraries\util\" -I
#        "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\libraries\scheduler\" -I
#        "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\libraries\timer\" -I
#        "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\ble\common\" -Ol
#    List file    =  
#        C:\VeloLabs\SkyLock Project\IAR_7_30_4\Debug\List\ble_lbs.lst
#    Object file  =  C:\VeloLabs\SkyLock Project\IAR_7_30_4\Debug\Obj\ble_lbs.o
#
###############################################################################

C:\VeloLabs\SkyLock Project\Source\ble_lbs.c
      1          /* Copyright (c) 2013 Nordic Semiconductor. All Rights Reserved.
      2           *
      3           * Use of this source code is governed by a BSD-style license that can be
      4           * found in the license.txt file.
      5           */
      6          
      7          #include <ble_gatts.h>
      8          #include <string.h>
      9          #include "nordic_common.h"
     10          #include "ble_srv_common.h"
     11          #include "app_util.h"
     12          #include "ble_lbs.h"
     13          
     14          #define HTONL(n) (((((unsigned long)(n) & 0xFF)) << 24) | \
     15                            ((((unsigned long)(n) & 0xFF00)) << 8) | \
     16                            ((((unsigned long)(n) & 0xFF0000)) >> 8) | \
     17                            ((((unsigned long)(n) & 0xFF000000)) >> 24))
     18          
     19          /**@brief Function for handling the Connect event.
     20           *
     21           * @param[in]   p_lbs       LED Button Service structure.
     22           * @param[in]   p_ble_evt   Event received from the BLE stack.
     23           */

   \                                 In section .text, align 2, keep-with-next
     24          static void on_connect(ble_lbs_t * p_lbs, ble_evt_t * p_ble_evt)
     25          {
     26              p_lbs->conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
   \                     on_connect: (+1)
   \   00000000   0x8889             LDRH     R1,[R1, #+4]
   \   00000002   0x305C             ADDS     R0,R0,#+92
   \   00000004   0x8001             STRH     R1,[R0, #+0]
     27          }
   \   00000006   0x4770             BX       LR               ;; return
     28          
     29          
     30          /**@brief Function for handling the Disconnect event.
     31           *
     32           * @param[in]   p_lbs       LED Button Service structure.
     33           * @param[in]   p_ble_evt   Event received from the BLE stack.
     34           */

   \                                 In section .text, align 2, keep-with-next
     35          static void on_disconnect(ble_lbs_t * p_lbs, ble_evt_t * p_ble_evt)
     36          {
     37              UNUSED_PARAMETER(p_ble_evt);
     38              p_lbs->conn_handle = BLE_CONN_HANDLE_INVALID;
   \                     on_disconnect: (+1)
   \   00000000   0x....             LDR      R1,??DataTable1  ;; 0xffff
   \   00000002   0x305C             ADDS     R0,R0,#+92
   \   00000004   0x8001             STRH     R1,[R0, #+0]
     39          }
   \   00000006   0x4770             BX       LR               ;; return
     40          
     41          
     42          /**@brief Function for handling the Write event.
     43           *
     44           * @param[in]   p_lbs       LED Button Service structure.
     45           * @param[in]   p_ble_evt   Event received from the BLE stack.
     46           */

   \                                 In section .text, align 2, keep-with-next
     47          static void on_write(ble_lbs_t * p_lbs, ble_evt_t * p_ble_evt)
     48          {
   \                     on_write: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     49              ble_gatts_evt_write_t * p_evt_write = &p_ble_evt->evt.gatts_evt.params.write;
   \   00000004   0x1D89             ADDS     R1,R1,#+6
   \   00000006   0x000D             MOVS     R5,R1
     50          
     51          printf("on write: %u %u\n", p_evt_write->len, p_evt_write->data[0]);
   \   00000008   0x7EAA             LDRB     R2,[R5, #+26]
   \   0000000A   0x8B29             LDRH     R1,[R5, #+24]
   \   0000000C   0x....             LDR      R0,??DataTable1_1
   \   0000000E   0x.... 0x....      BL       printf
     52              if ((p_evt_write->handle == p_lbs->led_char_handles.value_handle) &&
     53                  (p_evt_write->len == 1) &&
     54                  (p_lbs->led_write_handler != NULL))
   \   00000012   0x8828             LDRH     R0,[R5, #+0]
   \   00000014   0x8861             LDRH     R1,[R4, #+2]
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD109             BNE      ??on_write_0
   \   0000001A   0x8B28             LDRH     R0,[R5, #+24]
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD106             BNE      ??on_write_0
   \   00000020   0x6E20             LDR      R0,[R4, #+96]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD003             BEQ      ??on_write_0
     55              {
     56                  p_lbs->led_write_handler(p_lbs, p_evt_write->data[0]);
   \   00000026   0x7EA9             LDRB     R1,[R5, #+26]
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x6E22             LDR      R2,[R4, #+96]
   \   0000002C   0x4790             BLX      R2
     57              }
     58          }
   \                     ??on_write_0: (+1)
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     59          
     60          

   \                                 In section .text, align 2, keep-with-next
     61          void ble_lbs_on_ble_evt(ble_lbs_t * p_lbs, ble_evt_t * p_ble_evt)
     62          {
   \                     ble_lbs_on_ble_evt: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     63              switch (p_ble_evt->header.evt_id)
   \   00000002   0x880A             LDRH     R2,[R1, #+0]
   \   00000004   0x2A10             CMP      R2,#+16
   \   00000006   0xD004             BEQ      ??ble_lbs_on_ble_evt_0
   \   00000008   0x2A11             CMP      R2,#+17
   \   0000000A   0xD005             BEQ      ??ble_lbs_on_ble_evt_1
   \   0000000C   0x2A50             CMP      R2,#+80
   \   0000000E   0xD006             BEQ      ??ble_lbs_on_ble_evt_2
   \   00000010   0xE008             B        ??ble_lbs_on_ble_evt_3
     64              {
     65                  case BLE_GAP_EVT_CONNECTED:
     66                      on_connect(p_lbs, p_ble_evt);
   \                     ??ble_lbs_on_ble_evt_0: (+1)
   \   00000012   0x.... 0x....      BL       on_connect
     67                      break;
   \   00000016   0xE005             B        ??ble_lbs_on_ble_evt_4
     68          
     69                  case BLE_GAP_EVT_DISCONNECTED:
     70                      on_disconnect(p_lbs, p_ble_evt);
   \                     ??ble_lbs_on_ble_evt_1: (+1)
   \   00000018   0x.... 0x....      BL       on_disconnect
     71                      break;
   \   0000001C   0xE002             B        ??ble_lbs_on_ble_evt_4
     72          
     73                  case BLE_GATTS_EVT_WRITE:
     74                      on_write(p_lbs, p_ble_evt);
   \                     ??ble_lbs_on_ble_evt_2: (+1)
   \   0000001E   0x.... 0x....      BL       on_write
     75                      break;
   \   00000022   0xE7FF             B        ??ble_lbs_on_ble_evt_4
     76          
     77                  default:
     78                      // No implementation needed.
     79                      break;
     80              }
     81          }
   \                     ??ble_lbs_on_ble_evt_3: (+1)
   \                     ??ble_lbs_on_ble_evt_4: (+1)
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
     82          

   \                                 In section .data, align 4
     83          ble_gatts_char_pf_t ble_uint32_t = {
   \                     ble_uint32_t:
   \   00000000   0x08 0x00          DC8 8, 0
   \   00000002   0x0000             DC16 0
   \   00000004   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
     84            .format = BLE_GATT_CPF_FORMAT_UINT32,
     85            .exponent = 0,
     86            .name_space = 1,
     87          };

   \                                 In section .data, align 4
     88          ble_gatts_char_pf_t ble_int32_t = {
   \                     ble_int32_t:
   \   00000000   0x10 0x00          DC8 16, 0
   \   00000002   0x0000             DC16 0
   \   00000004   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
     89            .format = BLE_GATT_CPF_FORMAT_SINT32,
     90            .exponent = 0,
     91            .name_space = 1,
     92          };

   \                                 In section .data, align 4
     93          ble_gatts_char_pf_t ble_uint16_t = {
   \                     ble_uint16_t:
   \   00000000   0x06 0x00          DC8 6, 0
   \   00000002   0x0000             DC16 0
   \   00000004   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
     94            .format = BLE_GATT_CPF_FORMAT_UINT16,
     95            .exponent = 0,
     96            .name_space = 1,
     97          };

   \                                 In section .data, align 4
     98          ble_gatts_char_pf_t ble_int16_t = {
   \                     ble_int16_t:
   \   00000000   0x0E 0x00          DC8 14, 0
   \   00000002   0x0000             DC16 0
   \   00000004   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
     99            .format = BLE_GATT_CPF_FORMAT_SINT16,
    100            .exponent = 0,
    101            .name_space = 1,
    102          };

   \                                 In section .data, align 4
    103          ble_gatts_char_pf_t ble_uint8_t = {
   \                     ble_uint8_t:
   \   00000000   0x04 0x00          DC8 4, 0
   \   00000002   0x0000             DC16 0
   \   00000004   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
    104            .format = BLE_GATT_CPF_FORMAT_UINT8,
    105            .exponent = 0,
    106            .name_space = 1,
    107          };

   \                                 In section .data, align 4
    108          ble_gatts_char_pf_t ble_int8_t = {
   \                     ble_int8_t:
   \   00000000   0x0C 0x00          DC8 12, 0
   \   00000002   0x0000             DC16 0
   \   00000004   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
    109            .format = BLE_GATT_CPF_FORMAT_SINT8,
    110            .exponent = 0,
    111            .name_space = 1,
    112          };
    113          

   \                                 In section .text, align 2, keep-with-next
    114          static uint32_t ble_char_add(ble_lbs_t * p_lbs, const ble_lbs_init_t * p_lbs_init,
    115                                       ble_gatts_char_handles_t *const  p_handles, uint16_t uuid,
    116                                       uint8_t val_len, uint8_t* name, uint8_t name_len, bool write,
    117                                       uint8_t* val_loc, ble_gatts_char_pf_t* pres_fmt)
    118          {
   \                     ble_char_add: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001F             MOVS     R7,R3
    119              ble_gatts_char_md_t char_md;
    120              //ble_gatts_attr_md_t cccd_md;
    121              ble_gatts_attr_t    attr_char_value;
    122              ble_uuid_t          ble_uuid;
    123              ble_gatts_attr_md_t attr_md;
    124          
    125              //memset(&cccd_md, 0, sizeof(cccd_md));
    126          
    127              //BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
    128              //BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.write_perm);
    129              //cccd_md.vloc = BLE_GATTS_VLOC_STACK;
    130          
    131              memset(&char_md, 0, sizeof(char_md));
   \   0000000A   0x211C             MOVS     R1,#+28
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0xAE02             ADD      R6,SP,#+8
   \   00000010   0x0030             MOVS     R0,R6
   \   00000012   0x.... 0x....      BL       __aeabi_memset
    132          
    133              char_md.char_props.read   = 1;
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x7A00             LDRB     R0,[R0, #+8]
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x4301             ORRS     R1,R1,R0
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x7201             STRB     R1,[R0, #+8]
   \   00000022   0x9E17             LDR      R6,[SP, #+92]
    134              if(write){
   \   00000024   0xB2F6             UXTB     R6,R6
   \   00000026   0x2E00             CMP      R6,#+0
   \   00000028   0xD006             BEQ      ??ble_char_add_0
    135                char_md.char_props.write = 1;
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x7A00             LDRB     R0,[R0, #+8]
   \   0000002E   0x2108             MOVS     R1,#+8
   \   00000030   0x4301             ORRS     R1,R1,R0
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x7201             STRB     R1,[R0, #+8]
   \   00000036   0xE005             B        ??ble_char_add_1
    136              } else {
    137                char_md.char_props.notify = 1;
   \                     ??ble_char_add_0: (+1)
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x7A00             LDRB     R0,[R0, #+8]
   \   0000003C   0x2110             MOVS     R1,#+16
   \   0000003E   0x4301             ORRS     R1,R1,R0
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x7201             STRB     R1,[R0, #+8]
    138              }
    139          
    140              char_md.p_char_user_desc  = name;
   \                     ??ble_char_add_1: (+1)
   \   00000044   0x9815             LDR      R0,[SP, #+84]
   \   00000046   0x9003             STR      R0,[SP, #+12]
   \   00000048   0x9816             LDR      R0,[SP, #+88]
    141              char_md.char_user_desc_max_size = name_len;
   \   0000004A   0xB2C0             UXTB     R0,R0
   \   0000004C   0xA902             ADD      R1,SP,#+8
   \   0000004E   0x8108             STRH     R0,[R1, #+8]
    142              char_md.char_user_desc_size =  name_len;
   \   00000050   0xB2C0             UXTB     R0,R0
   \   00000052   0xA902             ADD      R1,SP,#+8
   \   00000054   0x8148             STRH     R0,[R1, #+10]
    143              char_md.p_char_pf         = pres_fmt;;
   \   00000056   0x9819             LDR      R0,[SP, #+100]
   \   00000058   0x9005             STR      R0,[SP, #+20]
    144              char_md.p_user_desc_md    = NULL;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x9006             STR      R0,[SP, #+24]
    145          
    146              //char_md.p_cccd_md         = &cccd_md;
    147              char_md.p_cccd_md         = NULL;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x9007             STR      R0,[SP, #+28]
    148          
    149              char_md.p_sccd_md         = NULL;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x9008             STR      R0,[SP, #+32]
    150          
    151              ble_uuid.type = p_lbs->uuid_type;
   \   00000066   0x205A             MOVS     R0,#+90
   \   00000068   0x5C20             LDRB     R0,[R4, R0]
   \   0000006A   0xA901             ADD      R1,SP,#+4
   \   0000006C   0x7088             STRB     R0,[R1, #+2]
    152              ble_uuid.uuid = uuid;
   \   0000006E   0x4668             MOV      R0,SP
   \   00000070   0x8087             STRH     R7,[R0, #+4]
    153          
    154              memset(&attr_md, 0, sizeof(attr_md));
   \   00000072   0x2103             MOVS     R1,#+3
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0x466F             MOV      R7,SP
   \   00000078   0x0038             MOVS     R0,R7
   \   0000007A   0x.... 0x....      BL       __aeabi_memset
    155          
    156              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
   \   0000007E   0x4668             MOV      R0,SP
   \   00000080   0x7800             LDRB     R0,[R0, #+0]
   \   00000082   0x21F0             MOVS     R1,#+240
   \   00000084   0x4001             ANDS     R1,R1,R0
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x4308             ORRS     R0,R0,R1
   \   0000008A   0x4669             MOV      R1,SP
   \   0000008C   0x7008             STRB     R0,[R1, #+0]
   \   0000008E   0x4668             MOV      R0,SP
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000094   0x0F00             LSRS     R0,R0,#+28
   \   00000096   0x2110             MOVS     R1,#+16
   \   00000098   0x4301             ORRS     R1,R1,R0
   \   0000009A   0x4668             MOV      R0,SP
   \   0000009C   0x7001             STRB     R1,[R0, #+0]
    157              if(write){
   \   0000009E   0xB2F6             UXTB     R6,R6
   \   000000A0   0x2E00             CMP      R6,#+0
   \   000000A2   0xD010             BEQ      ??ble_char_add_2
    158                BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
   \   000000A4   0x4668             MOV      R0,SP
   \   000000A6   0x7840             LDRB     R0,[R0, #+1]
   \   000000A8   0x21F0             MOVS     R1,#+240
   \   000000AA   0x4001             ANDS     R1,R1,R0
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x4308             ORRS     R0,R0,R1
   \   000000B0   0x4669             MOV      R1,SP
   \   000000B2   0x7048             STRB     R0,[R1, #+1]
   \   000000B4   0x4668             MOV      R0,SP
   \   000000B6   0x7840             LDRB     R0,[R0, #+1]
   \   000000B8   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   000000BA   0x0F00             LSRS     R0,R0,#+28
   \   000000BC   0x2110             MOVS     R1,#+16
   \   000000BE   0x4301             ORRS     R1,R1,R0
   \   000000C0   0x4668             MOV      R0,SP
   \   000000C2   0x7041             STRB     R1,[R0, #+1]
   \   000000C4   0xE00B             B        ??ble_char_add_3
    159              } else {
    160                BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(&attr_md.write_perm);
   \                     ??ble_char_add_2: (+1)
   \   000000C6   0x4668             MOV      R0,SP
   \   000000C8   0x7840             LDRB     R0,[R0, #+1]
   \   000000CA   0x21F0             MOVS     R1,#+240
   \   000000CC   0x4001             ANDS     R1,R1,R0
   \   000000CE   0x4668             MOV      R0,SP
   \   000000D0   0x7041             STRB     R1,[R0, #+1]
   \   000000D2   0x4668             MOV      R0,SP
   \   000000D4   0x7840             LDRB     R0,[R0, #+1]
   \   000000D6   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   000000D8   0x0F00             LSRS     R0,R0,#+28
   \   000000DA   0x4669             MOV      R1,SP
   \   000000DC   0x7048             STRB     R0,[R1, #+1]
    161              }
    162              attr_md.vloc       = BLE_GATTS_VLOC_STACK;
   \                     ??ble_char_add_3: (+1)
   \   000000DE   0x4668             MOV      R0,SP
   \   000000E0   0x7880             LDRB     R0,[R0, #+2]
   \   000000E2   0x21F9             MOVS     R1,#+249
   \   000000E4   0x4001             ANDS     R1,R1,R0
   \   000000E6   0x2002             MOVS     R0,#+2
   \   000000E8   0x4308             ORRS     R0,R0,R1
   \   000000EA   0x4669             MOV      R1,SP
   \   000000EC   0x7088             STRB     R0,[R1, #+2]
    163              attr_md.rd_auth    = 0;
   \   000000EE   0x4668             MOV      R0,SP
   \   000000F0   0x7880             LDRB     R0,[R0, #+2]
   \   000000F2   0x21F7             MOVS     R1,#+247
   \   000000F4   0x4001             ANDS     R1,R1,R0
   \   000000F6   0x4668             MOV      R0,SP
   \   000000F8   0x7081             STRB     R1,[R0, #+2]
    164              attr_md.wr_auth    = 0;
   \   000000FA   0x4668             MOV      R0,SP
   \   000000FC   0x7880             LDRB     R0,[R0, #+2]
   \   000000FE   0x21EF             MOVS     R1,#+239
   \   00000100   0x4001             ANDS     R1,R1,R0
   \   00000102   0x4668             MOV      R0,SP
   \   00000104   0x7081             STRB     R1,[R0, #+2]
    165              attr_md.vlen       = 0;
   \   00000106   0x4668             MOV      R0,SP
   \   00000108   0x7880             LDRB     R0,[R0, #+2]
   \   0000010A   0x21FE             MOVS     R1,#+254
   \   0000010C   0x4001             ANDS     R1,R1,R0
   \   0000010E   0x4668             MOV      R0,SP
   \   00000110   0x7081             STRB     R1,[R0, #+2]
    166          
    167              memset(&attr_char_value, 0, sizeof(attr_char_value));
   \   00000112   0x2114             MOVS     R1,#+20
   \   00000114   0x2200             MOVS     R2,#+0
   \   00000116   0xAE09             ADD      R6,SP,#+36
   \   00000118   0x0030             MOVS     R0,R6
   \   0000011A   0x.... 0x....      BL       __aeabi_memset
    168          
    169              attr_char_value.p_uuid       = &ble_uuid;
   \   0000011E   0xA801             ADD      R0,SP,#+4
   \   00000120   0x9009             STR      R0,[SP, #+36]
    170              attr_char_value.p_attr_md    = &attr_md;
   \   00000122   0x4668             MOV      R0,SP
   \   00000124   0x900A             STR      R0,[SP, #+40]
   \   00000126   0x9814             LDR      R0,[SP, #+80]
    171              attr_char_value.init_len     = val_len;
   \   00000128   0xB2C0             UXTB     R0,R0
   \   0000012A   0xA909             ADD      R1,SP,#+36
   \   0000012C   0x8108             STRH     R0,[R1, #+8]
    172              attr_char_value.init_offs    = 0;
   \   0000012E   0x2100             MOVS     R1,#+0
   \   00000130   0xAA09             ADD      R2,SP,#+36
   \   00000132   0x8151             STRH     R1,[R2, #+10]
    173              attr_char_value.max_len      = val_len;
   \   00000134   0xB2C0             UXTB     R0,R0
   \   00000136   0xA909             ADD      R1,SP,#+36
   \   00000138   0x8188             STRH     R0,[R1, #+12]
    174              attr_char_value.p_value      = val_loc;
   \   0000013A   0x9818             LDR      R0,[SP, #+96]
   \   0000013C   0x900D             STR      R0,[SP, #+52]
    175          
    176              return sd_ble_gatts_characteristic_add(p_lbs->service_handle, &char_md,
    177                                                         &attr_char_value,
    178                                                         p_handles);
   \   0000013E   0x002B             MOVS     R3,R5
   \   00000140   0xAA09             ADD      R2,SP,#+36
   \   00000142   0xA902             ADD      R1,SP,#+8
   \   00000144   0x8820             LDRH     R0,[R4, #+0]
   \   00000146   0xDFA2             SVC      0xA2
   \   00000148   0xB00F             ADD      SP,SP,#+60
   \   0000014A   0xBDF0             POP      {R4-R7,PC}       ;; return
    179          }
    180          

   \                                 In section .data, align 4
    181          static uint8_t led_char_name[] = "LOCK";
   \                     led_char_name:
   \   00000000   0x4C 0x4F          DC8 "LOCK"
   \              0x43 0x4B    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .data, align 4
    182          static uint8_t button_char_name[] = "BUTTON";
   \                     button_char_name:
   \   00000000   0x42 0x55          DC8 "BUTTON"
   \              0x54 0x54    
   \              0x4F 0x4E    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .data, align 4
    183          static uint8_t debug_char_name[] = "DEBUG";
   \                     debug_char_name:
   \   00000000   0x44 0x45          DC8 "DEBUG"
   \              0x42 0x55    
   \              0x47 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .data, align 4
    184          static uint8_t quad_char_name[] = "QUAD";
   \                     quad_char_name:
   \   00000000   0x51 0x55          DC8 "QUAD"
   \              0x41 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .data, align 4
    185          static uint8_t magwho_char_name[] = "MAGWHO";
   \                     magwho_char_name:
   \   00000000   0x4D 0x41          DC8 "MAGWHO"
   \              0x47 0x57    
   \              0x48 0x4F    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .data, align 4
    186          static uint8_t accwho_char_name[] = "ACCWHO";
   \                     accwho_char_name:
   \   00000000   0x41 0x43          DC8 "ACCWHO"
   \              0x43 0x57    
   \              0x48 0x4F    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .data, align 4
    187          static uint8_t voltage_char_name[] = "VOLTAGE";
   \                     voltage_char_name:
   \   00000000   0x56 0x4F          DC8 "VOLTAGE"
   \              0x4C 0x54    
   \              0x41 0x47    
   \              0x45 0x00    

   \                                 In section .data, align 4
    188          static uint8_t locksm_char_name[] = "LOCKSM";
   \                     locksm_char_name:
   \   00000000   0x4C 0x4F          DC8 "LOCKSM"
   \              0x43 0x4B    
   \              0x53 0x4D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .data, align 4
    189          static uint8_t lock_pos_char_name[] = "LOCK_POS";
   \                     lock_pos_char_name:
   \   00000000   0x4C 0x4F          DC8 "LOCK_POS"
   \              0x43 0x4B    
   \              0x5F 0x50    
   \              0x4F 0x53    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .data, align 4
    190          static uint8_t lock_back_char_name[] = "LOCK_BACK";
   \                     lock_back_char_name:
   \   00000000   0x4C 0x4F          DC8 "LOCK_BACK"
   \              0x43 0x4B    
   \              0x5F 0x42    
   \              0x41 0x43    
   \              0x4B 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .data, align 4
    191          static uint8_t lock_for_char_name[] = "LOCK_FOR";
   \                     lock_for_char_name:
   \   00000000   0x4C 0x4F          DC8 "LOCK_FOR"
   \              0x43 0x4B    
   \              0x5F 0x46    
   \              0x4F 0x52    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    192          

   \                                 In section .bss, align 1
    193          uint8_t magwho;
   \                     magwho:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    194          uint8_t accwho;
   \                     accwho:
   \   00000000                      DS8 1
    195          

   \                                 In section .text, align 2, keep-with-next
    196          uint32_t ble_lbs_init(ble_lbs_t * p_lbs, const ble_lbs_init_t * p_lbs_init)
    197          {
   \                     ble_lbs_init: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    198              uint32_t   err_code;
    199              ble_uuid_t ble_uuid;
    200          
    201              // Initialize service structure
    202              p_lbs->conn_handle       = BLE_CONN_HANDLE_INVALID;
   \   00000008   0x....             LDR      R0,??DataTable2  ;; 0xffff
   \   0000000A   0x215C             MOVS     R1,#+92
   \   0000000C   0x5260             STRH     R0,[R4, R1]
    203              p_lbs->led_write_handler = p_lbs_init->led_write_handler;
   \   0000000E   0x6828             LDR      R0,[R5, #+0]
   \   00000010   0x6620             STR      R0,[R4, #+96]
    204          
    205              // Add service
    206              ble_uuid128_t base_uuid = {LBS_UUID_BASE};
   \   00000012   0xA807             ADD      R0,SP,#+28
   \   00000014   0x....             LDR      R1,??DataTable2_1
   \   00000016   0x2210             MOVS     R2,#+16
   \   00000018   0x.... 0x....      BL       __aeabi_memcpy4
    207              err_code = sd_ble_uuid_vs_add(&base_uuid, &p_lbs->uuid_type);
   \   0000001C   0x0021             MOVS     R1,R4
   \   0000001E   0x315A             ADDS     R1,R1,#+90
   \   00000020   0xA807             ADD      R0,SP,#+28
   \   00000022   0xDF63             SVC      0x63
    208              if (err_code != NRF_SUCCESS)
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD000             BEQ      .+4
   \   00000028   0xE100             B        ??ble_lbs_init_0
    209              {
    210                  return err_code;
    211              }
    212          
    213              ble_uuid.type = p_lbs->uuid_type;
   \                     ??ble_lbs_init_1: (+1)
   \   0000002A   0x205A             MOVS     R0,#+90
   \   0000002C   0x5C20             LDRB     R0,[R4, R0]
   \   0000002E   0xA906             ADD      R1,SP,#+24
   \   00000030   0x7088             STRB     R0,[R1, #+2]
    214              ble_uuid.uuid = LBS_UUID_SERVICE;
   \   00000032   0x....             LDR      R0,??DataTable3  ;; 0x1523
   \   00000034   0x4669             MOV      R1,SP
   \   00000036   0x8308             STRH     R0,[R1, #+24]
    215          
    216              err_code = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY, &ble_uuid, &p_lbs->service_handle);
   \   00000038   0x0022             MOVS     R2,R4
   \   0000003A   0xA906             ADD      R1,SP,#+24
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0xDFA0             SVC      0xA0
    217              if (err_code != NRF_SUCCESS)
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD000             BEQ      .+4
   \   00000044   0xE0F2             B        ??ble_lbs_init_0
    218              {
    219                  return err_code;
    220              }
    221          
    222              // add button characteristic
    223              err_code = ble_char_add(p_lbs, p_lbs_init,
    224                                      &p_lbs->button_char_handles, LBS_UUID_BUTTON_CHAR,
    225                                      sizeof(uint8_t),
    226                                      button_char_name, sizeof(button_char_name), false,
    227                                      NULL, NULL);
   \                     ??ble_lbs_init_2: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x9005             STR      R0,[SP, #+20]
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x9004             STR      R0,[SP, #+16]
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x9003             STR      R0,[SP, #+12]
   \   00000052   0x2007             MOVS     R0,#+7
   \   00000054   0x9002             STR      R0,[SP, #+8]
   \   00000056   0x....             LDR      R0,??DataTable3_1
   \   00000058   0x9001             STR      R0,[SP, #+4]
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x9000             STR      R0,[SP, #+0]
   \   0000005E   0x....             LDR      R3,??DataTable4  ;; 0x1524
   \   00000060   0x0022             MOVS     R2,R4
   \   00000062   0x320A             ADDS     R2,R2,#+10
   \   00000064   0x0029             MOVS     R1,R5
   \   00000066   0x0020             MOVS     R0,R4
   \   00000068   0x.... 0x....      BL       ble_char_add
    228              if (err_code != NRF_SUCCESS)
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD000             BEQ      .+4
   \   00000070   0xE0DC             B        ??ble_lbs_init_0
    229              {
    230                  return err_code;
    231              }
    232          
    233              // add led (lock) characteristic
    234              err_code = ble_char_add(p_lbs, p_lbs_init,
    235                                      &p_lbs->led_char_handles, LBS_UUID_LED_CHAR,
    236                                      sizeof(uint8_t),
    237                                      led_char_name, sizeof(led_char_name), true,
    238                                      NULL, NULL);
   \                     ??ble_lbs_init_3: (+1)
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x9005             STR      R0,[SP, #+20]
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x9004             STR      R0,[SP, #+16]
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0x9003             STR      R0,[SP, #+12]
   \   0000007E   0x2005             MOVS     R0,#+5
   \   00000080   0x9002             STR      R0,[SP, #+8]
   \   00000082   0x....             LDR      R0,??DataTable4_1
   \   00000084   0x9001             STR      R0,[SP, #+4]
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x9000             STR      R0,[SP, #+0]
   \   0000008A   0x....             LDR      R3,??DataTable4_2  ;; 0x1525
   \   0000008C   0x0022             MOVS     R2,R4
   \   0000008E   0x1C92             ADDS     R2,R2,#+2
   \   00000090   0x0029             MOVS     R1,R5
   \   00000092   0x0020             MOVS     R0,R4
   \   00000094   0x.... 0x....      BL       ble_char_add
    239              if (err_code != NRF_SUCCESS)
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD000             BEQ      .+4
   \   0000009C   0xE0C6             B        ??ble_lbs_init_0
    240              {
    241                  return err_code;
    242              }
    243          
    244              // add debug characteristic
    245              err_code = ble_char_add(p_lbs, p_lbs_init,
    246                                      &p_lbs->debug_char_handles, LBS_UUID_DEBUG_CHAR,
    247                                      sizeof(uint8_t),
    248                                      debug_char_name, sizeof(debug_char_name), false,
    249                                      NULL, NULL);
   \                     ??ble_lbs_init_4: (+1)
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x9005             STR      R0,[SP, #+20]
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x9004             STR      R0,[SP, #+16]
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x9003             STR      R0,[SP, #+12]
   \   000000AA   0x2006             MOVS     R0,#+6
   \   000000AC   0x9002             STR      R0,[SP, #+8]
   \   000000AE   0x....             LDR      R0,??DataTable5
   \   000000B0   0x9001             STR      R0,[SP, #+4]
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0x9000             STR      R0,[SP, #+0]
   \   000000B6   0x....             LDR      R3,??DataTable5_1  ;; 0x1526
   \   000000B8   0x0022             MOVS     R2,R4
   \   000000BA   0x3212             ADDS     R2,R2,#+18
   \   000000BC   0x0029             MOVS     R1,R5
   \   000000BE   0x0020             MOVS     R0,R4
   \   000000C0   0x.... 0x....      BL       ble_char_add
    250              if (err_code != NRF_SUCCESS)
   \   000000C4   0x2800             CMP      R0,#+0
   \   000000C6   0xD000             BEQ      .+4
   \   000000C8   0xE0B0             B        ??ble_lbs_init_0
    251              {
    252                  return err_code;
    253              }
    254          
    255              // add quadrature characteristic
    256              err_code = ble_char_add(p_lbs, p_lbs_init,
    257                                      &p_lbs->quad_char_handles, LBS_UUID_QUAD_CHAR,
    258                                      sizeof(int32_t),
    259                                      quad_char_name, sizeof(quad_char_name), false,
    260                                      NULL, &ble_int32_t);
   \                     ??ble_lbs_init_5: (+1)
   \   000000CA   0x....             LDR      R0,??DataTable6
   \   000000CC   0x9005             STR      R0,[SP, #+20]
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0x9004             STR      R0,[SP, #+16]
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x9003             STR      R0,[SP, #+12]
   \   000000D6   0x2005             MOVS     R0,#+5
   \   000000D8   0x9002             STR      R0,[SP, #+8]
   \   000000DA   0x....             LDR      R0,??DataTable5_2
   \   000000DC   0x9001             STR      R0,[SP, #+4]
   \   000000DE   0x2004             MOVS     R0,#+4
   \   000000E0   0x9000             STR      R0,[SP, #+0]
   \   000000E2   0x....             LDR      R3,??DataTable5_3  ;; 0x1527
   \   000000E4   0x0022             MOVS     R2,R4
   \   000000E6   0x321A             ADDS     R2,R2,#+26
   \   000000E8   0x0029             MOVS     R1,R5
   \   000000EA   0x0020             MOVS     R0,R4
   \   000000EC   0x.... 0x....      BL       ble_char_add
    261              if (err_code != NRF_SUCCESS)
   \   000000F0   0x2800             CMP      R0,#+0
   \   000000F2   0xD000             BEQ      .+4
   \   000000F4   0xE09A             B        ??ble_lbs_init_0
    262              {
    263                  return err_code;
    264              }
    265          
    266              //*
    267              magwho = 42;
   \                     ??ble_lbs_init_6: (+1)
   \   000000F6   0x202A             MOVS     R0,#+42
   \   000000F8   0x....             LDR      R1,??DataTable6_1
   \   000000FA   0x7008             STRB     R0,[R1, #+0]
    268              // add magwho characteristic
    269              err_code = ble_char_add(p_lbs, p_lbs_init,
    270                                      &p_lbs->magwho_char_handles, LBS_UUID_MAGWHO_CHAR,
    271                                      sizeof(uint8_t),
    272                                      magwho_char_name, sizeof(magwho_char_name), false,
    273                                      &magwho, NULL);
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x9005             STR      R0,[SP, #+20]
   \   00000100   0x....             LDR      R0,??DataTable6_1
   \   00000102   0x9004             STR      R0,[SP, #+16]
   \   00000104   0x2000             MOVS     R0,#+0
   \   00000106   0x9003             STR      R0,[SP, #+12]
   \   00000108   0x2007             MOVS     R0,#+7
   \   0000010A   0x9002             STR      R0,[SP, #+8]
   \   0000010C   0x....             LDR      R0,??DataTable6_2
   \   0000010E   0x9001             STR      R0,[SP, #+4]
   \   00000110   0x2001             MOVS     R0,#+1
   \   00000112   0x9000             STR      R0,[SP, #+0]
   \   00000114   0x....             LDR      R3,??DataTable6_3  ;; 0x1528
   \   00000116   0x0022             MOVS     R2,R4
   \   00000118   0x3222             ADDS     R2,R2,#+34
   \   0000011A   0x0029             MOVS     R1,R5
   \   0000011C   0x0020             MOVS     R0,R4
   \   0000011E   0x.... 0x....      BL       ble_char_add
    274              if (err_code != NRF_SUCCESS)
   \   00000122   0x2800             CMP      R0,#+0
   \   00000124   0xD000             BEQ      .+4
   \   00000126   0xE081             B        ??ble_lbs_init_0
    275              {
    276                  return err_code;
    277              }
    278              // */
    279          
    280              //*
    281              accwho = 42;
   \                     ??ble_lbs_init_7: (+1)
   \   00000128   0x202A             MOVS     R0,#+42
   \   0000012A   0x....             LDR      R1,??DataTable6_4
   \   0000012C   0x7008             STRB     R0,[R1, #+0]
    282              // add magwho characteristic
    283              err_code = ble_char_add(p_lbs, p_lbs_init,
    284                                      &p_lbs->accwho_char_handles, LBS_UUID_ACCWHO_CHAR,
    285                                      sizeof(uint8_t),
    286                                      accwho_char_name, sizeof(accwho_char_name), false,
    287                                      &accwho, NULL);
   \   0000012E   0x2000             MOVS     R0,#+0
   \   00000130   0x9005             STR      R0,[SP, #+20]
   \   00000132   0x....             LDR      R0,??DataTable6_4
   \   00000134   0x9004             STR      R0,[SP, #+16]
   \   00000136   0x2000             MOVS     R0,#+0
   \   00000138   0x9003             STR      R0,[SP, #+12]
   \   0000013A   0x2007             MOVS     R0,#+7
   \   0000013C   0x9002             STR      R0,[SP, #+8]
   \   0000013E   0x....             LDR      R0,??DataTable6_5
   \   00000140   0x9001             STR      R0,[SP, #+4]
   \   00000142   0x2001             MOVS     R0,#+1
   \   00000144   0x9000             STR      R0,[SP, #+0]
   \   00000146   0x....             LDR      R3,??DataTable6_6  ;; 0x1529
   \   00000148   0x0022             MOVS     R2,R4
   \   0000014A   0x322A             ADDS     R2,R2,#+42
   \   0000014C   0x0029             MOVS     R1,R5
   \   0000014E   0x0020             MOVS     R0,R4
   \   00000150   0x.... 0x....      BL       ble_char_add
    288              if (err_code != NRF_SUCCESS)
   \   00000154   0x2800             CMP      R0,#+0
   \   00000156   0xD169             BNE      ??ble_lbs_init_0
    289              {
    290                  return err_code;
    291              }
    292              // */
    293          
    294              // add voltage characteristic
    295              err_code = ble_char_add(p_lbs, p_lbs_init,
    296                                      &p_lbs->voltage_char_handles, LBS_UUID_VOLTAGE_CHAR,
    297                                      sizeof(uint8_t),
    298                                      voltage_char_name, sizeof(voltage_char_name), false,
    299                                      NULL, NULL);
   \                     ??ble_lbs_init_8: (+1)
   \   00000158   0x2000             MOVS     R0,#+0
   \   0000015A   0x9005             STR      R0,[SP, #+20]
   \   0000015C   0x2000             MOVS     R0,#+0
   \   0000015E   0x9004             STR      R0,[SP, #+16]
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0x9003             STR      R0,[SP, #+12]
   \   00000164   0x2008             MOVS     R0,#+8
   \   00000166   0x9002             STR      R0,[SP, #+8]
   \   00000168   0x....             LDR      R0,??DataTable6_7
   \   0000016A   0x9001             STR      R0,[SP, #+4]
   \   0000016C   0x2001             MOVS     R0,#+1
   \   0000016E   0x9000             STR      R0,[SP, #+0]
   \   00000170   0x....             LDR      R3,??DataTable6_8  ;; 0x152a
   \   00000172   0x0022             MOVS     R2,R4
   \   00000174   0x3232             ADDS     R2,R2,#+50
   \   00000176   0x0029             MOVS     R1,R5
   \   00000178   0x0020             MOVS     R0,R4
   \   0000017A   0x.... 0x....      BL       ble_char_add
    300              if (err_code != NRF_SUCCESS)
   \   0000017E   0x2800             CMP      R0,#+0
   \   00000180   0xD154             BNE      ??ble_lbs_init_0
    301              {
    302                  return err_code;
    303              }
    304          
    305              // add locksm characteristic
    306              err_code = ble_char_add(p_lbs, p_lbs_init,
    307                                      &p_lbs->locksm_char_handles, LBS_UUID_LOCKSM_CHAR,
    308                                      sizeof(uint8_t),
    309                                      locksm_char_name, sizeof(locksm_char_name), false,
    310                                      NULL, NULL);
   \                     ??ble_lbs_init_9: (+1)
   \   00000182   0x2000             MOVS     R0,#+0
   \   00000184   0x9005             STR      R0,[SP, #+20]
   \   00000186   0x2000             MOVS     R0,#+0
   \   00000188   0x9004             STR      R0,[SP, #+16]
   \   0000018A   0x2000             MOVS     R0,#+0
   \   0000018C   0x9003             STR      R0,[SP, #+12]
   \   0000018E   0x2007             MOVS     R0,#+7
   \   00000190   0x9002             STR      R0,[SP, #+8]
   \   00000192   0x....             LDR      R0,??DataTable6_9
   \   00000194   0x9001             STR      R0,[SP, #+4]
   \   00000196   0x2001             MOVS     R0,#+1
   \   00000198   0x9000             STR      R0,[SP, #+0]
   \   0000019A   0x....             LDR      R3,??DataTable6_10  ;; 0x152b
   \   0000019C   0x0022             MOVS     R2,R4
   \   0000019E   0x323A             ADDS     R2,R2,#+58
   \   000001A0   0x0029             MOVS     R1,R5
   \   000001A2   0x0020             MOVS     R0,R4
   \   000001A4   0x.... 0x....      BL       ble_char_add
    311              if (err_code != NRF_SUCCESS)
   \   000001A8   0x2800             CMP      R0,#+0
   \   000001AA   0xD13F             BNE      ??ble_lbs_init_0
    312              {
    313                  return err_code;
    314              }
    315          
    316              err_code = ble_char_add(p_lbs, p_lbs_init,
    317                                      &p_lbs->lock_pos_char_handles, LBS_UUID_LOCK_POS_CHAR,
    318                                      sizeof(int32_t),
    319                                      lock_pos_char_name, sizeof(lock_pos_char_name), false,
    320                                      NULL, &ble_int32_t);
   \                     ??ble_lbs_init_10: (+1)
   \   000001AC   0x....             LDR      R0,??DataTable6
   \   000001AE   0x9005             STR      R0,[SP, #+20]
   \   000001B0   0x2000             MOVS     R0,#+0
   \   000001B2   0x9004             STR      R0,[SP, #+16]
   \   000001B4   0x2000             MOVS     R0,#+0
   \   000001B6   0x9003             STR      R0,[SP, #+12]
   \   000001B8   0x2009             MOVS     R0,#+9
   \   000001BA   0x9002             STR      R0,[SP, #+8]
   \   000001BC   0x....             LDR      R0,??DataTable6_11
   \   000001BE   0x9001             STR      R0,[SP, #+4]
   \   000001C0   0x2004             MOVS     R0,#+4
   \   000001C2   0x9000             STR      R0,[SP, #+0]
   \   000001C4   0x....             LDR      R3,??DataTable6_12  ;; 0x152c
   \   000001C6   0x0022             MOVS     R2,R4
   \   000001C8   0x3242             ADDS     R2,R2,#+66
   \   000001CA   0x0029             MOVS     R1,R5
   \   000001CC   0x0020             MOVS     R0,R4
   \   000001CE   0x.... 0x....      BL       ble_char_add
    321              if (err_code != NRF_SUCCESS)
   \   000001D2   0x2800             CMP      R0,#+0
   \   000001D4   0xD12A             BNE      ??ble_lbs_init_0
    322              {
    323                  return err_code;
    324              }
    325              err_code = ble_char_add(p_lbs, p_lbs_init,
    326                                      &p_lbs->lock_back_char_handles, LBS_UUID_LOCK_BACK_CHAR,
    327                                      sizeof(int32_t),
    328                                      lock_back_char_name, sizeof(lock_back_char_name), false,
    329                                      NULL, &ble_int32_t);
   \                     ??ble_lbs_init_11: (+1)
   \   000001D6   0x....             LDR      R0,??DataTable6
   \   000001D8   0x9005             STR      R0,[SP, #+20]
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x9004             STR      R0,[SP, #+16]
   \   000001DE   0x2000             MOVS     R0,#+0
   \   000001E0   0x9003             STR      R0,[SP, #+12]
   \   000001E2   0x200A             MOVS     R0,#+10
   \   000001E4   0x9002             STR      R0,[SP, #+8]
   \   000001E6   0x....             LDR      R0,??DataTable6_13
   \   000001E8   0x9001             STR      R0,[SP, #+4]
   \   000001EA   0x2004             MOVS     R0,#+4
   \   000001EC   0x9000             STR      R0,[SP, #+0]
   \   000001EE   0x....             LDR      R3,??DataTable6_14  ;; 0x152d
   \   000001F0   0x0022             MOVS     R2,R4
   \   000001F2   0x324A             ADDS     R2,R2,#+74
   \   000001F4   0x0029             MOVS     R1,R5
   \   000001F6   0x0020             MOVS     R0,R4
   \   000001F8   0x.... 0x....      BL       ble_char_add
    330              if (err_code != NRF_SUCCESS)
   \   000001FC   0x2800             CMP      R0,#+0
   \   000001FE   0xD115             BNE      ??ble_lbs_init_0
    331              {
    332                  return err_code;
    333              }
    334              err_code = ble_char_add(p_lbs, p_lbs_init,
    335                                      &p_lbs->lock_for_char_handles, LBS_UUID_LOCK_FOR_CHAR,
    336                                      sizeof(int32_t),
    337                                      lock_for_char_name, sizeof(lock_for_char_name), false,
    338                                      NULL, &ble_int32_t);
   \                     ??ble_lbs_init_12: (+1)
   \   00000200   0x....             LDR      R0,??DataTable6
   \   00000202   0x9005             STR      R0,[SP, #+20]
   \   00000204   0x2000             MOVS     R0,#+0
   \   00000206   0x9004             STR      R0,[SP, #+16]
   \   00000208   0x2000             MOVS     R0,#+0
   \   0000020A   0x9003             STR      R0,[SP, #+12]
   \   0000020C   0x2009             MOVS     R0,#+9
   \   0000020E   0x9002             STR      R0,[SP, #+8]
   \   00000210   0x....             LDR      R0,??DataTable6_15
   \   00000212   0x9001             STR      R0,[SP, #+4]
   \   00000214   0x2004             MOVS     R0,#+4
   \   00000216   0x9000             STR      R0,[SP, #+0]
   \   00000218   0x....             LDR      R3,??DataTable6_16  ;; 0x152e
   \   0000021A   0x0022             MOVS     R2,R4
   \   0000021C   0x3252             ADDS     R2,R2,#+82
   \   0000021E   0x0029             MOVS     R1,R5
   \   00000220   0x0020             MOVS     R0,R4
   \   00000222   0x.... 0x....      BL       ble_char_add
    339              if (err_code != NRF_SUCCESS)
   \   00000226   0x2800             CMP      R0,#+0
   \   00000228   0xD100             BNE      ??ble_lbs_init_0
    340              {
    341                  return err_code;
    342              }
    343          
    344          
    345              return NRF_SUCCESS;
   \                     ??ble_lbs_init_13: (+1)
   \   0000022A   0x2000             MOVS     R0,#+0
   \                     ??ble_lbs_init_0: (+1)
   \   0000022C   0xB00B             ADD      SP,SP,#+44
   \   0000022E   0xBD30             POP      {R4,R5,PC}       ;; return
    346          }
    347          

   \                                 In section .text, align 2, keep-with-next
    348          uint32_t ble_lbs_on_button_change(ble_lbs_t * p_lbs, uint8_t button_state)
    349          {
   \                     ble_lbs_on_button_change: (+1)
   \   00000000   0xB532             PUSH     {R1,R4,R5,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    350              ble_gatts_hvx_params_t params;
    351              uint16_t len = sizeof(button_state);
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    352          
    353              memset(&params, 0, sizeof(params));
   \   0000000C   0x2110             MOVS     R1,#+16
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xAD01             ADD      R5,SP,#+4
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x.... 0x....      BL       __aeabi_memset
    354              params.type = BLE_GATT_HVX_NOTIFICATION;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x7088             STRB     R0,[R1, #+2]
    355              params.handle = p_lbs->button_char_handles.value_handle;
   \   0000001E   0x8960             LDRH     R0,[R4, #+10]
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x8088             STRH     R0,[R1, #+4]
    356              params.p_data = &button_state;
   \   00000024   0xA806             ADD      R0,SP,#+24
   \   00000026   0x9004             STR      R0,[SP, #+16]
    357              params.p_len = &len;
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x9003             STR      R0,[SP, #+12]
    358          
    359              return sd_ble_gatts_hvx(p_lbs->conn_handle, &params);
   \   0000002C   0xA901             ADD      R1,SP,#+4
   \   0000002E   0x345C             ADDS     R4,R4,#+92
   \   00000030   0x8820             LDRH     R0,[R4, #+0]
   \   00000032   0xDFA6             SVC      0xA6
   \   00000034   0xB007             ADD      SP,SP,#+28
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return
    360          }
    361          

   \                                 In section .text, align 2, keep-with-next
    362          uint32_t ble_lbs_send_debug_state(ble_lbs_t * p_lbs, uint8_t debug_state)
    363          {
   \                     ble_lbs_send_debug_state: (+1)
   \   00000000   0xB532             PUSH     {R1,R4,R5,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    364              ble_gatts_hvx_params_t params;
    365              uint16_t len = sizeof(debug_state);
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    366          
    367              memset(&params, 0, sizeof(params));
   \   0000000C   0x2110             MOVS     R1,#+16
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xAD01             ADD      R5,SP,#+4
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x.... 0x....      BL       __aeabi_memset
    368              params.type = BLE_GATT_HVX_NOTIFICATION;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x7088             STRB     R0,[R1, #+2]
    369              params.handle = p_lbs->debug_char_handles.value_handle;
   \   0000001E   0x8A60             LDRH     R0,[R4, #+18]
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x8088             STRH     R0,[R1, #+4]
    370              params.p_data = &debug_state;
   \   00000024   0xA806             ADD      R0,SP,#+24
   \   00000026   0x9004             STR      R0,[SP, #+16]
    371              params.p_len = &len;
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x9003             STR      R0,[SP, #+12]
    372          
    373              return sd_ble_gatts_hvx(p_lbs->conn_handle, &params);
   \   0000002C   0xA901             ADD      R1,SP,#+4
   \   0000002E   0x345C             ADDS     R4,R4,#+92
   \   00000030   0x8820             LDRH     R0,[R4, #+0]
   \   00000032   0xDFA6             SVC      0xA6
   \   00000034   0xB007             ADD      SP,SP,#+28
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return
    374          }
    375          

   \                                 In section .text, align 2, keep-with-next
    376          uint32_t ble_lbs_send_accwho_state(ble_lbs_t * p_lbs)
    377          {
   \                     ble_lbs_send_accwho_state: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
    378              ble_gatts_hvx_params_t params;
    379              uint16_t len = sizeof(accwho);
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    380          
    381              memset(&params, 0, sizeof(params));
   \   0000000C   0x2110             MOVS     R1,#+16
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xAD01             ADD      R5,SP,#+4
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x.... 0x....      BL       __aeabi_memset
    382              params.type = BLE_GATT_HVX_NOTIFICATION;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x7088             STRB     R0,[R1, #+2]
    383              params.handle = p_lbs->accwho_char_handles.value_handle;
   \   0000001E   0x8D60             LDRH     R0,[R4, #+42]
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x8088             STRH     R0,[R1, #+4]
    384              params.p_data = &accwho;
   \   00000024   0x....             LDR      R0,??DataTable6_4
   \   00000026   0x9004             STR      R0,[SP, #+16]
    385              params.p_len = &len;
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x9003             STR      R0,[SP, #+12]
    386          
    387              return sd_ble_gatts_hvx(p_lbs->conn_handle, &params);
   \   0000002C   0xA901             ADD      R1,SP,#+4
   \   0000002E   0x345C             ADDS     R4,R4,#+92
   \   00000030   0x8820             LDRH     R0,[R4, #+0]
   \   00000032   0xDFA6             SVC      0xA6
   \   00000034   0xB005             ADD      SP,SP,#+20
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return
    388          }
    389          

   \                                 In section .text, align 2, keep-with-next
    390          uint32_t ble_lbs_send_magwho_state(ble_lbs_t * p_lbs)
    391          {
   \                     ble_lbs_send_magwho_state: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
    392              ble_gatts_hvx_params_t params;
    393              uint16_t len = sizeof(magwho);
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    394          
    395              memset(&params, 0, sizeof(params));
   \   0000000C   0x2110             MOVS     R1,#+16
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xAD01             ADD      R5,SP,#+4
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x.... 0x....      BL       __aeabi_memset
    396              params.type = BLE_GATT_HVX_NOTIFICATION;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x7088             STRB     R0,[R1, #+2]
    397              params.handle = p_lbs->magwho_char_handles.value_handle;
   \   0000001E   0x8C60             LDRH     R0,[R4, #+34]
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x8088             STRH     R0,[R1, #+4]
    398              params.p_data = &magwho;
   \   00000024   0x....             LDR      R0,??DataTable6_1
   \   00000026   0x9004             STR      R0,[SP, #+16]
    399              params.p_len = &len;
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x9003             STR      R0,[SP, #+12]
    400          
    401              return sd_ble_gatts_hvx(p_lbs->conn_handle, &params);
   \   0000002C   0xA901             ADD      R1,SP,#+4
   \   0000002E   0x345C             ADDS     R4,R4,#+92
   \   00000030   0x8820             LDRH     R0,[R4, #+0]
   \   00000032   0xDFA6             SVC      0xA6
   \   00000034   0xB005             ADD      SP,SP,#+20
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return
    402          }
    403          

   \                                 In section .bss, align 4
    404          static int32_t net_quad_state;
   \                     net_quad_state:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    405          uint32_t ble_lbs_send_quad_state(ble_lbs_t * p_lbs, int32_t quad_state)
    406          {
   \                     ble_lbs_send_quad_state: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    407              ble_gatts_hvx_params_t params;
    408              uint16_t len = sizeof(quad_state);
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x4669             MOV      R1,SP
   \   0000000C   0x8008             STRH     R0,[R1, #+0]
    409          
    410              memset(&params, 0, sizeof(params));
   \   0000000E   0x2110             MOVS     R1,#+16
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0xAE01             ADD      R6,SP,#+4
   \   00000014   0x0030             MOVS     R0,R6
   \   00000016   0x.... 0x....      BL       __aeabi_memset
    411              params.type = BLE_GATT_HVX_NOTIFICATION;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0xA901             ADD      R1,SP,#+4
   \   0000001E   0x7088             STRB     R0,[R1, #+2]
    412              params.handle = p_lbs->quad_char_handles.value_handle;
   \   00000020   0x8B60             LDRH     R0,[R4, #+26]
   \   00000022   0x4669             MOV      R1,SP
   \   00000024   0x8088             STRH     R0,[R1, #+4]
    413              net_quad_state = HTONL(quad_state);
   \   00000026   0x0628             LSLS     R0,R5,#+24
   \   00000028   0x21FF             MOVS     R1,#+255
   \   0000002A   0x0209             LSLS     R1,R1,#+8        ;; #+65280
   \   0000002C   0x4029             ANDS     R1,R1,R5
   \   0000002E   0x0209             LSLS     R1,R1,#+8
   \   00000030   0x4301             ORRS     R1,R1,R0
   \   00000032   0x0028             MOVS     R0,R5
   \   00000034   0x0A00             LSRS     R0,R0,#+8
   \   00000036   0x22FF             MOVS     R2,#+255
   \   00000038   0x0212             LSLS     R2,R2,#+8        ;; #+65280
   \   0000003A   0x4002             ANDS     R2,R2,R0
   \   0000003C   0x430A             ORRS     R2,R2,R1
   \   0000003E   0x0028             MOVS     R0,R5
   \   00000040   0x0E00             LSRS     R0,R0,#+24
   \   00000042   0x4310             ORRS     R0,R0,R2
   \   00000044   0x....             LDR      R1,??DataTable6_17
   \   00000046   0x6008             STR      R0,[R1, #+0]
    414              params.p_data = (void*)&net_quad_state;
   \   00000048   0x....             LDR      R0,??DataTable6_17
   \   0000004A   0x9004             STR      R0,[SP, #+16]
    415              params.p_len = &len;
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x9003             STR      R0,[SP, #+12]
    416          
    417              return sd_ble_gatts_hvx(p_lbs->conn_handle, &params);
   \   00000050   0xA901             ADD      R1,SP,#+4
   \   00000052   0x345C             ADDS     R4,R4,#+92
   \   00000054   0x8820             LDRH     R0,[R4, #+0]
   \   00000056   0xDFA6             SVC      0xA6
   \   00000058   0xB006             ADD      SP,SP,#+24
   \   0000005A   0xBD70             POP      {R4-R6,PC}       ;; return
    418          }
    419          

   \                                 In section .bss, align 4
    420          static int32_t net_pos_state;
   \                     net_pos_state:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    421          uint32_t ble_lbs_send_lock_pos_state(ble_lbs_t * p_lbs, int32_t lock_pos_state)
    422          {
   \                     ble_lbs_send_lock_pos_state: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    423              ble_gatts_hvx_params_t params;
    424              uint16_t len = sizeof(lock_pos_state);
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x4669             MOV      R1,SP
   \   0000000C   0x8008             STRH     R0,[R1, #+0]
    425          
    426              memset(&params, 0, sizeof(params));
   \   0000000E   0x2110             MOVS     R1,#+16
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0xAE01             ADD      R6,SP,#+4
   \   00000014   0x0030             MOVS     R0,R6
   \   00000016   0x.... 0x....      BL       __aeabi_memset
    427              params.type = BLE_GATT_HVX_NOTIFICATION;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0xA901             ADD      R1,SP,#+4
   \   0000001E   0x7088             STRB     R0,[R1, #+2]
    428              params.handle = p_lbs->lock_pos_char_handles.value_handle;
   \   00000020   0x2042             MOVS     R0,#+66
   \   00000022   0x5A20             LDRH     R0,[R4, R0]
   \   00000024   0x4669             MOV      R1,SP
   \   00000026   0x8088             STRH     R0,[R1, #+4]
    429              net_pos_state = HTONL(lock_pos_state);
   \   00000028   0x0628             LSLS     R0,R5,#+24
   \   0000002A   0x21FF             MOVS     R1,#+255
   \   0000002C   0x0209             LSLS     R1,R1,#+8        ;; #+65280
   \   0000002E   0x4029             ANDS     R1,R1,R5
   \   00000030   0x0209             LSLS     R1,R1,#+8
   \   00000032   0x4301             ORRS     R1,R1,R0
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0x0A00             LSRS     R0,R0,#+8
   \   00000038   0x22FF             MOVS     R2,#+255
   \   0000003A   0x0212             LSLS     R2,R2,#+8        ;; #+65280
   \   0000003C   0x4002             ANDS     R2,R2,R0
   \   0000003E   0x430A             ORRS     R2,R2,R1
   \   00000040   0x0028             MOVS     R0,R5
   \   00000042   0x0E00             LSRS     R0,R0,#+24
   \   00000044   0x4310             ORRS     R0,R0,R2
   \   00000046   0x....             LDR      R1,??DataTable6_18
   \   00000048   0x6008             STR      R0,[R1, #+0]
    430              params.p_data = (void*)&net_pos_state;
   \   0000004A   0x....             LDR      R0,??DataTable6_18
   \   0000004C   0x9004             STR      R0,[SP, #+16]
    431              params.p_len = &len;
   \   0000004E   0x4668             MOV      R0,SP
   \   00000050   0x9003             STR      R0,[SP, #+12]
    432          
    433              return sd_ble_gatts_hvx(p_lbs->conn_handle, &params);
   \   00000052   0xA901             ADD      R1,SP,#+4
   \   00000054   0x345C             ADDS     R4,R4,#+92
   \   00000056   0x8820             LDRH     R0,[R4, #+0]
   \   00000058   0xDFA6             SVC      0xA6
   \   0000005A   0xB006             ADD      SP,SP,#+24
   \   0000005C   0xBD70             POP      {R4-R6,PC}       ;; return
    434          }
    435          

   \                                 In section .text, align 2, keep-with-next
    436          uint32_t ble_lbs_send_voltage_state(ble_lbs_t * p_lbs, uint8_t voltage_state)
    437          {
   \                     ble_lbs_send_voltage_state: (+1)
   \   00000000   0xB532             PUSH     {R1,R4,R5,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    438              ble_gatts_hvx_params_t params;
    439              uint16_t len = sizeof(voltage_state);
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    440          
    441              memset(&params, 0, sizeof(params));
   \   0000000C   0x2110             MOVS     R1,#+16
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xAD01             ADD      R5,SP,#+4
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x.... 0x....      BL       __aeabi_memset
    442              params.type = BLE_GATT_HVX_NOTIFICATION;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x7088             STRB     R0,[R1, #+2]
    443              params.handle = p_lbs->voltage_char_handles.value_handle;
   \   0000001E   0x8E60             LDRH     R0,[R4, #+50]
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x8088             STRH     R0,[R1, #+4]
    444              params.p_data = &voltage_state;
   \   00000024   0xA806             ADD      R0,SP,#+24
   \   00000026   0x9004             STR      R0,[SP, #+16]
    445              params.p_len = &len;
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x9003             STR      R0,[SP, #+12]
    446          
    447              return sd_ble_gatts_hvx(p_lbs->conn_handle, &params);
   \   0000002C   0xA901             ADD      R1,SP,#+4
   \   0000002E   0x345C             ADDS     R4,R4,#+92
   \   00000030   0x8820             LDRH     R0,[R4, #+0]
   \   00000032   0xDFA6             SVC      0xA6
   \   00000034   0xB007             ADD      SP,SP,#+28
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return
    448          }
    449          

   \                                 In section .text, align 2, keep-with-next
    450          uint32_t ble_lbs_send_locksm_state(ble_lbs_t * p_lbs, uint8_t locksm_state)
    451          {
   \                     ble_lbs_send_locksm_state: (+1)
   \   00000000   0xB532             PUSH     {R1,R4,R5,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    452              ble_gatts_hvx_params_t params;
    453              uint16_t len = sizeof(locksm_state);
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    454          
    455              memset(&params, 0, sizeof(params));
   \   0000000C   0x2110             MOVS     R1,#+16
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xAD01             ADD      R5,SP,#+4
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x.... 0x....      BL       __aeabi_memset
    456              params.type = BLE_GATT_HVX_NOTIFICATION;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x7088             STRB     R0,[R1, #+2]
    457              params.handle = p_lbs->locksm_char_handles.value_handle;
   \   0000001E   0x8F60             LDRH     R0,[R4, #+58]
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x8088             STRH     R0,[R1, #+4]
    458              params.p_data = &locksm_state;
   \   00000024   0xA806             ADD      R0,SP,#+24
   \   00000026   0x9004             STR      R0,[SP, #+16]
    459              params.p_len = &len;
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x9003             STR      R0,[SP, #+12]
    460          
    461              return sd_ble_gatts_hvx(p_lbs->conn_handle, &params);
   \   0000002C   0xA901             ADD      R1,SP,#+4
   \   0000002E   0x345C             ADDS     R4,R4,#+92
   \   00000030   0x8820             LDRH     R0,[R4, #+0]
   \   00000032   0xDFA6             SVC      0xA6
   \   00000034   0xB007             ADD      SP,SP,#+28
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return
    462          }
    463          

   \                                 In section .text, align 2, keep-with-next
    464          uint32_t ble_lbs_send_lock_back_state(ble_lbs_t * p_lbs, int32_t lock_back_state)
    465          {
   \                     ble_lbs_send_lock_back_state: (+1)
   \   00000000   0xB532             PUSH     {R1,R4,R5,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    466              ble_gatts_hvx_params_t params;
    467              uint16_t len = sizeof(lock_back_state);
   \   00000006   0x2004             MOVS     R0,#+4
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    468          
    469              memset(&params, 0, sizeof(params));
   \   0000000C   0x2110             MOVS     R1,#+16
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xAD01             ADD      R5,SP,#+4
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x.... 0x....      BL       __aeabi_memset
    470              params.type = BLE_GATT_HVX_NOTIFICATION;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x7088             STRB     R0,[R1, #+2]
    471              params.handle = p_lbs->lock_back_char_handles.value_handle;
   \   0000001E   0x204A             MOVS     R0,#+74
   \   00000020   0x5A20             LDRH     R0,[R4, R0]
   \   00000022   0x4669             MOV      R1,SP
   \   00000024   0x8088             STRH     R0,[R1, #+4]
    472              params.p_data = (void*)&lock_back_state;
   \   00000026   0xA806             ADD      R0,SP,#+24
   \   00000028   0x9004             STR      R0,[SP, #+16]
    473              params.p_len = &len;
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x9003             STR      R0,[SP, #+12]
    474          
    475              return sd_ble_gatts_hvx(p_lbs->conn_handle, &params);
   \   0000002E   0xA901             ADD      R1,SP,#+4
   \   00000030   0x345C             ADDS     R4,R4,#+92
   \   00000032   0x8820             LDRH     R0,[R4, #+0]
   \   00000034   0xDFA6             SVC      0xA6
   \   00000036   0xB007             ADD      SP,SP,#+28
   \   00000038   0xBD30             POP      {R4,R5,PC}       ;; return
    476          }
    477          

   \                                 In section .text, align 2, keep-with-next
    478          uint32_t ble_lbs_send_lock_for_state(ble_lbs_t * p_lbs, int32_t lock_for_state)
    479          {
   \                     ble_lbs_send_lock_for_state: (+1)
   \   00000000   0xB532             PUSH     {R1,R4,R5,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    480              ble_gatts_hvx_params_t params;
    481              uint16_t len = sizeof(lock_for_state);
   \   00000006   0x2004             MOVS     R0,#+4
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    482          
    483              memset(&params, 0, sizeof(params));
   \   0000000C   0x2110             MOVS     R1,#+16
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xAD01             ADD      R5,SP,#+4
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x.... 0x....      BL       __aeabi_memset
    484              params.type = BLE_GATT_HVX_NOTIFICATION;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x7088             STRB     R0,[R1, #+2]
    485              params.handle = p_lbs->lock_for_char_handles.value_handle;
   \   0000001E   0x2052             MOVS     R0,#+82
   \   00000020   0x5A20             LDRH     R0,[R4, R0]
   \   00000022   0x4669             MOV      R1,SP
   \   00000024   0x8088             STRH     R0,[R1, #+4]
    486              params.p_data = (void*)&lock_for_state;
   \   00000026   0xA806             ADD      R0,SP,#+24
   \   00000028   0x9004             STR      R0,[SP, #+16]
    487              params.p_len = &len;
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x9003             STR      R0,[SP, #+12]
    488          
    489              return sd_ble_gatts_hvx(p_lbs->conn_handle, &params);
   \   0000002E   0xA901             ADD      R1,SP,#+4
   \   00000030   0x345C             ADDS     R4,R4,#+92
   \   00000032   0x8820             LDRH     R0,[R4, #+0]
   \   00000034   0xDFA6             SVC      0xA6
   \   00000036   0xB007             ADD      SP,SP,#+28
   \   00000038   0xBD30             POP      {R4,R5,PC}       ;; return
    490          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x00001523         DC32     0x1523

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     button_char_name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x00001524         DC32     0x1524

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     led_char_name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x00001525         DC32     0x1525

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     debug_char_name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x00001526         DC32     0x1526

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     quad_char_name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x00001527         DC32     0x1527

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     ble_int32_t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     magwho

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     magwho_char_name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x00001528         DC32     0x1528

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     accwho

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     accwho_char_name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x00001529         DC32     0x1529

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     voltage_char_name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x0000152A         DC32     0x152a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     locksm_char_name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x0000152B         DC32     0x152b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x........         DC32     lock_pos_char_name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x0000152C         DC32     0x152c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x........         DC32     lock_back_char_name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x0000152D         DC32     0x152d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x........         DC32     lock_for_char_name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x0000152E         DC32     0x152e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0x........         DC32     net_quad_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   0x........         DC32     net_pos_state

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x6F 0x6E          DC8 "on write: %u %u\012"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x75    
   \              0x20 0x25    
   \              0x75 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0xDD 0xEA          DC8 221, 234, 112, 106, 157, 83, 75, 187, 172, 11, 116, 186, 129, 158
   \              0x70 0x6A    
   \              0x9D 0x53    
   \              0x4B 0xBB    
   \              0xAC 0x0B    
   \              0x74 0xBA    
   \              0x81 0x9E    
   \   0000000E   0x7D 0x9C          DC8 125, 156

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      80   ble_char_add
        80   -> __aeabi_memset
      56   ble_lbs_init
        56   -> __aeabi_memcpy4
        56   -> ble_char_add
       8   ble_lbs_on_ble_evt
         8   -> on_connect
         8   -> on_disconnect
         8   -> on_write
      40   ble_lbs_on_button_change
        40   -> __aeabi_memset
      32   ble_lbs_send_accwho_state
        32   -> __aeabi_memset
      40   ble_lbs_send_debug_state
        40   -> __aeabi_memset
      40   ble_lbs_send_lock_back_state
        40   -> __aeabi_memset
      40   ble_lbs_send_lock_for_state
        40   -> __aeabi_memset
      40   ble_lbs_send_lock_pos_state
        40   -> __aeabi_memset
      40   ble_lbs_send_locksm_state
        40   -> __aeabi_memset
      32   ble_lbs_send_magwho_state
        32   -> __aeabi_memset
      40   ble_lbs_send_quad_state
        40   -> __aeabi_memset
      40   ble_lbs_send_voltage_state
        40   -> __aeabi_memset
       0   on_connect
       0   on_disconnect
      16   on_write
        16   -- Indirect call
        16   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      20  ?_0
      16  ?_1
       1  accwho
       8  accwho_char_name
     332  ble_char_add
       8  ble_int16_t
       8  ble_int32_t
       8  ble_int8_t
     560  ble_lbs_init
      38  ble_lbs_on_ble_evt
      56  ble_lbs_on_button_change
      56  ble_lbs_send_accwho_state
      56  ble_lbs_send_debug_state
      58  ble_lbs_send_lock_back_state
      58  ble_lbs_send_lock_for_state
      94  ble_lbs_send_lock_pos_state
      56  ble_lbs_send_locksm_state
      56  ble_lbs_send_magwho_state
      92  ble_lbs_send_quad_state
      56  ble_lbs_send_voltage_state
       8  ble_uint16_t
       8  ble_uint32_t
       8  ble_uint8_t
       8  button_char_name
       8  debug_char_name
       8  led_char_name
      12  lock_back_char_name
      12  lock_for_char_name
      12  lock_pos_char_name
       8  locksm_char_name
       1  magwho
       8  magwho_char_name
       4  net_pos_state
       4  net_quad_state
       8  on_connect
       8  on_disconnect
      48  on_write
       8  quad_char_name
       8  voltage_char_name

 
    10 bytes in section .bss
   148 bytes in section .data
    36 bytes in section .rodata
 1 760 bytes in section .text
 
 1 760 bytes of CODE  memory
    36 bytes of CONST memory
   158 bytes of DATA  memory

Errors: none
Warnings: 1
