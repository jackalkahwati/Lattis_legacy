###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        16/Apr/2015  21:19:51
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\VeloLabs\SkyLock Project\Source\skylock_softdevice.c
#    Command line =  
#        "C:\VeloLabs\SkyLock Project\Source\skylock_softdevice.c" -D NRF51 -D
#        BLE_STACK_SUPPORT_REQD -lCN "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\List\" -o "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\Obj\" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Normal.h" -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\include\" -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\include\ARMFiles\" -I
#        "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\drivers_nrf\hal\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\softdevice\s110\headers\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\toolchain\" -I
#        "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\softdevice\common\softdevice_handler\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\util\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\scheduler\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\timer\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\ble\common\" -Ol
#    List file    =  
#        C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\List\skylock_softdevice.lst
#    Object file  =  
#        C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\Obj\skylock_softdevice.o
#
###############################################################################

C:\VeloLabs\SkyLock Project\Source\skylock_softdevice.c
      1          /*
      2          ** Proprietary Rights Notice
      3          **
      4          ** This material contains the valuable properties and trade secrets of:
      5          **
      6          **    Velo Labs
      7          **    San Francisco, CA, USA
      8          **
      9          ** All rights reserved. No part of this work may be reproduced, distributed, or
     10          ** transmitted in any form or by any means, including photocopying, recording,
     11          ** or other electronic or mechanical methods, without the prior written permission
     12          ** of Velo Labs.
     13          **
     14          ** Copyright (c) 2015, Velo Labs
     15          ** Contains Confidential and Trade Secret Information
     16          */
     17          
     18          /*
     19          ** File Name:  skylock_softdevice.c
     20          **
     21          ** Purpose:    This is the skylock version of Nordic's softdevice_handler C file. The Nordic version is a generic, one size
     22          **             fits all version while this version is taylored specifically for Skylocks needs.
     23          */
     24          
     25          #include "master.h"
     26          #include "stdio.h"
     27          #include "hardware.h"
     28          #include "ble_gatt.h"
     29          #include "app_util.h"
     30          #include "nrf_soc.h"
     31          #include "nrf_sdm.h"
     32          #include "ble_skylock.h"
     33          
     34          /**********************************************************************************************************************
     35          ** Global structures required by the Soft Device are listed next. Please describe everything that we know            **
     36          ** about these elements so as to help others understand what is going on.                                            **
     37          **                                                                                                                   **
     38          ** When possible keep the same name as Nordic was using to possibly help reduce any confusion. Try to list where     **
     39          ** Noridic was using or defining the value though.                                                                   **
     40          **********************************************************************************************************************/
     41          
     42          /*
     43          ** Need a buffer to fetch events from the Soft Device. Nordic reserved a single global buffer for this so we will keep
     44          ** doing that. This buffer is meant to hold some structures and things so it should be aligned on a 4-byte interval.
     45          */
     46          #define BLE_EVT_BUFFER_SIZE            (sizeof(ble_evt_t) + (GATT_MTU_SIZE_DEFAULT))
     47          #define BLE_EVT_BUFFER_PTR             ((uint8_t *) BLE_EVT_BUFFER)

   \                                 In section .bss, align 4
     48          uint32_t    BLE_EVT_BUFFER[CEIL_DIV(BLE_EVT_BUFFER_SIZE, sizeof(uint32_t))];
   \                     BLE_EVT_BUFFER:
   \   00000000                      DS8 80
     49          
     50          /*
     51          ** Flag that is set anytime the Soft Device informs us there is event data to pull. This will wake us up and at task level
     52          ** we will pull the event data.
     53          */

   \                                 In section .bss, align 1
     54          bool        SKY_sd_event_waiting;
   \                     SKY_sd_event_waiting:
   \   00000000                      DS8 1
     55          
     56          
     57          /*
     58          ** This function should be called after every soft device function is used if an error is not tolerated. Basically
     59          ** most soft device functions should never have an error if used properly. If we hit an error that then means
     60          ** something bad has happened. So in that case, a reboot is probably the best option here.
     61          **
     62          ** Nordic used several code macros for this. As noted in other files I don't like code macros. A simple function
     63          ** is much more efficient. Noridic had several error macros that eventually led to a function. So for Skylock
     64          ** we will just have a function that takes care of all this.
     65          **
     66          ** This function ultimately will reboot the device if there is an error. But prior to that, this would be the
     67          ** place to add other logic. May want to dump information out the serial port first. May want to record some
     68          ** information in RAM or NV memory possibly to help with debugging. For normal release code, a reboot is probably
     69          ** about all we need.
     70          */

   \                                 In section .text, align 2, keep-with-next
     71          void
     72          SKY_check_error (uint32_t code)
     73          {
   \                     SKY_check_error: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     74             if (code != NRF_SUCCESS)
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD004             BEQ      ??SKY_check_error_0
     75                {
     76                printf("SKY_check_error called\n");
   \   00000006   0x....             LDR      R0,??DataTable4
   \   00000008   0x.... 0x....      BL       printf
     77                ForceRestart ();
   \   0000000C   0x.... 0x....      BL       ForceRestart
     78                }
     79          }
   \                     ??SKY_check_error_0: (+1)
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
     80          
     81          /*
     82          ** This is a callback from the Soft Device if it hits a critical failure. The only exit from this condition
     83          ** is a reset. This function is passed to the Soft Device when the soft device is first enabled.
     84          **
     85          ** pc         The value of the program counter when the ASSERT call failed.
     86          ** line_num   Line number of the failing ASSERT call.
     87          ** file_name  File name of the failing ASSERT call.
     88          */

   \                                 In section .text, align 2, keep-with-next
     89          void
     90          SKY_softdevice_assertion_handler (uint32_t pc, uint16_t line_num, const uint8_t * file_name)
     91          {
   \                     SKY_softdevice_assertion_handler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0014             MOVS     R4,R2
     92             printf("Soft device assert: %s %u PC: %u\n", file_name, line_num, pc);
   \   00000004   0x0003             MOVS     R3,R0
   \   00000006   0xB289             UXTH     R1,R1
   \   00000008   0x000A             MOVS     R2,R1
   \   0000000A   0x0021             MOVS     R1,R4
   \   0000000C   0x....             LDR      R0,??DataTable4_1
   \   0000000E   0x.... 0x....      BL       printf
     93             ForceRestart ();
   \   00000012   0x.... 0x....      BL       ForceRestart
     94          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
     95          
     96          /*
     97          ** This function is the Skylock version of the Nordic function that will enable the soft device. Once
     98          ** this function is called the soft device is running and basically it is now in charge of many of the
     99          ** CPU features. THe ASM file with the interrupt vectors is a quick cheat sheet of what the soft device
    100          ** controls.
    101          */

   \                                 In section .text, align 2, keep-with-next
    102          void
    103          SKY_softdevice_handler_init (void)
    104          {
   \                     SKY_softdevice_handler_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    105             uint32_t err_code;
    106          
    107                /* Initialize SoftDevice */
    108             err_code = sd_softdevice_enable (NRF_CLOCK_LFCLKSRC_XTAL_20_PPM, SKY_softdevice_assertion_handler);
   \   00000002   0x....             LDR      R1,??DataTable4_2
   \   00000004   0x2008             MOVS     R0,#+8
   \   00000006   0xDF10             SVC      0x10
    109             SKY_check_error (err_code);
   \   00000008   0x.... 0x....      BL       SKY_check_error
    110          
    111                /* Enable BLE event interrupt (interrupt priority has already been set by the stack) */
    112             sd_nvic_EnableIRQ (SWI2_IRQn);
   \   0000000C   0x2016             MOVS     R0,#+22
   \   0000000E   0xDF26             SVC      0x26
    113          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
    114          
    115          /*
    116          ** Call this at task level to check if there are events from the Soft Device to process and if there
    117          ** are then go get them and process them.
    118          */

   \                                 In section .text, align 2, keep-with-next
    119          void
    120          SKY_softdevice_events_execute(void)
    121          {
   \                     SKY_softdevice_events_execute: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    122             bool no_more_soc_evts = false;
   \   00000004   0x2400             MOVS     R4,#+0
    123             bool no_more_ble_evts = false;
   \   00000006   0x2500             MOVS     R5,#+0
    124          
    125             if (SKY_sd_event_waiting)
   \   00000008   0x....             LDR      R0,??DataTable4_3
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD026             BEQ      ??SKY_softdevice_events_execute_0
    126                {
    127                for (;;)
    128                   {
    129                   uint32_t err_code;
    130          
    131                   if (!no_more_soc_evts)
   \                     ??SKY_softdevice_events_execute_1: (+1)
   \   00000010   0xB2E4             UXTB     R4,R4
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD10A             BNE      ??SKY_softdevice_events_execute_2
    132                      {
    133                      uint32_t evt_id;
    134          
    135                         // Pull event from SOC.
    136                      err_code = sd_evt_get(&evt_id);
   \   00000016   0xA801             ADD      R0,SP,#+4
   \   00000018   0xDF51             SVC      0x51
    137          
    138                      if (err_code == NRF_ERROR_NOT_FOUND)
   \   0000001A   0x2805             CMP      R0,#+5
   \   0000001C   0xD101             BNE      ??SKY_softdevice_events_execute_3
    139                         no_more_soc_evts = true;
   \   0000001E   0x2401             MOVS     R4,#+1
   \   00000020   0xE004             B        ??SKY_softdevice_events_execute_2
    140          
    141                      else
    142                         {
    143                         SKY_check_error (err_code);
   \                     ??SKY_softdevice_events_execute_3: (+1)
   \   00000022   0x.... 0x....      BL       SKY_check_error
    144          
    145                            // Call application's SOC event handler.
    146                         sys_evt_dispatch(evt_id);
   \   00000026   0x9801             LDR      R0,[SP, #+4]
   \   00000028   0x.... 0x....      BL       sys_evt_dispatch
    147                         }
    148                      }
    149          
    150                      // Fetch BLE Events.
    151                   if (!no_more_ble_evts)
   \                     ??SKY_softdevice_events_execute_2: (+1)
   \   0000002C   0xB2ED             UXTB     R5,R5
   \   0000002E   0x2D00             CMP      R5,#+0
   \   00000030   0xD10E             BNE      ??SKY_softdevice_events_execute_4
    152                      {
    153                         // Pull event from stack
    154                      uint16_t evt_len = BLE_EVT_BUFFER_SIZE;
   \   00000032   0x204F             MOVS     R0,#+79
   \   00000034   0x4669             MOV      R1,SP
   \   00000036   0x8008             STRH     R0,[R1, #+0]
    155          
    156                      err_code = sd_ble_evt_get(BLE_EVT_BUFFER_PTR, &evt_len);
   \   00000038   0x4669             MOV      R1,SP
   \   0000003A   0x....             LDR      R0,??DataTable4_4
   \   0000003C   0xDF61             SVC      0x61
    157          
    158                      if (err_code == NRF_ERROR_NOT_FOUND)
   \   0000003E   0x2805             CMP      R0,#+5
   \   00000040   0xD101             BNE      ??SKY_softdevice_events_execute_5
    159                         no_more_ble_evts = true;
   \   00000042   0x2501             MOVS     R5,#+1
   \   00000044   0xE004             B        ??SKY_softdevice_events_execute_4
    160          
    161                      else
    162                         {
    163                         SKY_check_error (err_code);
   \                     ??SKY_softdevice_events_execute_5: (+1)
   \   00000046   0x.... 0x....      BL       SKY_check_error
    164          
    165                            // Call application's BLE stack event handler.
    166                         ble_evt_dispatch((ble_evt_t *)BLE_EVT_BUFFER_PTR);
   \   0000004A   0x....             LDR      R0,??DataTable4_4
   \   0000004C   0x.... 0x....      BL       ble_evt_dispatch
    167                         }
    168                      }
    169          
    170                   if (no_more_soc_evts && no_more_ble_evts)
   \                     ??SKY_softdevice_events_execute_4: (+1)
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0xB2C0             UXTB     R0,R0
   \   00000054   0x4228             TST      R0,R5
   \   00000056   0xD0DB             BEQ      ??SKY_softdevice_events_execute_1
    171                      break;
    172                   }
    173          
    174                SKY_sd_event_waiting = false;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x....             LDR      R1,??DataTable4_3
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
    175                }
    176          }
   \                     ??SKY_softdevice_events_execute_0: (+1)
   \   0000005E   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    177          
    178          /*
    179          ** This is how the soft device lets us know there is an event ready for us to go pull.
    180          ** Since this is a handler, we will set a flag to indicate there is something to pull and
    181          ** then go pull the event at task level.
    182          */

   \                                 In section .text, align 2, keep-with-next
    183          void
    184          SWI2_IRQHandler (void)
    185          {
    186             SKY_sd_event_waiting = true;
   \                     SWI2_IRQHandler: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR      R1,??DataTable4_3
   \   00000004   0x7008             STRB     R0,[R1, #+0]
    187          }
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     SKY_softdevice_assertion_handler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     SKY_sd_event_waiting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     BLE_EVT_BUFFER

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x53 0x4B          DC8 "SKY_check_error called\012"
   \              0x59 0x5F    
   \              0x63 0x68    
   \              0x65 0x63    
   \              0x6B 0x5F    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x63 0x61    
   \              0x6C 0x6C    
   \              0x65 0x64    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x53 0x6F          DC8 "Soft device assert: %s %u PC: %u\012"
   \              0x66 0x74    
   \              0x20 0x64    
   \              0x65 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x72 0x74    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x20 0x25    
   \              0x75 0x20    
   \              0x50 0x43    
   \              0x3A 0x20    
   \              0x25 0x75    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0
    188          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SKY_check_error
         8   -> ForceRestart
         8   -> printf
       8   SKY_softdevice_assertion_handler
         8   -> ForceRestart
         8   -> printf
      24   SKY_softdevice_events_execute
        24   -> SKY_check_error
        24   -> ble_evt_dispatch
        24   -> sys_evt_dispatch
       8   SKY_softdevice_handler_init
         8   -> SKY_check_error
       0   SWI2_IRQHandler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
      24  ?_0
      36  ?_1
      80  BLE_EVT_BUFFER
      18  SKY_check_error
       1  SKY_sd_event_waiting
      24  SKY_softdevice_assertion_handler
      96  SKY_softdevice_events_execute
      18  SKY_softdevice_handler_init
       8  SWI2_IRQHandler

 
  81 bytes in section .bss
  60 bytes in section .rodata
 184 bytes in section .text
 
 184 bytes of CODE  memory
  60 bytes of CONST memory
  81 bytes of DATA  memory

Errors: none
Warnings: none
