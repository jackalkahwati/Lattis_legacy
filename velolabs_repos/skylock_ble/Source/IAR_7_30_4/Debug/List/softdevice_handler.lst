###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        26/Mar/2015  09:42:41
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\VeloLabs\SkyLock
#        Project\SDK_7_2_0\components\softdevice\common\softdevice_handler\softdevice_handler.c
#    Command line =  
#        "C:\VeloLabs\SkyLock
#        Project\SDK_7_2_0\components\softdevice\common\softdevice_handler\softdevice_handler.c"
#        -D NRF51 -D BLE_STACK_SUPPORT_REQD -lCN "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\Debug\List\" -o "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\Debug\Obj\" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Normal.h" -I "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\include\" -I "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\include\ARMFiles\" -I "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\drivers_nrf\hal\" -I
#        "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\softdevice\s110\headers\"
#        -I "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\toolchain\" -I
#        "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\softdevice\common\softdevice_handler\"
#        -I "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\libraries\util\" -I
#        "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\libraries\scheduler\" -I
#        "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\libraries\timer\" -I
#        "C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\..\SDK_7_2_0\components\ble\common\" -Ol
#    List file    =  
#        C:\VeloLabs\SkyLock
#        Project\IAR_7_30_4\Debug\List\softdevice_handler.lst
#    Object file  =  
#        C:\VeloLabs\SkyLock Project\IAR_7_30_4\Debug\Obj\softdevice_handler.o
#
###############################################################################

C:\VeloLabs\SkyLock Project\SDK_7_2_0\components\softdevice\common\softdevice_handler\softdevice_handler.c
      1          /* Copyright (c) 2012 Nordic Semiconductor. All Rights Reserved.
      2           *
      3           * The information contained herein is property of Nordic Semiconductor ASA.
      4           * Terms and conditions of usage are described in detail in NORDIC
      5           * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
      6           *
      7           * Licensees are granted free, non-transferable use of the information. NO
      8           * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
      9           * the file.
     10           *
     11           */
     12          
     13          #include "softdevice_handler.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp bool is_word_aligned(void *)
   \                     is_word_aligned: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0780             LSLS     R0,R0,#+30
   \   00000004   0xD101             BNE      ??is_word_aligned_0
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0xE000             B        ??is_word_aligned_1
   \                     ??is_word_aligned_0: (+1)
   \   0000000A   0x2000             MOVS     R0,#+0
   \                     ??is_word_aligned_1: (+1)
   \   0000000C   0xB2C0             UXTB     R0,R0
   \   0000000E   0xBD00             POP      {PC}             ;; return
     14          #include <stdlib.h>
     15          #include "nordic_common.h"
     16          #include "app_error.h"
     17          #include "app_util.h"
     18          #include "nrf_assert.h"
     19          #include "nrf_soc.h"
     20          
     21          #if defined(ANT_STACK_SUPPORT_REQD) && defined(BLE_STACK_SUPPORT_REQD)
     22              #include "ant_interface.h"
     23          #elif defined(ANT_STACK_SUPPORT_REQD) 
     24              #include "ant_interface.h"
     25          #elif defined(BLE_STACK_SUPPORT_REQD)
     26              #include "ble.h"
     27          #endif
     28          
     29          

   \                                 In section .bss, align 4
     30          static softdevice_evt_schedule_func_t m_evt_schedule_func;              /**< Pointer to function for propagating SoftDevice events to the scheduler. */
   \                     m_evt_schedule_func:
   \   00000000                      DS8 4
     31          

   \                                 In section .bss, align 1
     32          static volatile bool                  m_softdevice_enabled = false;     /**< Variable to indicate whether the SoftDevice is enabled. */
   \                     m_softdevice_enabled:
   \   00000000                      DS8 1
     33          
     34          #ifdef BLE_STACK_SUPPORT_REQD
     35          // The following three definitions is needed only if BLE events are needed to be pulled from the stack.

   \                                 In section .bss, align 4
     36          static uint8_t                      * mp_ble_evt_buffer;                /**< Buffer for receiving BLE events from the SoftDevice. */
   \                     mp_ble_evt_buffer:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
     37          static uint16_t                       m_ble_evt_buffer_size;            /**< Size of BLE event buffer. */
   \                     m_ble_evt_buffer_size:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     38          static ble_evt_handler_t              m_ble_evt_handler;                /**< Application event handler for handling BLE events. */
   \                     m_ble_evt_handler:
   \   00000000                      DS8 4
     39          #endif
     40          
     41          #ifdef ANT_STACK_SUPPORT_REQD
     42          // The following two definition is needed only if ANT events are needed to be pulled from the stack.
     43          static ant_evt_t                      m_ant_evt_buffer;                 /**< Buffer for receiving ANT events from the SoftDevice. */
     44          static ant_evt_handler_t              m_ant_evt_handler;                /**< Application event handler for handling ANT events.  */
     45          #endif
     46          

   \                                 In section .bss, align 4
     47          static sys_evt_handler_t              m_sys_evt_handler;                /**< Application event handler for handling System (SOC) events.  */
   \                     m_sys_evt_handler:
   \   00000000                      DS8 4
     48          
     49          
     50          /**@brief       Callback function for asserts in the SoftDevice.
     51           *
     52           * @details     A pointer to this function will be passed to the SoftDevice. This function will be
     53           *              called if an ASSERT statement in the SoftDevice fails.
     54           *
     55           * @param[in]   pc         The value of the program counter when the ASSERT call failed.
     56           * @param[in]   line_num   Line number of the failing ASSERT call.
     57           * @param[in]   file_name  File name of the failing ASSERT call.
     58           */

   \                                 In section .text, align 2, keep-with-next
     59          void softdevice_assertion_handler(uint32_t pc, uint16_t line_num, const uint8_t * file_name)
     60          {
   \                     softdevice_assertion_handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0008             MOVS     R0,R1
   \   00000004   0x0011             MOVS     R1,R2
     61              UNUSED_PARAMETER(pc);
     62              assert_nrf_callback(line_num, file_name);
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x.... 0x....      BL       assert_nrf_callback
     63          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
     64          
     65          

   \                                 In section .text, align 2, keep-with-next
     66          void intern_softdevice_events_execute(void)
     67          {
   \                     intern_softdevice_events_execute: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     68              if (!m_softdevice_enabled)
   \   00000004   0x....             LDR      R0,??DataTable5
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD042             BEQ      ??intern_softdevice_events_execute_0
     69              {
     70                  // SoftDevice not enabled. This can be possible if the SoftDevice was enabled by the
     71                  // application without using this module's API (i.e softdevice_handler_init)
     72          
     73                  return;
     74              }
     75          
     76              bool no_more_soc_evts = (m_sys_evt_handler == NULL);
   \                     ??intern_softdevice_events_execute_1: (+1)
   \   0000000C   0x....             LDR      R0,??DataTable5_1
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD101             BNE      ??intern_softdevice_events_execute_2
   \   00000014   0x2501             MOVS     R5,#+1
   \   00000016   0xE000             B        ??intern_softdevice_events_execute_3
   \                     ??intern_softdevice_events_execute_2: (+1)
   \   00000018   0x2500             MOVS     R5,#+0
     77          #ifdef BLE_STACK_SUPPORT_REQD
     78              bool no_more_ble_evts = (m_ble_evt_handler == NULL);
   \                     ??intern_softdevice_events_execute_3: (+1)
   \   0000001A   0x....             LDR      R0,??DataTable5_2
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD101             BNE      ??intern_softdevice_events_execute_4
   \   00000022   0x2401             MOVS     R4,#+1
   \   00000024   0xE000             B        ??intern_softdevice_events_execute_5
   \                     ??intern_softdevice_events_execute_4: (+1)
   \   00000026   0x2400             MOVS     R4,#+0
     79          #endif
     80          #ifdef ANT_STACK_SUPPORT_REQD
     81              bool no_more_ant_evts = (m_ant_evt_handler == NULL);
     82          #endif
     83          
     84              for (;;)
     85              {
     86                  uint32_t err_code;
     87          
     88                  if (!no_more_soc_evts)
   \                     ??intern_softdevice_events_execute_5: (+1)
   \   00000028   0xB2ED             UXTB     R5,R5
   \   0000002A   0x2D00             CMP      R5,#+0
   \   0000002C   0xD110             BNE      ??intern_softdevice_events_execute_6
     89                  {
     90                      uint32_t evt_id;
     91          
     92                      // Pull event from SOC.
     93                      err_code = sd_evt_get(&evt_id);
   \   0000002E   0xA801             ADD      R0,SP,#+4
   \   00000030   0xDF51             SVC      0x51
     94                      
     95                      if (err_code == NRF_ERROR_NOT_FOUND)
   \   00000032   0x2805             CMP      R0,#+5
   \   00000034   0xD101             BNE      ??intern_softdevice_events_execute_7
     96                      {
     97                          no_more_soc_evts = true;
   \   00000036   0x2501             MOVS     R5,#+1
   \   00000038   0xE00A             B        ??intern_softdevice_events_execute_6
     98                      }
     99                      else if (err_code != NRF_SUCCESS)
   \                     ??intern_softdevice_events_execute_7: (+1)
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD004             BEQ      ??intern_softdevice_events_execute_8
    100                      {
    101                          APP_ERROR_HANDLER(err_code);
   \   0000003E   0x2200             MOVS     R2,#+0
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0x.... 0x....      BL       app_error_handler
   \   00000046   0xE003             B        ??intern_softdevice_events_execute_6
    102                      }
    103                      else
    104                      {
    105                          // Call application's SOC event handler.
    106                          m_sys_evt_handler(evt_id);
   \                     ??intern_softdevice_events_execute_8: (+1)
   \   00000048   0x9801             LDR      R0,[SP, #+4]
   \   0000004A   0x....             LDR      R1,??DataTable5_1
   \   0000004C   0x6809             LDR      R1,[R1, #+0]
   \   0000004E   0x4788             BLX      R1
    107                      }
    108                  }
    109          
    110          #ifdef BLE_STACK_SUPPORT_REQD
    111                  // Fetch BLE Events.
    112                  if (!no_more_ble_evts)
   \                     ??intern_softdevice_events_execute_6: (+1)
   \   00000050   0xB2E4             UXTB     R4,R4
   \   00000052   0x2C00             CMP      R4,#+0
   \   00000054   0xD117             BNE      ??intern_softdevice_events_execute_9
    113                  {
    114                      // Pull event from stack
    115                      uint16_t evt_len = m_ble_evt_buffer_size;
   \   00000056   0x....             LDR      R0,??DataTable5_3
   \   00000058   0x8800             LDRH     R0,[R0, #+0]
   \   0000005A   0x4669             MOV      R1,SP
   \   0000005C   0x8008             STRH     R0,[R1, #+0]
    116          
    117                      err_code = sd_ble_evt_get(mp_ble_evt_buffer, &evt_len);
   \   0000005E   0x4669             MOV      R1,SP
   \   00000060   0x....             LDR      R0,??DataTable5_4
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xDF61             SVC      0x61
    118                      if (err_code == NRF_ERROR_NOT_FOUND)
   \   00000066   0x2805             CMP      R0,#+5
   \   00000068   0xD101             BNE      ??intern_softdevice_events_execute_10
    119                      {
    120                          no_more_ble_evts = true;
   \   0000006A   0x2401             MOVS     R4,#+1
   \   0000006C   0xE00B             B        ??intern_softdevice_events_execute_9
    121                      }
    122                      else if (err_code != NRF_SUCCESS)
   \                     ??intern_softdevice_events_execute_10: (+1)
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD004             BEQ      ??intern_softdevice_events_execute_11
    123                      {
    124                          APP_ERROR_HANDLER(err_code);
   \   00000072   0x2200             MOVS     R2,#+0
   \   00000074   0x2100             MOVS     R1,#+0
   \   00000076   0x.... 0x....      BL       app_error_handler
   \   0000007A   0xE004             B        ??intern_softdevice_events_execute_9
    125                      }
    126                      else
    127                      {
    128                          // Call application's BLE stack event handler.
    129                          m_ble_evt_handler((ble_evt_t *)mp_ble_evt_buffer);
   \                     ??intern_softdevice_events_execute_11: (+1)
   \   0000007C   0x....             LDR      R0,??DataTable5_4
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0x....             LDR      R1,??DataTable5_2
   \   00000082   0x6809             LDR      R1,[R1, #+0]
   \   00000084   0x4788             BLX      R1
    130                      }
    131                  }
    132          #endif
    133          
    134          #ifdef ANT_STACK_SUPPORT_REQD
    135                  // Fetch ANT Events.
    136                  if (!no_more_ant_evts)
    137                  {
    138                      // Pull event from stack
    139                      err_code = sd_ant_event_get(&m_ant_evt_buffer.channel,
    140                                                  &m_ant_evt_buffer.event,
    141                                                  m_ant_evt_buffer.evt_buffer);
    142                      if (err_code == NRF_ERROR_NOT_FOUND)
    143                      {
    144                          no_more_ant_evts = true;
    145                      }
    146                      else if (err_code != NRF_SUCCESS)
    147                      {
    148                          APP_ERROR_HANDLER(err_code);
    149                      }
    150                      else
    151                      {
    152                          // Call application's ANT stack event handler.
    153                          m_ant_evt_handler(&m_ant_evt_buffer);
    154                      }
    155                  }
    156          #endif
    157          
    158                  if (no_more_soc_evts)
   \                     ??intern_softdevice_events_execute_9: (+1)
   \   00000086   0xB2ED             UXTB     R5,R5
   \   00000088   0x2D00             CMP      R5,#+0
   \   0000008A   0xD0CD             BEQ      ??intern_softdevice_events_execute_5
    159                  {
    160                      // There are no remaining System (SOC) events to be fetched from the SoftDevice.
    161          #if defined(ANT_STACK_SUPPORT_REQD) && defined(BLE_STACK_SUPPORT_REQD)
    162                      // Check if there are any remaining BLE and ANT events.
    163                      if (no_more_ble_evts && no_more_ant_evts)
    164                      {
    165                          break;
    166                      }
    167          #elif defined(BLE_STACK_SUPPORT_REQD)
    168                      // Check if there are any remaining BLE events.
    169                      if (no_more_ble_evts)
   \   0000008C   0xB2E4             UXTB     R4,R4
   \   0000008E   0x2C00             CMP      R4,#+0
   \   00000090   0xD0CA             BEQ      ??intern_softdevice_events_execute_5
    170                      {
    171                          break;
    172                      }
    173          #elif defined(ANT_STACK_SUPPORT_REQD)
    174                      // Check if there are any remaining ANT events.
    175                      if (no_more_ant_evts)
    176                      {
    177                          break;
    178                      }
    179          #else
    180                      // No need to check for BLE or ANT events since there is no support for BLE and ANT
    181                      // required.
    182                      break;
    183          #endif
    184                  }
    185              }
    186          }
   \                     ??intern_softdevice_events_execute_0: (+1)
   \   00000092   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    187          
    188          

   \                                 In section .text, align 2, keep-with-next
    189          uint32_t softdevice_handler_init(nrf_clock_lfclksrc_t           clock_source,
    190                                           void *                         p_ble_evt_buffer,
    191                                           uint16_t                       ble_evt_buffer_size,
    192                                           softdevice_evt_schedule_func_t evt_schedule_func)
    193          {
   \                     softdevice_handler_init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0007             MOVS     R7,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001E             MOVS     R6,R3
    194              uint32_t err_code;
    195          
    196              // Save configuration.
    197          #if defined (BLE_STACK_SUPPORT_REQD)
    198              // Check that buffer is not NULL.
    199              if (p_ble_evt_buffer == NULL)
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD101             BNE      ??softdevice_handler_init_0
    200              {
    201                  return NRF_ERROR_INVALID_PARAM;
   \   0000000E   0x2007             MOVS     R0,#+7
   \   00000010   0xE016             B        ??softdevice_handler_init_1
    202              }
    203              
    204              // Check that buffer is correctly aligned.
    205              if (!is_word_aligned(p_ble_evt_buffer))
   \                     ??softdevice_handler_init_0: (+1)
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       is_word_aligned
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE      ??softdevice_handler_init_2
    206              {
    207                  return NRF_ERROR_INVALID_PARAM;
   \   0000001C   0x2007             MOVS     R0,#+7
   \   0000001E   0xE00F             B        ??softdevice_handler_init_1
    208              }
    209          
    210              mp_ble_evt_buffer     = (uint8_t *)p_ble_evt_buffer;
   \                     ??softdevice_handler_init_2: (+1)
   \   00000020   0x....             LDR      R0,??DataTable5_4
   \   00000022   0x6004             STR      R4,[R0, #+0]
    211              m_ble_evt_buffer_size = ble_evt_buffer_size;
   \   00000024   0x....             LDR      R0,??DataTable5_3
   \   00000026   0x8005             STRH     R5,[R0, #+0]
    212          #else
    213              // The variables p_ble_evt_buffer and ble_evt_buffer_size is not needed if BLE Stack support
    214              // is not required.
    215              UNUSED_PARAMETER(p_ble_evt_buffer);
    216              UNUSED_PARAMETER(ble_evt_buffer_size);
    217          #endif
    218          
    219              m_evt_schedule_func = evt_schedule_func;
   \   00000028   0x....             LDR      R0,??DataTable5_5
   \   0000002A   0x6006             STR      R6,[R0, #+0]
    220          
    221              // Initialize SoftDevice.
    222              err_code = sd_softdevice_enable(clock_source, softdevice_assertion_handler);
   \   0000002C   0x....             LDR      R1,??DataTable5_6
   \   0000002E   0x0038             MOVS     R0,R7
   \   00000030   0xDF10             SVC      0x10
    223              if (err_code != NRF_SUCCESS)
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD104             BNE      ??softdevice_handler_init_1
    224              {
    225                  return err_code;
    226              }
    227          
    228              m_softdevice_enabled = true;
   \                     ??softdevice_handler_init_3: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x....             LDR      R1,??DataTable5
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
    229          
    230              // Enable BLE event interrupt (interrupt priority has already been set by the stack).
    231              return sd_nvic_EnableIRQ(SWI2_IRQn);
   \   0000003C   0x2016             MOVS     R0,#+22
   \   0000003E   0xDF26             SVC      0x26
   \                     ??softdevice_handler_init_1: (+1)
   \   00000040   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    232          }
    233          
    234          

   \                                 In section .text, align 2, keep-with-next
    235          uint32_t softdevice_handler_sd_disable(void)
    236          {
   \                     softdevice_handler_sd_disable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    237              uint32_t err_code = sd_softdevice_disable();
   \   00000002   0xDF11             SVC      0x11
    238           
    239              m_softdevice_enabled = !(err_code == NRF_SUCCESS);
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD001             BEQ      ??softdevice_handler_sd_disable_0
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0xE000             B        ??softdevice_handler_sd_disable_1
   \                     ??softdevice_handler_sd_disable_0: (+1)
   \   0000000C   0x2100             MOVS     R1,#+0
   \                     ??softdevice_handler_sd_disable_1: (+1)
   \   0000000E   0x....             LDR      R2,??DataTable5
   \   00000010   0x7011             STRB     R1,[R2, #+0]
    240          
    241              return err_code;
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
    242          }
    243          
    244          
    245          #ifdef BLE_STACK_SUPPORT_REQD

   \                                 In section .text, align 2, keep-with-next
    246          uint32_t softdevice_ble_evt_handler_set(ble_evt_handler_t ble_evt_handler)
    247          {
   \                     softdevice_ble_evt_handler_set: (+1)
   \   00000000   0xB500             PUSH     {LR}
    248              if (ble_evt_handler == NULL)
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD101             BNE      ??softdevice_ble_evt_handler_set_0
    249              {
    250                  return NRF_ERROR_NULL;
   \   00000008   0x200E             MOVS     R0,#+14
   \   0000000A   0xE002             B        ??softdevice_ble_evt_handler_set_1
    251              }
    252          
    253              m_ble_evt_handler = ble_evt_handler;
   \                     ??softdevice_ble_evt_handler_set_0: (+1)
   \   0000000C   0x....             LDR      R1,??DataTable5_2
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    254          
    255              return NRF_SUCCESS;
   \   00000010   0x2000             MOVS     R0,#+0
   \                     ??softdevice_ble_evt_handler_set_1: (+1)
   \   00000012   0xBD00             POP      {PC}             ;; return
    256          }
    257          #endif
    258          
    259          
    260          #ifdef ANT_STACK_SUPPORT_REQD
    261          uint32_t softdevice_ant_evt_handler_set(ant_evt_handler_t ant_evt_handler)
    262          {
    263              if (ant_evt_handler == NULL)
    264              {
    265                  return NRF_ERROR_NULL;
    266              }
    267          
    268              m_ant_evt_handler = ant_evt_handler;
    269          
    270              return NRF_SUCCESS;
    271          }
    272          #endif
    273          
    274          

   \                                 In section .text, align 2, keep-with-next
    275          uint32_t softdevice_sys_evt_handler_set(sys_evt_handler_t sys_evt_handler)
    276          {
   \                     softdevice_sys_evt_handler_set: (+1)
   \   00000000   0xB500             PUSH     {LR}
    277              if (sys_evt_handler == NULL)
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD101             BNE      ??softdevice_sys_evt_handler_set_0
    278              {
    279                  return NRF_ERROR_NULL;
   \   00000008   0x200E             MOVS     R0,#+14
   \   0000000A   0xE002             B        ??softdevice_sys_evt_handler_set_1
    280              }
    281          
    282              m_sys_evt_handler = sys_evt_handler;
   \                     ??softdevice_sys_evt_handler_set_0: (+1)
   \   0000000C   0x....             LDR      R1,??DataTable5_1
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    283          
    284              return NRF_SUCCESS;
   \   00000010   0x2000             MOVS     R0,#+0
   \                     ??softdevice_sys_evt_handler_set_1: (+1)
   \   00000012   0xBD00             POP      {PC}             ;; return
    285          }
    286          
    287          
    288          /**@brief   Function for handling the Application's BLE Stack events interrupt.
    289           *
    290           * @details This function is called whenever an event is ready to be pulled.
    291           */

   \                                 In section .text, align 2, keep-with-next
    292          void SWI2_IRQHandler(void)
    293          {
   \                     SWI2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    294              if (m_evt_schedule_func != NULL)
   \   00000002   0x....             LDR      R0,??DataTable5_5
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD009             BEQ      ??SWI2_IRQHandler_0
    295              {
    296                  uint32_t err_code = m_evt_schedule_func();
   \   0000000A   0x....             LDR      R0,??DataTable5_5
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x4780             BLX      R0
    297                  APP_ERROR_CHECK(err_code);
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD003             BEQ      ??SWI2_IRQHandler_1
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x.... 0x....      BL       app_error_handler
   \                     ??SWI2_IRQHandler_1: (+1)
   \   0000001C   0xE001             B        ??SWI2_IRQHandler_2
    298              }
    299              else
    300              {
    301                  intern_softdevice_events_execute();
   \                     ??SWI2_IRQHandler_0: (+1)
   \   0000001E   0x.... 0x....      BL       intern_softdevice_events_execute
    302              }
    303          }
   \                     ??SWI2_IRQHandler_2: (+1)
   \   00000022   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     m_softdevice_enabled

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     m_sys_evt_handler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     m_ble_evt_handler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     m_ble_evt_buffer_size

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     mp_ble_evt_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     m_evt_schedule_func

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     softdevice_assertion_handler

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SWI2_IRQHandler
         8   -- Indirect call
         8   -> app_error_handler
         8   -> intern_softdevice_events_execute
      24   intern_softdevice_events_execute
        24   -- Indirect call
        24   -> app_error_handler
       4   is_word_aligned
       8   softdevice_assertion_handler
         8   -> assert_nrf_callback
       4   softdevice_ble_evt_handler_set
      24   softdevice_handler_init
        24   -> is_word_aligned
       8   softdevice_handler_sd_disable
       4   softdevice_sys_evt_handler_set


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
      36  SWI2_IRQHandler
     148  intern_softdevice_events_execute
      16  is_word_aligned
       2  m_ble_evt_buffer_size
       4  m_ble_evt_handler
       4  m_evt_schedule_func
       1  m_softdevice_enabled
       4  m_sys_evt_handler
       4  mp_ble_evt_buffer
      14  softdevice_assertion_handler
      20  softdevice_ble_evt_handler_set
      66  softdevice_handler_init
      20  softdevice_handler_sd_disable
      20  softdevice_sys_evt_handler_set

 
  19 bytes in section .bss
 368 bytes in section .text
 
 368 bytes of CODE memory
  19 bytes of DATA memory

Errors: none
Warnings: none
