###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        16/Apr/2015  21:19:49
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\VeloLabs\SkyLock Project\Source\mfginterface.c
#    Command line =  
#        "C:\VeloLabs\SkyLock Project\Source\mfginterface.c" -D NRF51 -D
#        BLE_STACK_SUPPORT_REQD -lCN "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\List\" -o "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\Obj\" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Normal.h" -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\include\" -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\include\ARMFiles\" -I
#        "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\drivers_nrf\hal\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\softdevice\s110\headers\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\toolchain\" -I
#        "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\softdevice\common\softdevice_handler\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\util\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\scheduler\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\timer\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\ble\common\" -Ol
#    List file    =  
#        C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\List\mfginterface.lst
#    Object file  =  
#        C:\VeloLabs\SkyLock Project\Source\IAR_7_30_4\Debug\Obj\mfginterface.o
#
###############################################################################

C:\VeloLabs\SkyLock Project\Source\mfginterface.c
      1          /*
      2          ** Proprietary Rights Notice
      3          **
      4          ** This material contains the valuable properties and trade secrets of:
      5          **
      6          **    Velo Labs
      7          **    San Francisco, CA, USA
      8          **
      9          ** All rights reserved. No part of this work may be reproduced, distributed, or
     10          ** transmitted in any form or by any means, including photocopying, recording,
     11          ** or other electronic or mechanical methods, without the prior written permission
     12          ** of Velo Labs.
     13          **
     14          ** Copyright (c) 2015, Velo Labs
     15          ** Contains Confidential and Trade Secret Information
     16          */
     17          
     18          /*
     19          ** File Name:  mfginterface.c
     20          **
     21          ** Purpose:    Manufacturing interface and diagnostic mode interface
     22          */
     23          
     24          #include "master.h"
     25          #include "stdio.h"
     26          #include "string.h"
     27          #include "hardware.h"
     28          #include "i2c.h"
     29          #include "uart.h"
     30          #include "utils.h"
     31          #include "timers.h"
     32          
     33          #define  UPPER_CASE_MASK         (~(0x20))
     34          #define  ESCAPE_CHAR             (0x1b)
     35          #define  BACKSPACE               ('\b')
     36          #define  CARRIAGE_RETURN         ('\r')
     37          #define  PROMPT_TIMEOUT          (4)
     38          
     39             /* For now allocate a large buffer. Depending on RAM usage we may need to do something different in the future */

   \                                 In section .bss, align 4
     40          uint8_t mfgBuffer[MFG_MAX_READ_SIZE + 1];
   \                     mfgBuffer:
   \   00000000                      DS8 132
     41          

   \                                 In section .text, align 2, keep-with-next
     42          uint8_t
     43          makeUpperCase (uint8_t c)
     44          {
   \                     makeUpperCase: (+1)
   \   00000000   0xB500             PUSH     {LR}
     45             if ((c >= 'a') && (c <= 'z'))
   \   00000002   0xB2C0             UXTB     R0,R0
   \   00000004   0x0001             MOVS     R1,R0
   \   00000006   0x3961             SUBS     R1,R1,#+97
   \   00000008   0x291A             CMP      R1,#+26
   \   0000000A   0xD202             BCS      ??makeUpperCase_0
     46                c &= UPPER_CASE_MASK;
   \   0000000C   0x0001             MOVS     R1,R0
   \   0000000E   0x20DF             MOVS     R0,#+223
   \   00000010   0x4008             ANDS     R0,R0,R1
     47          
     48             return (c);
   \                     ??makeUpperCase_0: (+1)
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0xBD00             POP      {PC}             ;; return
     49          }
     50          

   \                                 In section .text, align 2, keep-with-next
     51          unsigned int
     52          validHexChar (uint8_t c)
     53          {
   \                     validHexChar: (+1)
   \   00000000   0xB500             PUSH     {LR}
     54             if (   ((c >= '0') && (c <= '9'))
     55                 || ((c >= 'A') && (c <= 'F')))
   \   00000002   0xB2C0             UXTB     R0,R0
   \   00000004   0x0001             MOVS     R1,R0
   \   00000006   0x3930             SUBS     R1,R1,#+48
   \   00000008   0x290A             CMP      R1,#+10
   \   0000000A   0xD303             BCC      ??validHexChar_0
   \   0000000C   0xB2C0             UXTB     R0,R0
   \   0000000E   0x3841             SUBS     R0,R0,#+65
   \   00000010   0x2806             CMP      R0,#+6
   \   00000012   0xD201             BCS      ??validHexChar_1
     56                return (TRUE);
   \                     ??validHexChar_0: (+1)
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xE000             B        ??validHexChar_2
     57             else
     58                return (FALSE);
   \                     ??validHexChar_1: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \                     ??validHexChar_2: (+1)
   \   0000001A   0xBD00             POP      {PC}             ;; return
     59          }
     60          

   \                                 In section .text, align 2, keep-with-next
     61          uint8_t
     62          asciitohex (uint8_t c)
     63          {
   \                     asciitohex: (+1)
   \   00000000   0xB500             PUSH     {LR}
     64             return ((c > '9') ? c - ('A' - 10) : c - '0');
   \   00000002   0xB2C0             UXTB     R0,R0
   \   00000004   0x283A             CMP      R0,#+58
   \   00000006   0xDB01             BLT      ??asciitohex_0
   \   00000008   0x3837             SUBS     R0,R0,#+55
   \   0000000A   0xE000             B        ??asciitohex_1
   \                     ??asciitohex_0: (+1)
   \   0000000C   0x3830             SUBS     R0,R0,#+48
   \                     ??asciitohex_1: (+1)
   \   0000000E   0xB2C0             UXTB     R0,R0
   \   00000010   0xBD00             POP      {PC}             ;; return
     65          }
     66          

   \                                 In section .text, align 2, keep-with-next
     67          void
     68          dumpRegData (uint8_t regAddr, uint8_t *buffer, unsigned int len)
     69          {
   \                     dumpRegData: (+1)
   \   00000000   0xB5F5             PUSH     {R0,R2,R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x000E             MOVS     R6,R1
     70             unsigned int i, j;
     71             unsigned int burn;
     72          
     73             burn = regAddr & 0x0F;
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x7900             LDRB     R0,[R0, #+4]
   \   0000000A   0x0707             LSLS     R7,R0,#+28       ;; ZeroExtS R7,R0,#+28,#+28
   \   0000000C   0x0F3F             LSRS     R7,R7,#+28
     74             regAddr &= 0xF0;
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0x4669             MOV      R1,SP
   \   00000012   0x7909             LDRB     R1,[R1, #+4]
   \   00000014   0x22F0             MOVS     R2,#+240
   \   00000016   0x400A             ANDS     R2,R2,R1
   \   00000018   0x7102             STRB     R2,[R0, #+4]
     75          
     76             printf("      0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F");
   \   0000001A   0x....             LDR      R0,??DataTable4
   \   0000001C   0x.... 0x....      BL       printf
     77             printf("\n   +-------------------------------------------------+");
   \   00000020   0x....             LDR      R0,??DataTable4_1
   \   00000022   0x.... 0x....      BL       printf
     78             for (i = 0; i < len;)
   \   00000026   0x2400             MOVS     R4,#+0
   \   00000028   0xE00C             B        ??dumpRegData_0
     79                {
     80                printf("\n%02X | ", regAddr);
     81                for (j = 0; j < 16; j++)
     82                   {
     83                   if (((i + j - burn) < len) && (j >= burn))
     84                      {
     85                      printf ("%02X ", buffer[j - burn]);
     86                      }
     87                   else
     88                      {
     89                      printf ("-- ");
     90                      }
     91                   }
     92                printf ("| ");
   \                     ??dumpRegData_1: (+1)
   \   0000002A   0x....             ADR      R0,??DataTable4_2  ;; 0x7C, 0x20, 0x00, 0x00
   \   0000002C   0x.... 0x....      BL       printf
     93          
     94                buffer += (16 - burn);
   \   00000030   0x1BF6             SUBS     R6,R6,R7
   \   00000032   0x3610             ADDS     R6,R6,#+16
     95                i += (16 - burn);
   \   00000034   0x3410             ADDS     R4,R4,#+16
   \   00000036   0x1BE4             SUBS     R4,R4,R7
     96                burn = 0;
   \   00000038   0x2700             MOVS     R7,#+0
     97                regAddr += 16;
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x4669             MOV      R1,SP
   \   0000003E   0x7909             LDRB     R1,[R1, #+4]
   \   00000040   0x3110             ADDS     R1,R1,#+16
   \   00000042   0x7101             STRB     R1,[R0, #+4]
   \                     ??dumpRegData_0: (+1)
   \   00000044   0x9802             LDR      R0,[SP, #+8]
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD219             BCS      ??dumpRegData_2
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0x7901             LDRB     R1,[R0, #+4]
   \   0000004E   0x....             LDR      R0,??DataTable4_3
   \   00000050   0x.... 0x....      BL       printf
   \   00000054   0x2500             MOVS     R5,#+0
   \   00000056   0xE003             B        ??dumpRegData_3
   \                     ??dumpRegData_4: (+1)
   \   00000058   0x....             ADR      R0,??DataTable4_4  ;; "-- "
   \   0000005A   0x.... 0x....      BL       printf
   \                     ??dumpRegData_5: (+1)
   \   0000005E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??dumpRegData_3: (+1)
   \   00000060   0x2D10             CMP      R5,#+16
   \   00000062   0xD2E2             BCS      ??dumpRegData_1
   \   00000064   0x1960             ADDS     R0,R4,R5
   \   00000066   0x1BC0             SUBS     R0,R0,R7
   \   00000068   0x9902             LDR      R1,[SP, #+8]
   \   0000006A   0x4288             CMP      R0,R1
   \   0000006C   0xD2F4             BCS      ??dumpRegData_4
   \   0000006E   0x42BD             CMP      R5,R7
   \   00000070   0xD3F2             BCC      ??dumpRegData_4
   \   00000072   0x1BE8             SUBS     R0,R5,R7
   \   00000074   0x5C31             LDRB     R1,[R6, R0]
   \   00000076   0x....             LDR      R0,??DataTable4_5
   \   00000078   0x.... 0x....      BL       printf
   \   0000007C   0xE7EF             B        ??dumpRegData_5
     98                }
     99             printf("\n   +-------------------------------------------------+\n");
   \                     ??dumpRegData_2: (+1)
   \   0000007E   0x....             LDR      R0,??DataTable5
   \   00000080   0x.... 0x....      BL       printf
    100          }
   \   00000084   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    101          
    102          
    103          /*
    104          ** Routine that will ask user for a hex byte
    105          **
    106          ** Returns 0 if there is a data byte, returns non-zero if their is an abort
    107          */

   \                                 In section .text, align 2, keep-with-next
    108          uint8_t
    109          getHexByte (unsigned char *str, uint8_t *dataByte)
    110          {
   \                     getHexByte: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x000C             MOVS     R4,R1
    111             int     i, c;
    112             char    buf[12];
    113          
    114             printf ("%s: %02X", str, *dataByte);
   \   00000006   0x7822             LDRB     R2,[R4, #+0]
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable5_1
   \   0000000C   0x.... 0x....      BL       printf
    115             sprintf (buf, "%02X", *dataByte);
   \   00000010   0x7822             LDRB     R2,[R4, #+0]
   \   00000012   0x....             LDR      R1,??DataTable5_2
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x.... 0x....      BL       sprintf
    116             i = 2;
   \   0000001A   0x2502             MOVS     R5,#+2
    117          
    118                /*
    119                ** If first thing user gives us is a valid character then clear the default value
    120                ** and start with what the user gives us. We need to wait until user gives us something
    121                ** valid first though.
    122                */
    123             while (TRUE)
    124                {
    125                   /* Only way out is you have to give us characters! */
    126                c = makeUpperCase(getchar());
   \                     ??getHexByte_0: (+1)
   \   0000001C   0x.... 0x....      BL       getchar
   \   00000020   0xB2C0             UXTB     R0,R0
   \   00000022   0x.... 0x....      BL       makeUpperCase
   \   00000026   0x0006             MOVS     R6,R0
    127          
    128                if (validHexChar(c))
   \   00000028   0x0030             MOVS     R0,R6
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0x.... 0x....      BL       validHexChar
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD004             BEQ      ??getHexByte_1
    129                   {
    130                   printf ("\b\b  \b\b");
   \   00000034   0x....             LDR      R0,??DataTable5_3
   \   00000036   0x.... 0x....      BL       printf
    131                   i = 0;
   \   0000003A   0x2500             MOVS     R5,#+0
    132                   break;
   \   0000003C   0xE021             B        ??getHexByte_2
    133                   }
    134          
    135                else if (c == ESCAPE_CHAR)
   \                     ??getHexByte_1: (+1)
   \   0000003E   0x2E1B             CMP      R6,#+27
   \   00000040   0xD104             BNE      ??getHexByte_3
    136                   {
    137                   printf ("\n");
   \   00000042   0x....             ADR      R0,??DataTable5_4  ;; "\n"
   \   00000044   0x.... 0x....      BL       printf
    138                   return (1);
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0xE049             B        ??getHexByte_4
    139                   }
    140          
    141                else if ((c == BACKSPACE) || (c == CARRIAGE_RETURN))
   \                     ??getHexByte_3: (+1)
   \   0000004C   0x2E08             CMP      R6,#+8
   \   0000004E   0xD001             BEQ      ??getHexByte_5
   \   00000050   0x2E0D             CMP      R6,#+13
   \   00000052   0xD1E3             BNE      ??getHexByte_0
    142                   break;
   \                     ??getHexByte_5: (+1)
   \   00000054   0xE015             B        ??getHexByte_2
    143                }
    144          
    145             while (TRUE)
    146                {
    147                if (c == CARRIAGE_RETURN)
    148                   break;
    149          
    150                else if (c == ESCAPE_CHAR)
    151                   {
    152                   printf ("\n");
    153                   return (1);
    154                   }
    155          
    156                else if ((c == BACKSPACE) && i)
    157                   {
    158                   printf("\b \b");
    159                   buf[--i] = 0;
    160                   }
    161          
    162                else if ((i < 2) && validHexChar(c))
   \                     ??getHexByte_6: (+1)
   \   00000056   0x2D02             CMP      R5,#+2
   \   00000058   0xDA0D             BGE      ??getHexByte_7
   \   0000005A   0x0030             MOVS     R0,R6
   \   0000005C   0xB2C0             UXTB     R0,R0
   \   0000005E   0x.... 0x....      BL       validHexChar
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD007             BEQ      ??getHexByte_7
    163                   {
    164                   buf[i++] = c;
   \   00000066   0x0030             MOVS     R0,R6
   \   00000068   0x4669             MOV      R1,SP
   \   0000006A   0x5548             STRB     R0,[R1, R5]
   \   0000006C   0x1C6D             ADDS     R5,R5,#+1
    165                   printf("%c", c);
   \   0000006E   0x0031             MOVS     R1,R6
   \   00000070   0x....             ADR      R0,??DataTable5_5  ;; 0x25, 0x63, 0x00, 0x00
   \   00000072   0x.... 0x....      BL       printf
    166                   }
    167          
    168                   /* Only way out is you have to give us characters! */
    169                c = makeUpperCase(getchar());
   \                     ??getHexByte_7: (+1)
   \   00000076   0x.... 0x....      BL       getchar
   \   0000007A   0xB2C0             UXTB     R0,R0
   \   0000007C   0x.... 0x....      BL       makeUpperCase
   \   00000080   0x0006             MOVS     R6,R0
   \                     ??getHexByte_2: (+1)
   \   00000082   0x2E0D             CMP      R6,#+13
   \   00000084   0xD107             BNE      ??getHexByte_8
    170                }
    171          
    172             printf ("\n");
   \   00000086   0x....             ADR      R0,??DataTable5_4  ;; "\n"
   \   00000088   0x.... 0x....      BL       printf
    173          
    174             if (i == 0)
   \   0000008C   0x2D00             CMP      R5,#+0
   \   0000008E   0xD115             BNE      ??getHexByte_9
    175                *dataByte = 0;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x7020             STRB     R0,[R4, #+0]
   \   00000094   0xE023             B        ??getHexByte_10
   \                     ??getHexByte_8: (+1)
   \   00000096   0x2E1B             CMP      R6,#+27
   \   00000098   0xD104             BNE      ??getHexByte_11
   \   0000009A   0x....             ADR      R0,??DataTable5_4  ;; "\n"
   \   0000009C   0x.... 0x....      BL       printf
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0xE01D             B        ??getHexByte_4
   \                     ??getHexByte_11: (+1)
   \   000000A4   0x2E08             CMP      R6,#+8
   \   000000A6   0xD1D6             BNE      ??getHexByte_6
   \   000000A8   0x2D00             CMP      R5,#+0
   \   000000AA   0xD0D4             BEQ      ??getHexByte_6
   \   000000AC   0x....             ADR      R0,??DataTable5_6  ;; "\b \b"
   \   000000AE   0x.... 0x....      BL       printf
   \   000000B2   0x1E6D             SUBS     R5,R5,#+1
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x4669             MOV      R1,SP
   \   000000B8   0x5548             STRB     R0,[R1, R5]
   \   000000BA   0xE7DC             B        ??getHexByte_7
    176          
    177             else
    178                {
    179                *dataByte = asciitohex (buf[0]);
   \                     ??getHexByte_9: (+1)
   \   000000BC   0x4668             MOV      R0,SP
   \   000000BE   0x7800             LDRB     R0,[R0, #+0]
   \   000000C0   0x.... 0x....      BL       asciitohex
   \   000000C4   0x7020             STRB     R0,[R4, #+0]
    180                if (i == 2)
   \   000000C6   0x2D02             CMP      R5,#+2
   \   000000C8   0xD109             BNE      ??getHexByte_10
    181                   *dataByte = (*dataByte * 16) + asciitohex (buf[1]);
   \   000000CA   0x4668             MOV      R0,SP
   \   000000CC   0x7840             LDRB     R0,[R0, #+1]
   \   000000CE   0x.... 0x....      BL       asciitohex
   \   000000D2   0x7821             LDRB     R1,[R4, #+0]
   \   000000D4   0x2210             MOVS     R2,#+16
   \   000000D6   0x4351             MULS     R1,R2,R1
   \   000000D8   0xB2C0             UXTB     R0,R0
   \   000000DA   0x1808             ADDS     R0,R1,R0
   \   000000DC   0x7020             STRB     R0,[R4, #+0]
    182                }
    183          
    184             return (0);
   \                     ??getHexByte_10: (+1)
   \   000000DE   0x2000             MOVS     R0,#+0
   \                     ??getHexByte_4: (+1)
   \   000000E0   0xB004             ADD      SP,SP,#+16
   \   000000E2   0xBD70             POP      {R4-R6,PC}       ;; return
    185          }
    186          
    187          /*
    188          ** Generic function that reads a block of data from an I2C device. Caller passes the I2C
    189          ** device address, a buffer to read into and the number of bytes to read.
    190          **
    191          ** The first byte of the buffer should be the register address to read from. The buffer
    192          ** must be big enough to hold the number of bytes requested, including the register
    193          ** address byte.
    194          */

   \                                 In section .text, align 2, keep-with-next
    195          void
    196          MFG_I2C_ReadBuffer (uint8_t I2Caddr, uint8_t *buffer, unsigned int len)
    197          {
   \                     MFG_I2C_ReadBuffer: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0016             MOVS     R6,R2
    198             I2C_Write (I2Caddr, buffer, 1, FALSE);
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0x0021             MOVS     R1,R4
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0xB2C0             UXTB     R0,R0
   \   00000012   0x.... 0x....      BL       I2C_Write
    199             I2C_Read (I2Caddr, &buffer[1], len);
   \   00000016   0x0032             MOVS     R2,R6
   \   00000018   0xB2D2             UXTB     R2,R2
   \   0000001A   0x1C64             ADDS     R4,R4,#+1
   \   0000001C   0x0021             MOVS     R1,R4
   \   0000001E   0x0028             MOVS     R0,R5
   \   00000020   0xB2C0             UXTB     R0,R0
   \   00000022   0x.... 0x....      BL       I2C_Read
    200          }
   \   00000026   0xBD70             POP      {R4-R6,PC}       ;; return
    201          
    202          /*
    203          ** Generic function that will prompt the user for an address and will read one byte
    204          ** from the specified I2C device.
    205          **
    206          ** Caller provides the I2C device address and a buffer that is at least 2 bytes long.
    207          ** The first byte of the buffer is the default address that the user is prompted with.
    208          */

   \                                 In section .text, align 2, keep-with-next
    209          void
    210          MFG_I2C_Read (uint8_t I2Caddr, uint8_t *buffer)
    211          {
   \                     MFG_I2C_Read: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    212             if (getHexByte ("Enter register address (ESC aborts)", &buffer[0]) == 0)
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0x....             LDR      R0,??DataTable5_7
   \   0000000A   0x.... 0x....      BL       getHexByte
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD10A             BNE      ??MFG_I2C_Read_0
    213                {
    214                I2C_FullRead (I2Caddr, buffer, 1);
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x0029             MOVS     R1,R5
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xB2C0             UXTB     R0,R0
   \   0000001A   0x.... 0x....      BL       I2C_FullRead
    215                printf ("Register %02X: %02X\n", buffer[0], buffer[1]);
   \   0000001E   0x786A             LDRB     R2,[R5, #+1]
   \   00000020   0x7829             LDRB     R1,[R5, #+0]
   \   00000022   0x....             LDR      R0,??DataTable5_8
   \   00000024   0x.... 0x....      BL       printf
    216                }
    217          }
   \                     ??MFG_I2C_Read_0: (+1)
   \   00000028   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    218          
    219          /*
    220          ** Generic function that will prompt the user for an address and value to write to
    221          ** any I2C device. Caller passes the I2C device address and a buffer to use.
    222          **
    223          ** This routine will on purpose use the values in the buffer as defaults. That way
    224          ** if the user calls a write routine over and over the default value will be what they
    225          ** used last time.
    226          */

   \                                 In section .text, align 2, keep-with-next
    227          void
    228          MFG_I2C_Write (uint8_t I2Caddr, uint8_t *buffer)
    229          {
   \                     MFG_I2C_Write: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    230             if (getHexByte ("Enter register address (ESC aborts)", &buffer[0]) == 0)
   \   00000006   0x0021             MOVS     R1,R4
   \   00000008   0x....             LDR      R0,??DataTable5_7
   \   0000000A   0x.... 0x....      BL       getHexByte
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD11B             BNE      ??MFG_I2C_Write_0
    231                {
    232                I2C_Write (I2Caddr, buffer, 1, FALSE);
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0x0021             MOVS     R1,R4
   \   00000018   0x0028             MOVS     R0,R5
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0x.... 0x....      BL       I2C_Write
    233                I2C_Read (I2Caddr, &buffer[1], 1);
   \   00000020   0x2201             MOVS     R2,#+1
   \   00000022   0x0021             MOVS     R1,R4
   \   00000024   0x1C49             ADDS     R1,R1,#+1
   \   00000026   0x0028             MOVS     R0,R5
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x.... 0x....      BL       I2C_Read
    234          
    235                if (getHexByte ("Enter value to write (ESC aborts)", &buffer[1]) == 0)
   \   0000002E   0x0021             MOVS     R1,R4
   \   00000030   0x1C49             ADDS     R1,R1,#+1
   \   00000032   0x....             LDR      R0,??DataTable5_9
   \   00000034   0x.... 0x....      BL       getHexByte
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD106             BNE      ??MFG_I2C_Write_0
    236                   {
    237                   I2C_Write (I2Caddr, buffer, 2, TRUE);
   \   0000003C   0x2301             MOVS     R3,#+1
   \   0000003E   0x2202             MOVS     R2,#+2
   \   00000040   0x0021             MOVS     R1,R4
   \   00000042   0x0028             MOVS     R0,R5
   \   00000044   0xB2C0             UXTB     R0,R0
   \   00000046   0x.... 0x....      BL       I2C_Write
    238                   }
    239                }
    240          }
   \                     ??MFG_I2C_Write_0: (+1)
   \   0000004A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    241          
    242          /*
    243          ** Test menu for the Accelerometer
    244          */

   \                                 In section .text, align 2, keep-with-next
    245          void
    246          MFG_Accel (void)
    247          {
   \                     MFG_Accel: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    248             int c;
    249          
    250                /* Start buffer out clear so default values are meaningful */
    251             memset (mfgBuffer, 0, sizeof(mfgBuffer));
   \   00000002   0x2181             MOVS     R1,#+129
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x....             LDR      R4,??DataTable5_10
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       __aeabi_memset
   \   0000000E   0xE005             B        ??MFG_Accel_0
    252             while (TRUE)
    253                {
    254                if (UART0_RxWaiting())
    255                   {
    256                   c = makeUpperCase(getchar());
    257                   printf("%c\n", c);
    258          
    259                   switch (c)
    260                      {
    261                      case 'D':
    262                         mfgBuffer[0] = 0;
    263                         MFG_I2C_ReadBuffer (I2C_ADDR_ACCEL, mfgBuffer, 64);
    264                         dumpRegData (0, &mfgBuffer[1], 64);
    265                         break;
    266          
    267                      case 'R':
    268                         MFG_I2C_Read (I2C_ADDR_ACCEL, mfgBuffer);
    269                         break;
    270          
    271                      case 'W':
    272                         MFG_I2C_Write (I2C_ADDR_ACCEL, mfgBuffer);
    273                         break;
    274          
    275                      case 'X':
    276                         printf(">");
    277                         return;
    278          
    279                      default:
    280                         printf (
    281                            "Command Help\n"
    282                            "  D - Dump Motor Registers\n"
    283                            "  R - Read Register\n"
    284                            "  W - Write Register\n"
    285                            "  X - Return to main menu\n"
    286                            "  ? - Displays this message\n");
   \                     ??MFG_Accel_1: (+1)
   \   00000010   0x....             LDR      R0,??DataTable5_11
   \   00000012   0x.... 0x....      BL       printf
    287                         break;
    288                      }
    289          
    290                   printf(">");
   \                     ??MFG_Accel_2: (+1)
   \   00000016   0x....             ADR      R0,??DataTable5_12  ;; ">"
   \   00000018   0x.... 0x....      BL       printf
   \                     ??MFG_Accel_0: (+1)
   \   0000001C   0x.... 0x....      BL       UART0_RxWaiting
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD0FB             BEQ      ??MFG_Accel_0
   \   00000024   0x.... 0x....      BL       getchar
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x.... 0x....      BL       makeUpperCase
   \   0000002E   0x0004             MOVS     R4,R0
   \   00000030   0x0021             MOVS     R1,R4
   \   00000032   0x....             ADR      R0,??DataTable5_13  ;; "%c\n"
   \   00000034   0x.... 0x....      BL       printf
   \   00000038   0x2C44             CMP      R4,#+68
   \   0000003A   0xD006             BEQ      ??MFG_Accel_3
   \   0000003C   0x2C52             CMP      R4,#+82
   \   0000003E   0xD012             BEQ      ??MFG_Accel_4
   \   00000040   0x2C57             CMP      R4,#+87
   \   00000042   0xD015             BEQ      ??MFG_Accel_5
   \   00000044   0x2C58             CMP      R4,#+88
   \   00000046   0xD018             BEQ      ??MFG_Accel_6
   \   00000048   0xE7E2             B        ??MFG_Accel_1
   \                     ??MFG_Accel_3: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x....             LDR      R1,??DataTable5_10
   \   0000004E   0x7008             STRB     R0,[R1, #+0]
   \   00000050   0x2240             MOVS     R2,#+64
   \   00000052   0x....             LDR      R1,??DataTable5_10
   \   00000054   0x2018             MOVS     R0,#+24
   \   00000056   0x.... 0x....      BL       MFG_I2C_ReadBuffer
   \   0000005A   0x2240             MOVS     R2,#+64
   \   0000005C   0x....             LDR      R1,??DataTable5_14
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x.... 0x....      BL       dumpRegData
   \   00000064   0xE7D7             B        ??MFG_Accel_2
   \                     ??MFG_Accel_4: (+1)
   \   00000066   0x....             LDR      R1,??DataTable5_10
   \   00000068   0x2018             MOVS     R0,#+24
   \   0000006A   0x.... 0x....      BL       MFG_I2C_Read
   \   0000006E   0xE7D2             B        ??MFG_Accel_2
   \                     ??MFG_Accel_5: (+1)
   \   00000070   0x....             LDR      R1,??DataTable5_10
   \   00000072   0x2018             MOVS     R0,#+24
   \   00000074   0x.... 0x....      BL       MFG_I2C_Write
   \   00000078   0xE7CD             B        ??MFG_Accel_2
   \                     ??MFG_Accel_6: (+1)
   \   0000007A   0x....             ADR      R0,??DataTable5_12  ;; ">"
   \   0000007C   0x.... 0x....      BL       printf
   \   00000080   0xBD10             POP      {R4,PC}          ;; return
    291                   }
    292                }
    293          }
    294          
    295          
    296          /*
    297          ** Test menu for the Magnetometer
    298          */

   \                                 In section .text, align 2, keep-with-next
    299          void
    300          MFG_Magnet (void)
    301          {
   \                     MFG_Magnet: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    302             int c;
    303          
    304                /* Start buffer out clear so default values are meaningful */
    305             memset (mfgBuffer, 0, sizeof(mfgBuffer));
   \   00000002   0x2181             MOVS     R1,#+129
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x....             LDR      R4,??DataTable5_10
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       __aeabi_memset
   \   0000000E   0xE005             B        ??MFG_Magnet_0
    306             while (TRUE)
    307                {
    308                if (UART0_RxWaiting())
    309                   {
    310                   c = makeUpperCase(getchar());
    311                   printf("%c\n", c);
    312          
    313                   switch (c)
    314                      {
    315                      case 'D':
    316                         mfgBuffer[0] = 0x20 | 0x80;
    317                         MFG_I2C_ReadBuffer (I2C_ADDR_MAGNET, mfgBuffer, 14);
    318                         dumpRegData (0x20, &mfgBuffer[1], 14);
    319          
    320                         mfgBuffer[0] = 0x2E | 0x80;
    321                         MFG_I2C_ReadBuffer (I2C_ADDR_MAGNET, mfgBuffer, 6);
    322                         dumpRegData (0x2E, &mfgBuffer[1], 6);
    323                         break;
    324          
    325                      case 'R':
    326                         MFG_I2C_Read (I2C_ADDR_MAGNET, mfgBuffer);
    327                         break;
    328          
    329                      case 'W':
    330                         MFG_I2C_Write (I2C_ADDR_MAGNET, mfgBuffer);
    331                         break;
    332          
    333                      case 'X':
    334                         printf(">");
    335                         return;
    336          
    337                      default:
    338                         printf (
    339                            "Command Help\n"
    340                            "  D - Dump Motor Registers\n"
    341                            "  R - Read Register\n"
    342                            "  W - Write Register\n"
    343                            "  X - Return to main menu\n"
    344                            "  ? - Displays this message\n");
   \                     ??MFG_Magnet_1: (+1)
   \   00000010   0x....             LDR      R0,??DataTable5_11
   \   00000012   0x.... 0x....      BL       printf
    345                         break;
    346                      }
    347          
    348                   printf(">");
   \                     ??MFG_Magnet_2: (+1)
   \   00000016   0x....             ADR      R0,??DataTable5_12  ;; ">"
   \   00000018   0x.... 0x....      BL       printf
   \                     ??MFG_Magnet_0: (+1)
   \   0000001C   0x.... 0x....      BL       UART0_RxWaiting
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD0FB             BEQ      ??MFG_Magnet_0
   \   00000024   0x.... 0x....      BL       getchar
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x.... 0x....      BL       makeUpperCase
   \   0000002E   0x0004             MOVS     R4,R0
   \   00000030   0x0021             MOVS     R1,R4
   \   00000032   0x....             ADR      R0,??DataTable5_13  ;; "%c\n"
   \   00000034   0x.... 0x....      BL       printf
   \   00000038   0x2C44             CMP      R4,#+68
   \   0000003A   0xD006             BEQ      ??MFG_Magnet_3
   \   0000003C   0x2C52             CMP      R4,#+82
   \   0000003E   0xD01F             BEQ      ??MFG_Magnet_4
   \   00000040   0x2C57             CMP      R4,#+87
   \   00000042   0xD022             BEQ      ??MFG_Magnet_5
   \   00000044   0x2C58             CMP      R4,#+88
   \   00000046   0xD025             BEQ      ??MFG_Magnet_6
   \   00000048   0xE7E2             B        ??MFG_Magnet_1
   \                     ??MFG_Magnet_3: (+1)
   \   0000004A   0x20A0             MOVS     R0,#+160
   \   0000004C   0x....             LDR      R1,??DataTable5_10
   \   0000004E   0x7008             STRB     R0,[R1, #+0]
   \   00000050   0x220E             MOVS     R2,#+14
   \   00000052   0x....             LDR      R1,??DataTable5_10
   \   00000054   0x201C             MOVS     R0,#+28
   \   00000056   0x.... 0x....      BL       MFG_I2C_ReadBuffer
   \   0000005A   0x220E             MOVS     R2,#+14
   \   0000005C   0x....             LDR      R1,??DataTable5_14
   \   0000005E   0x2020             MOVS     R0,#+32
   \   00000060   0x.... 0x....      BL       dumpRegData
   \   00000064   0x20AE             MOVS     R0,#+174
   \   00000066   0x....             LDR      R1,??DataTable5_10
   \   00000068   0x7008             STRB     R0,[R1, #+0]
   \   0000006A   0x2206             MOVS     R2,#+6
   \   0000006C   0x....             LDR      R1,??DataTable5_10
   \   0000006E   0x201C             MOVS     R0,#+28
   \   00000070   0x.... 0x....      BL       MFG_I2C_ReadBuffer
   \   00000074   0x2206             MOVS     R2,#+6
   \   00000076   0x....             LDR      R1,??DataTable5_14
   \   00000078   0x202E             MOVS     R0,#+46
   \   0000007A   0x.... 0x....      BL       dumpRegData
   \   0000007E   0xE7CA             B        ??MFG_Magnet_2
   \                     ??MFG_Magnet_4: (+1)
   \   00000080   0x....             LDR      R1,??DataTable5_10
   \   00000082   0x201C             MOVS     R0,#+28
   \   00000084   0x.... 0x....      BL       MFG_I2C_Read
   \   00000088   0xE7C5             B        ??MFG_Magnet_2
   \                     ??MFG_Magnet_5: (+1)
   \   0000008A   0x....             LDR      R1,??DataTable5_10
   \   0000008C   0x201C             MOVS     R0,#+28
   \   0000008E   0x.... 0x....      BL       MFG_I2C_Write
   \   00000092   0xE7C0             B        ??MFG_Magnet_2
   \                     ??MFG_Magnet_6: (+1)
   \   00000094   0x....             ADR      R0,??DataTable5_12  ;; ">"
   \   00000096   0x.... 0x....      BL       printf
   \   0000009A   0xBD10             POP      {R4,PC}          ;; return
    349                   }
    350                }
    351          }
    352          
    353          
    354          /*
    355          ** Test menu for the Motor
    356          **
    357          ** Next test for motor is add code to sense ENC1 and ENC2
    358          ** Next after that is can those be interrupts
    359          ** Next, can that interrupt feed a timer?
    360          **
    361          ** For now, assume lock is open when we start any tests.
    362          */

   \                                 In section .text, align 2, keep-with-next
    363          void
    364          MFG_Motor (void)
    365          {
   \                     MFG_Motor: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    366             int c;
    367             uint8_t lockState = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    368          
    369                /* Start buffer out clear so default values are meaningful */
    370             memset (mfgBuffer, 0, sizeof(mfgBuffer));
   \   00000004   0x2181             MOVS     R1,#+129
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x....             LDR      R5,??DataTable6
   \   0000000A   0x0028             MOVS     R0,R5
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0xE005             B        ??MFG_Motor_0
    371             while (TRUE)
    372                {
    373                if (UART0_RxWaiting())
    374                   {
    375                   c = makeUpperCase(getchar());
    376                   printf("%c\n", c);
    377          
    378                   switch (c)
    379                      {
    380                   #if 0
    381                      case 'A':
    382                         {
    383                         uint16_t r1, r2;
    384          
    385                         Motor_Lock (TRUE, 200);
    386                         r1 = Motor_Lock (FALSE, 200);
    387                         r2 = Motor_Lock (TRUE, 200);
    388                         lockMotorSteps = ((r1 + r2) / 2) - 5;
    389          
    390                         printf("Got lock of %u %u %u\n", r1, r2, lockMotorSteps);
    391          
    392                         break;
    393                         }
    394                   #endif
    395          
    396                      case 'C':
    397                         {
    398                         uint32_t latch_enc;
    399                         uint16_t t1, t2, t3;
    400          
    401                         Motor_Start (FALSE);
    402          
    403                            /* First wait for motor to start moving */
    404                         MOTOR_Enc01Events = 0;
    405                         while (MOTOR_Enc01Events <= 10);
    406          
    407                         latch_enc = MOTOR_Enc01Events;
    408                         while (MOTOR_Enc01Events == latch_enc);
    409          
    410                         t1 = Timer2_Count();
    411                         latch_enc = MOTOR_Enc02Events;
    412                         while (MOTOR_Enc02Events == latch_enc);
    413          
    414                         t2 = Timer2_Count();
    415                         latch_enc = MOTOR_Enc01Events;
    416                         while (MOTOR_Enc01Events == latch_enc);
    417          
    418                         t3 = Timer2_Count();
    419          
    420                         Motor_Stop ();
    421          
    422                         printf("t1->t2 is %u  and t2->t3 is %u\n", t2 - t1, t3 - t2);
    423                         printf("t1 t2 t3 is %u %u %u\n", t1, t2, t3);
    424                         break;
    425                         }
    426          
    427                      case 'D':
    428                         mfgBuffer[0] = 0;
    429                         MFG_I2C_ReadBuffer (I2C_ADDR_MOTOR, mfgBuffer, 2);
    430                         dumpRegData (0, &mfgBuffer[1], 2);
    431                         break;
    432          
    433                      case 'K':
    434                         {
    435                         uint8_t latch_irq;
    436          
    437                            /* Force the code to read the status and clear the counter at least once */
    438                         latch_irq = TS_IRQCounter - 1;
    439                         while (TRUE)
    440                            {
    441                            if (latch_irq != TS_IRQCounter)
    442                               {
    443                               latch_irq = TS_IRQCounter;
    444          
    445                               if (TS_TouchLED (TRUE))
    446                                  {
    447                                  lockState ^= 0x01;
    448                                  Timer2_Start();
    449                                  Motor_Lock (lockState == 1, MOTOR_LOCK_COUNT);
    450                                  Timer2_Stop();
    451                                  }
    452                               }
    453          
    454                            if (UART0_RxWaiting())
    455                               {
    456                               c = getchar();
    457                               if (c == ESCAPE_CHAR)
    458                                  {
    459                                  break;
    460                                  }
    461                               }
    462                            }
    463                         break;
    464                         }
    465          
    466                      case 'L':
    467                         {
    468                         printf ("Use L to toggle lock position, ESC to exit\n");
    469                         while (TRUE)
    470                            {
    471                            if (UART0_RxWaiting())
    472                               {
    473                               c = makeUpperCase(getchar());
    474          
    475                               if (c == ESCAPE_CHAR)
    476                                  break;
    477          
    478                               else if (c == 'L')
    479                                  {
    480                                  lockState ^= 0x01;
    481                                  Motor_Lock (lockState == 1, MOTOR_LOCK_COUNT);
    482                                  }
    483                               }
    484                            }
    485                         break;
    486                         }
    487          
    488                      case 'P':
    489                         printf ("Use = or - to move motor, ESC to exit\n");
    490                         while (TRUE)
    491                            {
    492                            if (UART0_RxWaiting())
    493                               {
    494                               c = getchar();
    495          
    496                               if (c == ESCAPE_CHAR)
    497                                  break;
    498          
    499                               else if ((c == '=') || (c == '-'))
    500                                  {
    501                                  Motor_Lock (c == '=', 10);
    502                                  }
    503                               }
    504                            }
    505                         break;
    506          
    507                      case 'R':
    508                         MFG_I2C_Read (I2C_ADDR_MOTOR, mfgBuffer);
    509                         break;
    510          
    511                      case 'W':
    512                         MFG_I2C_Write (I2C_ADDR_MOTOR, mfgBuffer);
    513                         break;
    514          
    515                      case 'X':
    516                         printf(">");
    517                         return;
    518          
    519                      default:
    520                         printf (
    521                            "Command Help\n"
    522                            "  C - Calibrate Direction\n"
    523                            "  D - Dump Motor Registers\n"
    524                            "  K - Keyboard Lock Test\n"
    525                            "  L - Lock/Unlock Motor\n"
    526                            "  P - Position Motor\n"
    527                            "  R - Read Register\n"
    528                            "  W - Write Register\n"
    529                            "  X - Return to main menu\n"
    530                            "  ? - Displays this message\n");
   \                     ??MFG_Motor_1: (+1)
   \   00000012   0x....             LDR      R0,??DataTable6_1
   \   00000014   0x.... 0x....      BL       printf
    531                         break;
    532                      }
    533          
    534                   printf(">");
   \                     ??MFG_Motor_2: (+1)
   \   00000018   0x....             ADR      R0,??DataTable6_2  ;; ">"
   \   0000001A   0x.... 0x....      BL       printf
   \                     ??MFG_Motor_0: (+1)
   \   0000001E   0x.... 0x....      BL       UART0_RxWaiting
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD0FB             BEQ      ??MFG_Motor_0
   \   00000026   0x.... 0x....      BL       getchar
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0x.... 0x....      BL       makeUpperCase
   \   00000030   0x0006             MOVS     R6,R0
   \   00000032   0x0031             MOVS     R1,R6
   \   00000034   0x....             ADR      R0,??DataTable6_3  ;; "%c\n"
   \   00000036   0x.... 0x....      BL       printf
   \   0000003A   0x2E43             CMP      R6,#+67
   \   0000003C   0xD013             BEQ      ??MFG_Motor_3
   \   0000003E   0x2E44             CMP      R6,#+68
   \   00000040   0xD04B             BEQ      ??MFG_Motor_4
   \   00000042   0x2E4B             CMP      R6,#+75
   \   00000044   0xD057             BEQ      ??MFG_Motor_5
   \   00000046   0x2E4C             CMP      R6,#+76
   \   00000048   0xD100             BNE      .+4
   \   0000004A   0xE07E             B        ??MFG_Motor_6
   \   0000004C   0x2E50             CMP      R6,#+80
   \   0000004E   0xD100             BNE      .+4
   \   00000050   0xE09B             B        ??MFG_Motor_7
   \   00000052   0x2E52             CMP      R6,#+82
   \   00000054   0xD100             BNE      .+4
   \   00000056   0xE0B3             B        ??MFG_Motor_8
   \   00000058   0x2E57             CMP      R6,#+87
   \   0000005A   0xD100             BNE      .+4
   \   0000005C   0xE0B5             B        ??MFG_Motor_9
   \   0000005E   0x2E58             CMP      R6,#+88
   \   00000060   0xD100             BNE      .+4
   \   00000062   0xE0B7             B        ??MFG_Motor_10
   \   00000064   0xE7D5             B        ??MFG_Motor_1
   \                     ??MFG_Motor_3: (+1)
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x.... 0x....      BL       Motor_Start
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x....             LDR      R1,??DataTable7
   \   00000070   0x6008             STR      R0,[R1, #+0]
   \                     ??MFG_Motor_11: (+1)
   \   00000072   0x....             LDR      R0,??DataTable7
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x280B             CMP      R0,#+11
   \   00000078   0xD3FB             BCC      ??MFG_Motor_11
   \   0000007A   0x....             LDR      R0,??DataTable7
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \                     ??MFG_Motor_12: (+1)
   \   0000007E   0x....             LDR      R1,??DataTable7
   \   00000080   0x6809             LDR      R1,[R1, #+0]
   \   00000082   0x4281             CMP      R1,R0
   \   00000084   0xD0FB             BEQ      ??MFG_Motor_12
   \   00000086   0x.... 0x....      BL       Timer2_Count
   \   0000008A   0x0007             MOVS     R7,R0
   \   0000008C   0x....             LDR      R0,??DataTable7_1
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \                     ??MFG_Motor_13: (+1)
   \   00000090   0x....             LDR      R1,??DataTable7_1
   \   00000092   0x6809             LDR      R1,[R1, #+0]
   \   00000094   0x4281             CMP      R1,R0
   \   00000096   0xD0FB             BEQ      ??MFG_Motor_13
   \   00000098   0x.... 0x....      BL       Timer2_Count
   \   0000009C   0x0006             MOVS     R6,R0
   \   0000009E   0x....             LDR      R0,??DataTable7
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \                     ??MFG_Motor_14: (+1)
   \   000000A2   0x....             LDR      R1,??DataTable7
   \   000000A4   0x6809             LDR      R1,[R1, #+0]
   \   000000A6   0x4281             CMP      R1,R0
   \   000000A8   0xD0FB             BEQ      ??MFG_Motor_14
   \   000000AA   0x.... 0x....      BL       Timer2_Count
   \   000000AE   0x0005             MOVS     R5,R0
   \   000000B0   0x.... 0x....      BL       Motor_Stop
   \   000000B4   0xB2AD             UXTH     R5,R5
   \   000000B6   0xB2B6             UXTH     R6,R6
   \   000000B8   0x1BAA             SUBS     R2,R5,R6
   \   000000BA   0xB2B6             UXTH     R6,R6
   \   000000BC   0xB2BF             UXTH     R7,R7
   \   000000BE   0x1BF1             SUBS     R1,R6,R7
   \   000000C0   0x....             LDR      R0,??DataTable7_2
   \   000000C2   0x.... 0x....      BL       printf
   \   000000C6   0xB2AD             UXTH     R5,R5
   \   000000C8   0x002B             MOVS     R3,R5
   \   000000CA   0xB2B6             UXTH     R6,R6
   \   000000CC   0x0032             MOVS     R2,R6
   \   000000CE   0xB2BF             UXTH     R7,R7
   \   000000D0   0x0039             MOVS     R1,R7
   \   000000D2   0x....             LDR      R0,??DataTable7_3
   \   000000D4   0x.... 0x....      BL       printf
   \   000000D8   0xE79E             B        ??MFG_Motor_2
   \                     ??MFG_Motor_4: (+1)
   \   000000DA   0x2000             MOVS     R0,#+0
   \   000000DC   0x....             LDR      R1,??DataTable6
   \   000000DE   0x7008             STRB     R0,[R1, #+0]
   \   000000E0   0x2202             MOVS     R2,#+2
   \   000000E2   0x....             LDR      R1,??DataTable6
   \   000000E4   0x2060             MOVS     R0,#+96
   \   000000E6   0x.... 0x....      BL       MFG_I2C_ReadBuffer
   \   000000EA   0x2202             MOVS     R2,#+2
   \   000000EC   0x....             LDR      R1,??DataTable7_4
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x.... 0x....      BL       dumpRegData
   \   000000F4   0xE790             B        ??MFG_Motor_2
   \                     ??MFG_Motor_5: (+1)
   \   000000F6   0x....             LDR      R0,??DataTable7_5
   \   000000F8   0x7800             LDRB     R0,[R0, #+0]
   \   000000FA   0x1E45             SUBS     R5,R0,#+1
   \                     ??MFG_Motor_15: (+1)
   \   000000FC   0x....             LDR      R0,??DataTable7_5
   \   000000FE   0x7800             LDRB     R0,[R0, #+0]
   \   00000100   0xB2ED             UXTB     R5,R5
   \   00000102   0x4285             CMP      R5,R0
   \   00000104   0xD017             BEQ      ??MFG_Motor_16
   \   00000106   0x....             LDR      R0,??DataTable7_5
   \   00000108   0x7805             LDRB     R5,[R0, #+0]
   \   0000010A   0x2001             MOVS     R0,#+1
   \   0000010C   0x.... 0x....      BL       TS_TouchLED
   \   00000110   0x2800             CMP      R0,#+0
   \   00000112   0xD010             BEQ      ??MFG_Motor_16
   \   00000114   0x0020             MOVS     R0,R4
   \   00000116   0x2401             MOVS     R4,#+1
   \   00000118   0x4044             EORS     R4,R4,R0
   \   0000011A   0x.... 0x....      BL       Timer2_Start
   \   0000011E   0xB2E4             UXTB     R4,R4
   \   00000120   0x2C01             CMP      R4,#+1
   \   00000122   0xD101             BNE      ??MFG_Motor_17
   \   00000124   0x2001             MOVS     R0,#+1
   \   00000126   0xE000             B        ??MFG_Motor_18
   \                     ??MFG_Motor_17: (+1)
   \   00000128   0x2000             MOVS     R0,#+0
   \                     ??MFG_Motor_18: (+1)
   \   0000012A   0x2146             MOVS     R1,#+70
   \   0000012C   0xB2C0             UXTB     R0,R0
   \   0000012E   0x.... 0x....      BL       Motor_Lock
   \   00000132   0x.... 0x....      BL       Timer2_Stop
   \                     ??MFG_Motor_16: (+1)
   \   00000136   0x.... 0x....      BL       UART0_RxWaiting
   \   0000013A   0x2800             CMP      R0,#+0
   \   0000013C   0xD0DE             BEQ      ??MFG_Motor_15
   \   0000013E   0x.... 0x....      BL       getchar
   \   00000142   0x0006             MOVS     R6,R0
   \   00000144   0x2E1B             CMP      R6,#+27
   \   00000146   0xD1D9             BNE      ??MFG_Motor_15
   \   00000148   0xE766             B        ??MFG_Motor_2
   \                     ??MFG_Motor_6: (+1)
   \   0000014A   0x....             LDR      R0,??DataTable7_6
   \   0000014C   0x.... 0x....      BL       printf
   \   00000150   0xE004             B        ??MFG_Motor_19
   \                     ??MFG_Motor_20: (+1)
   \   00000152   0x2000             MOVS     R0,#+0
   \                     ??MFG_Motor_21: (+1)
   \   00000154   0x2146             MOVS     R1,#+70
   \   00000156   0xB2C0             UXTB     R0,R0
   \   00000158   0x.... 0x....      BL       Motor_Lock
   \                     ??MFG_Motor_19: (+1)
   \   0000015C   0x.... 0x....      BL       UART0_RxWaiting
   \   00000160   0x2800             CMP      R0,#+0
   \   00000162   0xD0FB             BEQ      ??MFG_Motor_19
   \   00000164   0x.... 0x....      BL       getchar
   \   00000168   0xB2C0             UXTB     R0,R0
   \   0000016A   0x.... 0x....      BL       makeUpperCase
   \   0000016E   0x0006             MOVS     R6,R0
   \   00000170   0x2E1B             CMP      R6,#+27
   \   00000172   0xD100             BNE      .+4
   \   00000174   0xE750             B        ??MFG_Motor_2
   \                     ??MFG_Motor_22: (+1)
   \   00000176   0x2E4C             CMP      R6,#+76
   \   00000178   0xD1F0             BNE      ??MFG_Motor_19
   \   0000017A   0x0020             MOVS     R0,R4
   \   0000017C   0x2401             MOVS     R4,#+1
   \   0000017E   0x4044             EORS     R4,R4,R0
   \   00000180   0xB2E4             UXTB     R4,R4
   \   00000182   0x2C01             CMP      R4,#+1
   \   00000184   0xD1E5             BNE      ??MFG_Motor_20
   \   00000186   0x2001             MOVS     R0,#+1
   \   00000188   0xE7E4             B        ??MFG_Motor_21
   \                     ??MFG_Motor_7: (+1)
   \   0000018A   0x....             LDR      R0,??DataTable7_7
   \   0000018C   0x.... 0x....      BL       printf
   \   00000190   0xE004             B        ??MFG_Motor_23
   \                     ??MFG_Motor_24: (+1)
   \   00000192   0x2000             MOVS     R0,#+0
   \                     ??MFG_Motor_25: (+1)
   \   00000194   0x210A             MOVS     R1,#+10
   \   00000196   0xB2C0             UXTB     R0,R0
   \   00000198   0x.... 0x....      BL       Motor_Lock
   \                     ??MFG_Motor_23: (+1)
   \   0000019C   0x.... 0x....      BL       UART0_RxWaiting
   \   000001A0   0x2800             CMP      R0,#+0
   \   000001A2   0xD0FB             BEQ      ??MFG_Motor_23
   \   000001A4   0x.... 0x....      BL       getchar
   \   000001A8   0x0006             MOVS     R6,R0
   \   000001AA   0x2E1B             CMP      R6,#+27
   \   000001AC   0xD100             BNE      .+4
   \   000001AE   0xE733             B        ??MFG_Motor_2
   \                     ??MFG_Motor_26: (+1)
   \   000001B0   0x2E3D             CMP      R6,#+61
   \   000001B2   0xD001             BEQ      ??MFG_Motor_27
   \   000001B4   0x2E2D             CMP      R6,#+45
   \   000001B6   0xD1F1             BNE      ??MFG_Motor_23
   \                     ??MFG_Motor_27: (+1)
   \   000001B8   0x2E3D             CMP      R6,#+61
   \   000001BA   0xD1EA             BNE      ??MFG_Motor_24
   \   000001BC   0x2001             MOVS     R0,#+1
   \   000001BE   0xE7E9             B        ??MFG_Motor_25
   \                     ??MFG_Motor_8: (+1)
   \   000001C0   0x....             LDR      R1,??DataTable6
   \   000001C2   0x2060             MOVS     R0,#+96
   \   000001C4   0x.... 0x....      BL       MFG_I2C_Read
   \   000001C8   0xE726             B        ??MFG_Motor_2
   \                     ??MFG_Motor_9: (+1)
   \   000001CA   0x....             LDR      R1,??DataTable6
   \   000001CC   0x2060             MOVS     R0,#+96
   \   000001CE   0x.... 0x....      BL       MFG_I2C_Write
   \   000001D2   0xE721             B        ??MFG_Motor_2
   \                     ??MFG_Motor_10: (+1)
   \   000001D4   0x....             ADR      R0,??DataTable6_2  ;; ">"
   \   000001D6   0x.... 0x....      BL       printf
   \   000001DA   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    535                   }
    536                }
    537          }
    538          
    539          
    540          /*
    541          ** Test menu for the touch sensor
    542          */

   \                                 In section .text, align 2, keep-with-next
    543          void
    544          MFG_Touch (void)
    545          {
   \                     MFG_Touch: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    546             int c;
    547          
    548                /* Start buffer out clear so default values are meaningful */
    549             memset (mfgBuffer, 0, sizeof(mfgBuffer));
   \   00000002   0x2181             MOVS     R1,#+129
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x....             LDR      R4,??DataTable8
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       __aeabi_memset
   \   0000000E   0xE005             B        ??MFG_Touch_0
    550             while (TRUE)
    551                {
    552                if (UART0_RxWaiting())
    553                   {
    554                   c = makeUpperCase(getchar());
    555                   printf("%c\n", c);
    556          
    557                   switch (c)
    558                      {
    559                      case 'A':
    560                         TS_ToggleLED(0xFC);
    561                         break;
    562          
    563                      case 'C':
    564                         mfgBuffer[0] = TS_GPIO_DATA;
    565                         I2C_Write (I2C_ADDR_TOUCH, mfgBuffer, 1, FALSE);
    566                         I2C_Read (I2C_ADDR_TOUCH, &mfgBuffer[1], 2);
    567          
    568                         if (getHexByte("Enter LED control byte (FC is all LED's ON)", &mfgBuffer[1]) == 0)
    569                            {
    570                            I2C_Write (I2C_ADDR_TOUCH, mfgBuffer, 2, TRUE);
    571                            }
    572                         break;
    573          
    574                      case 'D':
    575                         mfgBuffer[0] = TS_TOUCH_STATUS;
    576                         MFG_I2C_ReadBuffer (I2C_ADDR_TOUCH, mfgBuffer, 128);
    577                         dumpRegData (TS_TOUCH_STATUS, &mfgBuffer[1], 128);
    578                         break;
    579          
    580                      case 'L':
    581                         {
    582                         unsigned int latch;
    583          
    584                         printf("Hit ESC to exit test\n");
    585                         latch = runtimeSeconds;
    586                         while (TRUE)
    587                            {
    588                            if (UART0_RxWaiting())
    589                               {
    590                               c = getchar();
    591                               if (c == ESCAPE_CHAR)
    592                                  {
    593                                  break;
    594                                  }
    595                               }
    596          
    597                            if (latch != runtimeSeconds)
    598                               {
    599                               latch = runtimeSeconds;
    600                               TS_ToggleTestLED ();
    601                               }
    602                            }
    603                         break;
    604                         }
    605          
    606                      case 'R':
    607                         MFG_I2C_Read (I2C_ADDR_TOUCH, mfgBuffer);
    608                         break;
    609          
    610                      case 'T':
    611                         {
    612                         uint8_t latch_irq;
    613          
    614                            /* Force the code to read the status and clear the counter at least once */
    615                         latch_irq = TS_IRQCounter - 1;
    616                         while (TRUE)
    617                            {
    618                            if (latch_irq != TS_IRQCounter)
    619                               {
    620                               latch_irq = TS_IRQCounter;
    621          
    622                               TS_TouchLED (FALSE);
    623                               }
    624          
    625                            if (UART0_RxWaiting())
    626                               {
    627                               c = getchar();
    628                               if (c == ESCAPE_CHAR)
    629                                  {
    630                                  break;
    631                                  }
    632                               }
    633                            }
    634                         break;
    635                         }
    636          
    637                      case 'W':
    638                         MFG_I2C_Write (I2C_ADDR_TOUCH, mfgBuffer);
    639                         break;
    640          
    641                      case 'X':
    642                         printf(">");
    643                         return;
    644          
    645                      default:
    646                         printf (
    647                            "Command Help\n"
    648                            "  C - Control LED State\n"
    649                            "  D - Dump Touch Sensor Registers\n"
    650                            "  L - LED Spin Test\n"
    651                            "  R - Read Register\n"
    652                            "  T - Touch Test\n"
    653                            "  W - Write Register\n"
    654                            "  X - Return to main menu\n"
    655                            "  ? - Displays this message\n");
   \                     ??MFG_Touch_1: (+1)
   \   00000010   0x....             LDR      R0,??DataTable8_1
   \   00000012   0x.... 0x....      BL       printf
    656                         break;
    657                      }
    658          
    659                   printf(">");
   \                     ??MFG_Touch_2: (+1)
   \   00000016   0x....             ADR      R0,??DataTable8_2  ;; ">"
   \   00000018   0x.... 0x....      BL       printf
   \                     ??MFG_Touch_0: (+1)
   \   0000001C   0x.... 0x....      BL       UART0_RxWaiting
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD0FB             BEQ      ??MFG_Touch_0
   \   00000024   0x.... 0x....      BL       getchar
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x.... 0x....      BL       makeUpperCase
   \   0000002E   0x0004             MOVS     R4,R0
   \   00000030   0x0021             MOVS     R1,R4
   \   00000032   0x....             ADR      R0,??DataTable8_3  ;; "%c\n"
   \   00000034   0x.... 0x....      BL       printf
   \   00000038   0x2C41             CMP      R4,#+65
   \   0000003A   0xD00E             BEQ      ??MFG_Touch_3
   \   0000003C   0x2C43             CMP      R4,#+67
   \   0000003E   0xD010             BEQ      ??MFG_Touch_4
   \   00000040   0x2C44             CMP      R4,#+68
   \   00000042   0xD029             BEQ      ??MFG_Touch_5
   \   00000044   0x2C4C             CMP      R4,#+76
   \   00000046   0xD035             BEQ      ??MFG_Touch_6
   \   00000048   0x2C52             CMP      R4,#+82
   \   0000004A   0xD04B             BEQ      ??MFG_Touch_7
   \   0000004C   0x2C54             CMP      R4,#+84
   \   0000004E   0xD04E             BEQ      ??MFG_Touch_8
   \   00000050   0x2C57             CMP      R4,#+87
   \   00000052   0xD063             BEQ      ??MFG_Touch_9
   \   00000054   0x2C58             CMP      R4,#+88
   \   00000056   0xD066             BEQ      ??MFG_Touch_10
   \   00000058   0xE7DA             B        ??MFG_Touch_1
   \                     ??MFG_Touch_3: (+1)
   \   0000005A   0x20FC             MOVS     R0,#+252
   \   0000005C   0x.... 0x....      BL       TS_ToggleLED
   \   00000060   0xE7D9             B        ??MFG_Touch_2
   \                     ??MFG_Touch_4: (+1)
   \   00000062   0x2075             MOVS     R0,#+117
   \   00000064   0x....             LDR      R1,??DataTable8
   \   00000066   0x7008             STRB     R0,[R1, #+0]
   \   00000068   0x2300             MOVS     R3,#+0
   \   0000006A   0x2201             MOVS     R2,#+1
   \   0000006C   0x....             LDR      R1,??DataTable8
   \   0000006E   0x205A             MOVS     R0,#+90
   \   00000070   0x.... 0x....      BL       I2C_Write
   \   00000074   0x2202             MOVS     R2,#+2
   \   00000076   0x....             LDR      R1,??DataTable7_4
   \   00000078   0x205A             MOVS     R0,#+90
   \   0000007A   0x.... 0x....      BL       I2C_Read
   \   0000007E   0x....             LDR      R1,??DataTable7_4
   \   00000080   0x....             LDR      R0,??DataTable8_4
   \   00000082   0x.... 0x....      BL       getHexByte
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD105             BNE      ??MFG_Touch_11
   \   0000008A   0x2301             MOVS     R3,#+1
   \   0000008C   0x2202             MOVS     R2,#+2
   \   0000008E   0x....             LDR      R1,??DataTable8
   \   00000090   0x205A             MOVS     R0,#+90
   \   00000092   0x.... 0x....      BL       I2C_Write
   \                     ??MFG_Touch_11: (+1)
   \   00000096   0xE7BE             B        ??MFG_Touch_2
   \                     ??MFG_Touch_5: (+1)
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x....             LDR      R1,??DataTable8
   \   0000009C   0x7008             STRB     R0,[R1, #+0]
   \   0000009E   0x2280             MOVS     R2,#+128
   \   000000A0   0x....             LDR      R1,??DataTable8
   \   000000A2   0x205A             MOVS     R0,#+90
   \   000000A4   0x.... 0x....      BL       MFG_I2C_ReadBuffer
   \   000000A8   0x2280             MOVS     R2,#+128
   \   000000AA   0x....             LDR      R1,??DataTable7_4
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x.... 0x....      BL       dumpRegData
   \   000000B2   0xE7B0             B        ??MFG_Touch_2
   \                     ??MFG_Touch_6: (+1)
   \   000000B4   0x....             LDR      R0,??DataTable8_5
   \   000000B6   0x.... 0x....      BL       printf
   \   000000BA   0x....             LDR      R0,??DataTable8_6
   \   000000BC   0x6805             LDR      R5,[R0, #+0]
   \   000000BE   0xE007             B        ??MFG_Touch_12
   \                     ??MFG_Touch_13: (+1)
   \   000000C0   0x....             LDR      R0,??DataTable8_6
   \   000000C2   0x6800             LDR      R0,[R0, #+0]
   \   000000C4   0x4285             CMP      R5,R0
   \   000000C6   0xD003             BEQ      ??MFG_Touch_12
   \   000000C8   0x....             LDR      R0,??DataTable8_6
   \   000000CA   0x6805             LDR      R5,[R0, #+0]
   \   000000CC   0x.... 0x....      BL       TS_ToggleTestLED
   \                     ??MFG_Touch_12: (+1)
   \   000000D0   0x.... 0x....      BL       UART0_RxWaiting
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD0F3             BEQ      ??MFG_Touch_13
   \   000000D8   0x.... 0x....      BL       getchar
   \   000000DC   0x0004             MOVS     R4,R0
   \   000000DE   0x2C1B             CMP      R4,#+27
   \   000000E0   0xD1EE             BNE      ??MFG_Touch_13
   \   000000E2   0xE798             B        ??MFG_Touch_2
   \                     ??MFG_Touch_7: (+1)
   \   000000E4   0x....             LDR      R1,??DataTable8
   \   000000E6   0x205A             MOVS     R0,#+90
   \   000000E8   0x.... 0x....      BL       MFG_I2C_Read
   \   000000EC   0xE793             B        ??MFG_Touch_2
   \                     ??MFG_Touch_8: (+1)
   \   000000EE   0x....             LDR      R0,??DataTable7_5
   \   000000F0   0x7800             LDRB     R0,[R0, #+0]
   \   000000F2   0x1E45             SUBS     R5,R0,#+1
   \                     ??MFG_Touch_14: (+1)
   \   000000F4   0x....             LDR      R0,??DataTable7_5
   \   000000F6   0x7800             LDRB     R0,[R0, #+0]
   \   000000F8   0xB2ED             UXTB     R5,R5
   \   000000FA   0x4285             CMP      R5,R0
   \   000000FC   0xD004             BEQ      ??MFG_Touch_15
   \   000000FE   0x....             LDR      R0,??DataTable7_5
   \   00000100   0x7805             LDRB     R5,[R0, #+0]
   \   00000102   0x2000             MOVS     R0,#+0
   \   00000104   0x.... 0x....      BL       TS_TouchLED
   \                     ??MFG_Touch_15: (+1)
   \   00000108   0x.... 0x....      BL       UART0_RxWaiting
   \   0000010C   0x2800             CMP      R0,#+0
   \   0000010E   0xD0F1             BEQ      ??MFG_Touch_14
   \   00000110   0x.... 0x....      BL       getchar
   \   00000114   0x0004             MOVS     R4,R0
   \   00000116   0x2C1B             CMP      R4,#+27
   \   00000118   0xD1EC             BNE      ??MFG_Touch_14
   \   0000011A   0xE77C             B        ??MFG_Touch_2
   \                     ??MFG_Touch_9: (+1)
   \   0000011C   0x....             LDR      R1,??DataTable8
   \   0000011E   0x205A             MOVS     R0,#+90
   \   00000120   0x.... 0x....      BL       MFG_I2C_Write
   \   00000124   0xE777             B        ??MFG_Touch_2
   \                     ??MFG_Touch_10: (+1)
   \   00000126   0x....             ADR      R0,??DataTable8_2  ;; ">"
   \   00000128   0x.... 0x....      BL       printf
   \   0000012C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    660                   }
    661                }
    662          }
    663          
    664          
    665          /*
    666          ** MFG Mode
    667          **
    668          ** Not quite sure what to do here yet. I can think of a couple options though:
    669          **
    670          ** Option #1: Keep this mode always available and active in the radio. In theory the device is locked
    671          **    up and this is not reachable. As a general rule of thumb though I think this is probably not a
    672          **    good practice. If this option is pursued then this routine has to be setup to be constantly called
    673          **    because it can't be allowed to hold on to the only task the device has.
    674          **
    675          ** Option #2: Make this a complete mode. Meaning if the device is configured or told to go into this mode
    676          **    then it stays in this mode and now controls all features. This is best for development, testing, and
    677          **    configuration because there is nothing else to compete against. The only downside is we need to
    678          **    come up with a way to determine if the mode should run or not.
    679          **
    680          **    Probably want some NV flag that defaults to this mode active. Then during manufacturing this flag
    681          **    gets cleared. Downside is if something goes wrong, unit is now dead.
    682          **
    683          **    A better option maybe would be by default the mode is off and even for manufacturing they need to
    684          **    find a way to enable this mode.
    685          **
    686          **    TODO: Figure out how to configure and operate this mode.
    687          */

   \                                 In section .text, align 2, keep-with-next
    688          void
    689          MFG_Mode (void)
    690          {
   \                     MFG_Mode: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    691             int c;
    692          
    693                /* Always put out the manufacturing mode banner */
    694             printf("\nSkylock Version %s %s\n", PartNumber, PART_DATECODE);
   \   00000002   0x....             LDR      R2,??DataTable8_7
   \   00000004   0x....             LDR      R1,??DataTable8_8
   \   00000006   0x....             LDR      R0,??DataTable8_9
   \   00000008   0x.... 0x....      BL       printf
    695          
    696                /* Give user 10 seconds to enter in the correct access code - one chance */
    697             while ((runtimeSeconds < PROMPT_TIMEOUT) && (UART0_RxWaiting() < 2));
   \                     ??MFG_Mode_0: (+1)
   \   0000000C   0x....             LDR      R0,??DataTable8_6
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2804             CMP      R0,#+4
   \   00000012   0xD203             BCS      ??MFG_Mode_1
   \   00000014   0x.... 0x....      BL       UART0_RxWaiting
   \   00000018   0x2802             CMP      R0,#+2
   \   0000001A   0xDBF7             BLT      ??MFG_Mode_0
    698          
    699             if ((runtimeSeconds >= PROMPT_TIMEOUT) || (getchar() != 'm') || (getchar() != 'f'))
   \                     ??MFG_Mode_1: (+1)
   \   0000001C   0x....             LDR      R0,??DataTable8_6
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x2804             CMP      R0,#+4
   \   00000022   0xD207             BCS      ??MFG_Mode_2
   \   00000024   0x.... 0x....      BL       getchar
   \   00000028   0x286D             CMP      R0,#+109
   \   0000002A   0xD103             BNE      ??MFG_Mode_2
   \   0000002C   0x.... 0x....      BL       getchar
   \   00000030   0x2866             CMP      R0,#+102
   \   00000032   0xD000             BEQ      ??MFG_Mode_3
    700                return;
   \                     ??MFG_Mode_2: (+1)
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
    701          
    702                /* Let timer run while we are in Diagnostic mode */
    703             Timer2_Start();
   \                     ??MFG_Mode_3: (+1)
   \   00000036   0x.... 0x....      BL       Timer2_Start
    704          
    705             printf("Manufacturing Interface Active\n>");
   \   0000003A   0x....             LDR      R0,??DataTable8_10
   \   0000003C   0x.... 0x....      BL       printf
   \   00000040   0xE004             B        ??MFG_Mode_4
    706          
    707             /*
    708             ** When we get a watchdog setup, then ask user how long they want to live in this mode before watchdog
    709             ** will kill them.
    710             */
    711          
    712             while (TRUE)
    713                {
    714                if (UART0_RxWaiting())
    715                   {
    716                   c = makeUpperCase(getchar());
    717                   printf("%c\n", c);
    718          
    719                   switch (c)
    720                      {
    721                      case 'A':
    722                         printf(">");
   \                     ??MFG_Mode_5: (+1)
   \   00000042   0x....             ADR      R0,??DataTable8_2  ;; ">"
   \   00000044   0x.... 0x....      BL       printf
    723                         MFG_Accel();
   \   00000048   0x.... 0x....      BL       MFG_Accel
    724                         break;
   \                     ??MFG_Mode_4: (+1)
   \   0000004C   0x.... 0x....      BL       UART0_RxWaiting
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD0FB             BEQ      ??MFG_Mode_4
   \   00000054   0x.... 0x....      BL       getchar
   \   00000058   0xB2C0             UXTB     R0,R0
   \   0000005A   0x.... 0x....      BL       makeUpperCase
   \   0000005E   0x0004             MOVS     R4,R0
   \   00000060   0x0021             MOVS     R1,R4
   \   00000062   0x....             ADR      R0,??DataTable8_3  ;; "%c\n"
   \   00000064   0x.... 0x....      BL       printf
   \   00000068   0x2C41             CMP      R4,#+65
   \   0000006A   0xD0EA             BEQ      ??MFG_Mode_5
   \   0000006C   0x2C44             CMP      R4,#+68
   \   0000006E   0xD008             BEQ      ??MFG_Mode_6
   \   00000070   0x2C4D             CMP      R4,#+77
   \   00000072   0xD01D             BEQ      ??MFG_Mode_7
   \   00000074   0x2C52             CMP      R4,#+82
   \   00000076   0xD021             BEQ      ??MFG_Mode_8
   \   00000078   0x2C53             CMP      R4,#+83
   \   0000007A   0xD023             BEQ      ??MFG_Mode_9
   \   0000007C   0x2C54             CMP      R4,#+84
   \   0000007E   0xD027             BEQ      ??MFG_Mode_10
   \   00000080   0xE02C             B        ??MFG_Mode_11
    725          
    726                      case 'D':
    727                         printf("FICR\n");
   \                     ??MFG_Mode_6: (+1)
   \   00000082   0x....             LDR      R0,??DataTable8_11
   \   00000084   0x.... 0x....      BL       printf
    728                         dumpRegData (0, (unsigned char *) ADDR_FICR, 256);
   \   00000088   0x2280             MOVS     R2,#+128
   \   0000008A   0x0052             LSLS     R2,R2,#+1        ;; #+256
   \   0000008C   0x2180             MOVS     R1,#+128
   \   0000008E   0x0549             LSLS     R1,R1,#+21       ;; #+268435456
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x.... 0x....      BL       dumpRegData
    729          
    730                         printf("\nUICR\n");
   \   00000096   0x....             LDR      R0,??DataTable8_12
   \   00000098   0x.... 0x....      BL       printf
    731                         dumpRegData (0, (unsigned char *) ADDR_UICR, 256);
   \   0000009C   0x2280             MOVS     R2,#+128
   \   0000009E   0x0052             LSLS     R2,R2,#+1        ;; #+256
   \   000000A0   0x....             LDR      R1,??DataTable8_13  ;; 0x10001000
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x.... 0x....      BL       dumpRegData
    732                         printf(">");
   \   000000A8   0x....             ADR      R0,??DataTable8_2  ;; ">"
   \   000000AA   0x.... 0x....      BL       printf
    733                         break;
   \   000000AE   0xE7CD             B        ??MFG_Mode_4
    734          
    735                      case 'M':
    736                         printf(">");
   \                     ??MFG_Mode_7: (+1)
   \   000000B0   0x....             ADR      R0,??DataTable8_2  ;; ">"
   \   000000B2   0x.... 0x....      BL       printf
    737                         MFG_Motor();
   \   000000B6   0x.... 0x....      BL       MFG_Motor
    738                         break;
   \   000000BA   0xE7C7             B        ??MFG_Mode_4
    739          
    740                      case 'R':
    741                         printf("Hey, need a reboot command here\n>");
   \                     ??MFG_Mode_8: (+1)
   \   000000BC   0x....             LDR      R0,??DataTable8_14
   \   000000BE   0x.... 0x....      BL       printf
    742                         break;
   \   000000C2   0xE7C3             B        ??MFG_Mode_4
    743          
    744                      case 'S':
    745                         printf(">");
   \                     ??MFG_Mode_9: (+1)
   \   000000C4   0x....             ADR      R0,??DataTable8_2  ;; ">"
   \   000000C6   0x.... 0x....      BL       printf
    746                         MFG_Magnet();
   \   000000CA   0x.... 0x....      BL       MFG_Magnet
    747                         break;
   \   000000CE   0xE7BD             B        ??MFG_Mode_4
    748          
    749                      case 'T':
    750                         printf(">");
   \                     ??MFG_Mode_10: (+1)
   \   000000D0   0x....             ADR      R0,??DataTable8_2  ;; ">"
   \   000000D2   0x.... 0x....      BL       printf
    751                         MFG_Touch();
   \   000000D6   0x.... 0x....      BL       MFG_Touch
    752                         break;
   \   000000DA   0xE7B7             B        ??MFG_Mode_4
    753          
    754                      default:
    755                         printf (
    756                            "Command Help\n"
    757                            "  A - Accelerometer\n"
    758                            "  D - Dump FICR and UICR NV Memory\n"
    759                            "  M - Motor\n"
    760                            "  R - Reboot\n"
    761                            "  S - Magnetic Sensor\n"
    762                            "  T - Touch Sensor\n"
    763                            "  ? - Displays this message\n>");
   \                     ??MFG_Mode_11: (+1)
   \   000000DC   0x....             LDR      R0,??DataTable8_15
   \   000000DE   0x.... 0x....      BL       printf
   \   000000E2   0xE7B3             B        ??MFG_Mode_4
    764                      }
    765                   }
    766                }
    767          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x7C 0x20          DC8      0x7C, 0x20, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x2D 0x2D          DC8      "-- "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x25 0x63          DC8      0x25, 0x63, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x08 0x20          DC8      "\b \b"
   \              0x08 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     mfgBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     ?_18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x3E 0x00          DC8      ">",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x25 0x63          DC8      "%c\n"
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     mfgBuffer+0x1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     mfgBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     ?_23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x3E 0x00          DC8      ">",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x25 0x63          DC8      "%c\n"
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     MOTOR_Enc01Events

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     MOTOR_Enc02Events

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     mfgBuffer+0x1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     TS_IRQCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     ?_22

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     mfgBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     ?_26

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x3E 0x00          DC8      ">",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x25 0x63          DC8      "%c\n"
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     ?_25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     runtimeSeconds

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     ?_28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     PartNumber

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     ?_27

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     ?_29

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x........         DC32     ?_30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x........         DC32     ?_31

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x10001000         DC32     0x10001000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x........         DC32     ?_32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x........         DC32     ?_33

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x20 0x20          DC8 20H, 20H, 20H, 20H, 20H, 20H, 30H, 20H
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x30 0x20    
   \   00000008   0x20 0x31          DC8 20H, 31H, 20H, 20H, 32H, 20H, 20H, 33H
   \              0x20 0x20    
   \              0x32 0x20    
   \              0x20 0x33    
   \   00000010   0x20 0x20          DC8 20H, 20H, 34H, 20H, 20H, 35H, 20H, 20H
   \              0x34 0x20    
   \              0x20 0x35    
   \              0x20 0x20    
   \   00000018   0x36 0x20          DC8 36H, 20H, 20H, 37H, 20H, 20H, 38H, 20H
   \              0x20 0x37    
   \              0x20 0x20    
   \              0x38 0x20    
   \   00000020   0x20 0x39          DC8 20H, 39H, 20H, 20H, 41H, 20H, 20H, 42H
   \              0x20 0x20    
   \              0x41 0x20    
   \              0x20 0x42    
   \   00000028   0x20 0x20          DC8 20H, 20H, 43H, 20H, 20H, 44H, 20H, 20H
   \              0x43 0x20    
   \              0x20 0x44    
   \              0x20 0x20    
   \   00000030   0x45 0x20          DC8 45H, 20H, 20H, 46H, 0
   \              0x20 0x46    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x0A 0x20          DC8 0AH, 20H, 20H, 20H, 2BH, 2DH, 2DH, 2DH
   \              0x20 0x20    
   \              0x2B 0x2D    
   \              0x2D 0x2D    
   \   00000008   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000010   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000018   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000020   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000028   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000030   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2BH, 0
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2B 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x0A 0x25          DC8 "\012%02X | "
   \              0x30 0x32    
   \              0x58 0x20    
   \              0x7C 0x20    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x25 0x30          DC8 "%02X "
   \              0x32 0x58    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x2D 0x2D          DC8 "-- "
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x7C 0x20          DC8 "| "
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x0A 0x20          DC8 0AH, 20H, 20H, 20H, 2BH, 2DH, 2DH, 2DH
   \              0x20 0x20    
   \              0x2B 0x2D    
   \              0x2D 0x2D    
   \   00000008   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000010   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000018   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000020   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000028   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000030   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2BH, 0AH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2B 0x0A    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x25 0x73          DC8 "%s: %02X"
   \              0x3A 0x20    
   \              0x25 0x30    
   \              0x32 0x58    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x25 0x30          DC8 "%02X"
   \              0x32 0x58    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x08 0x08          DC8 "\010\010  \010\010"
   \              0x20 0x20    
   \              0x08 0x08    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 2
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 4
   \   00000000   0x08 0x20          DC8 "\010 \010"
   \              0x08 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x63          DC8 "%c"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x45 0x6E          DC8 "Enter register address (ESC aborts)"
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x67 0x69    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x20 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x20 0x28    
   \              0x45 0x53    
   \              0x43 0x20    
   \              0x61 0x62    
   \              0x6F 0x72    
   \              0x74 0x73    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x52 0x65          DC8 "Register %02X: %02X\012"
   \              0x67 0x69    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x58 0x3A    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x58 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x45 0x6E          DC8 "Enter value to write (ESC aborts)"
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x28    
   \              0x45 0x53    
   \              0x43 0x20    
   \              0x61 0x62    
   \              0x6F 0x72    
   \              0x74 0x73    
   \              0x29 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x63          DC8 "%c\012"
   \              0x0A 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x3E 0x00          DC8 ">"

   \                                 In section .rodata, align 4
   \                     ?_18:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6DH, 6DH, 61H, 6EH, 64H, 20H
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \   00000008   0x48 0x65          DC8 48H, 65H, 6CH, 70H, 0AH, 20H, 20H, 44H
   \              0x6C 0x70    
   \              0x0A 0x20    
   \              0x20 0x44    
   \   00000010   0x20 0x2D          DC8 20H, 2DH, 20H, 44H, 75H, 6DH, 70H, 20H
   \              0x20 0x44    
   \              0x75 0x6D    
   \              0x70 0x20    
   \   00000018   0x4D 0x6F          DC8 4DH, 6FH, 74H, 6FH, 72H, 20H, 52H, 65H
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x52 0x65    
   \   00000020   0x67 0x69          DC8 67H, 69H, 73H, 74H, 65H, 72H, 73H, 0AH
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x73 0x0A    
   \   00000028   0x20 0x20          DC8 20H, 20H, 52H, 20H, 2DH, 20H, 52H, 65H
   \              0x52 0x20    
   \              0x2D 0x20    
   \              0x52 0x65    
   \   00000030   0x61 0x64          DC8 61H, 64H, 20H, 52H, 65H, 67H, 69H, 73H
   \              0x20 0x52    
   \              0x65 0x67    
   \              0x69 0x73    
   \   00000038   0x74 0x65          DC8 74H, 65H, 72H, 0AH, 20H, 20H, 57H, 20H
   \              0x72 0x0A    
   \              0x20 0x20    
   \              0x57 0x20    
   \   00000040   0x2D 0x20          DC8 2DH, 20H, 57H, 72H, 69H, 74H, 65H, 20H
   \              0x57 0x72    
   \              0x69 0x74    
   \              0x65 0x20    
   \   00000048   0x52 0x65          DC8 52H, 65H, 67H, 69H, 73H, 74H, 65H, 72H
   \              0x67 0x69    
   \              0x73 0x74    
   \              0x65 0x72    
   \   00000050   0x0A 0x20          DC8 0AH, 20H, 20H, 58H, 20H, 2DH, 20H, 52H
   \              0x20 0x58    
   \              0x20 0x2D    
   \              0x20 0x52    
   \   00000058   0x65 0x74          DC8 65H, 74H, 75H, 72H, 6EH, 20H, 74H, 6FH
   \              0x75 0x72    
   \              0x6E 0x20    
   \              0x74 0x6F    
   \   00000060   0x20 0x6D          DC8 20H, 6DH, 61H, 69H, 6EH, 20H, 6DH, 65H
   \              0x61 0x69    
   \              0x6E 0x20    
   \              0x6D 0x65    
   \   00000068   0x6E 0x75          DC8 6EH, 75H, 0AH, 20H, 20H, 3FH, 20H, 2DH
   \              0x0A 0x20    
   \              0x20 0x3F    
   \              0x20 0x2D    
   \   00000070   0x20 0x44          DC8 20H, 44H, 69H, 73H, 70H, 6CH, 61H, 79H
   \              0x69 0x73    
   \              0x70 0x6C    
   \              0x61 0x79    
   \   00000078   0x73 0x20          DC8 73H, 20H, 74H, 68H, 69H, 73H, 20H, 6DH
   \              0x74 0x68    
   \              0x69 0x73    
   \              0x20 0x6D    
   \   00000080   0x65 0x73          DC8 65H, 73H, 73H, 61H, 67H, 65H, 0AH, 0
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x74 0x31          DC8 "t1->t2 is %u  and t2->t3 is %u\012"
   \              0x2D 0x3E    
   \              0x74 0x32    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x25 0x75    
   \              0x20 0x20    
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x74 0x32    
   \              0x2D 0x3E    
   \              0x74 0x33    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x25 0x75    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x74 0x31          DC8 "t1 t2 t3 is %u %u %u\012"
   \              0x20 0x74    
   \              0x32 0x20    
   \              0x74 0x33    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x25 0x75    
   \              0x20 0x25    
   \              0x75 0x20    
   \              0x25 0x75    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x55 0x73          DC8 "Use L to toggle lock position, ESC to exit\012"
   \              0x65 0x20    
   \              0x4C 0x20    
   \              0x74 0x6F    
   \              0x20 0x74    
   \              0x6F 0x67    
   \              0x67 0x6C    
   \              0x65 0x20    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x20 0x70    
   \              0x6F 0x73    
   \              0x69 0x74    
   \              0x69 0x6F    
   \              0x6E 0x2C    
   \              0x20 0x45    
   \              0x53 0x43    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x65 0x78    
   \              0x69 0x74    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x55 0x73          DC8 "Use = or - to move motor, ESC to exit\012"
   \              0x65 0x20    
   \              0x3D 0x20    
   \              0x6F 0x72    
   \              0x20 0x2D    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x6D 0x6F    
   \              0x76 0x65    
   \              0x20 0x6D    
   \              0x6F 0x74    
   \              0x6F 0x72    
   \              0x2C 0x20    
   \              0x45 0x53    
   \              0x43 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6DH, 6DH, 61H, 6EH, 64H, 20H
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \   00000008   0x48 0x65          DC8 48H, 65H, 6CH, 70H, 0AH, 20H, 20H, 43H
   \              0x6C 0x70    
   \              0x0A 0x20    
   \              0x20 0x43    
   \   00000010   0x20 0x2D          DC8 20H, 2DH, 20H, 43H, 61H, 6CH, 69H, 62H
   \              0x20 0x43    
   \              0x61 0x6C    
   \              0x69 0x62    
   \   00000018   0x72 0x61          DC8 72H, 61H, 74H, 65H, 20H, 44H, 69H, 72H
   \              0x74 0x65    
   \              0x20 0x44    
   \              0x69 0x72    
   \   00000020   0x65 0x63          DC8 65H, 63H, 74H, 69H, 6FH, 6EH, 0AH, 20H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x0A 0x20    
   \   00000028   0x20 0x44          DC8 20H, 44H, 20H, 2DH, 20H, 44H, 75H, 6DH
   \              0x20 0x2D    
   \              0x20 0x44    
   \              0x75 0x6D    
   \   00000030   0x70 0x20          DC8 70H, 20H, 4DH, 6FH, 74H, 6FH, 72H, 20H
   \              0x4D 0x6F    
   \              0x74 0x6F    
   \              0x72 0x20    
   \   00000038   0x52 0x65          DC8 52H, 65H, 67H, 69H, 73H, 74H, 65H, 72H
   \              0x67 0x69    
   \              0x73 0x74    
   \              0x65 0x72    
   \   00000040   0x73 0x0A          DC8 73H, 0AH, 20H, 20H, 4BH, 20H, 2DH, 20H
   \              0x20 0x20    
   \              0x4B 0x20    
   \              0x2D 0x20    
   \   00000048   0x4B 0x65          DC8 4BH, 65H, 79H, 62H, 6FH, 61H, 72H, 64H
   \              0x79 0x62    
   \              0x6F 0x61    
   \              0x72 0x64    
   \   00000050   0x20 0x4C          DC8 20H, 4CH, 6FH, 63H, 6BH, 20H, 54H, 65H
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x54 0x65    
   \   00000058   0x73 0x74          DC8 73H, 74H, 0AH, 20H, 20H, 4CH, 20H, 2DH
   \              0x0A 0x20    
   \              0x20 0x4C    
   \              0x20 0x2D    
   \   00000060   0x20 0x4C          DC8 20H, 4CH, 6FH, 63H, 6BH, 2FH, 55H, 6EH
   \              0x6F 0x63    
   \              0x6B 0x2F    
   \              0x55 0x6E    
   \   00000068   0x6C 0x6F          DC8 6CH, 6FH, 63H, 6BH, 20H, 4DH, 6FH, 74H
   \              0x63 0x6B    
   \              0x20 0x4D    
   \              0x6F 0x74    
   \   00000070   0x6F 0x72          DC8 6FH, 72H, 0AH, 20H, 20H, 50H, 20H, 2DH
   \              0x0A 0x20    
   \              0x20 0x50    
   \              0x20 0x2D    
   \   00000078   0x20 0x50          DC8 20H, 50H, 6FH, 73H, 69H, 74H, 69H, 6FH
   \              0x6F 0x73    
   \              0x69 0x74    
   \              0x69 0x6F    
   \   00000080   0x6E 0x20          DC8 6EH, 20H, 4DH, 6FH, 74H, 6FH, 72H, 0AH
   \              0x4D 0x6F    
   \              0x74 0x6F    
   \              0x72 0x0A    
   \   00000088   0x20 0x20          DC8 20H, 20H, 52H, 20H, 2DH, 20H, 52H, 65H
   \              0x52 0x20    
   \              0x2D 0x20    
   \              0x52 0x65    
   \   00000090   0x61 0x64          DC8 61H, 64H, 20H, 52H, 65H, 67H, 69H, 73H
   \              0x20 0x52    
   \              0x65 0x67    
   \              0x69 0x73    
   \   00000098   0x74 0x65          DC8 74H, 65H, 72H, 0AH, 20H, 20H, 57H, 20H
   \              0x72 0x0A    
   \              0x20 0x20    
   \              0x57 0x20    
   \   000000A0   0x2D 0x20          DC8 2DH, 20H, 57H, 72H, 69H, 74H, 65H, 20H
   \              0x57 0x72    
   \              0x69 0x74    
   \              0x65 0x20    
   \   000000A8   0x52 0x65          DC8 52H, 65H, 67H, 69H, 73H, 74H, 65H, 72H
   \              0x67 0x69    
   \              0x73 0x74    
   \              0x65 0x72    
   \   000000B0   0x0A 0x20          DC8 0AH, 20H, 20H, 58H, 20H, 2DH, 20H, 52H
   \              0x20 0x58    
   \              0x20 0x2D    
   \              0x20 0x52    
   \   000000B8   0x65 0x74          DC8 65H, 74H, 75H, 72H, 6EH, 20H, 74H, 6FH
   \              0x75 0x72    
   \              0x6E 0x20    
   \              0x74 0x6F    
   \   000000C0   0x20 0x6D          DC8 20H, 6DH, 61H, 69H, 6EH, 20H, 6DH, 65H
   \              0x61 0x69    
   \              0x6E 0x20    
   \              0x6D 0x65    
   \   000000C8   0x6E 0x75          DC8 6EH, 75H, 0AH, 20H, 20H, 3FH, 20H, 2DH
   \              0x0A 0x20    
   \              0x20 0x3F    
   \              0x20 0x2D    
   \   000000D0   0x20 0x44          DC8 20H, 44H, 69H, 73H, 70H, 6CH, 61H, 79H
   \              0x69 0x73    
   \              0x70 0x6C    
   \              0x61 0x79    
   \   000000D8   0x73 0x20          DC8 73H, 20H, 74H, 68H, 69H, 73H, 20H, 6DH
   \              0x74 0x68    
   \              0x69 0x73    
   \              0x20 0x6D    
   \   000000E0   0x65 0x73          DC8 65H, 73H, 73H, 61H, 67H, 65H, 0AH, 0
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x45 0x6E          DC8 "Enter LED control byte (FC is all LED's ON)"
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x4C 0x45    
   \              0x44 0x20    
   \              0x63 0x6F    
   \              0x6E 0x74    
   \              0x72 0x6F    
   \              0x6C 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x20 0x28    
   \              0x46 0x43    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x61 0x6C    
   \              0x6C 0x20    
   \              0x4C 0x45    
   \              0x44 0x27    
   \              0x73 0x20    
   \              0x4F 0x4E    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x48 0x69          DC8 "Hit ESC to exit test\012"
   \              0x74 0x20    
   \              0x45 0x53    
   \              0x43 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_26:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6DH, 6DH, 61H, 6EH, 64H, 20H
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \   00000008   0x48 0x65          DC8 48H, 65H, 6CH, 70H, 0AH, 20H, 20H, 43H
   \              0x6C 0x70    
   \              0x0A 0x20    
   \              0x20 0x43    
   \   00000010   0x20 0x2D          DC8 20H, 2DH, 20H, 43H, 6FH, 6EH, 74H, 72H
   \              0x20 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \   00000018   0x6F 0x6C          DC8 6FH, 6CH, 20H, 4CH, 45H, 44H, 20H, 53H
   \              0x20 0x4C    
   \              0x45 0x44    
   \              0x20 0x53    
   \   00000020   0x74 0x61          DC8 74H, 61H, 74H, 65H, 0AH, 20H, 20H, 44H
   \              0x74 0x65    
   \              0x0A 0x20    
   \              0x20 0x44    
   \   00000028   0x20 0x2D          DC8 20H, 2DH, 20H, 44H, 75H, 6DH, 70H, 20H
   \              0x20 0x44    
   \              0x75 0x6D    
   \              0x70 0x20    
   \   00000030   0x54 0x6F          DC8 54H, 6FH, 75H, 63H, 68H, 20H, 53H, 65H
   \              0x75 0x63    
   \              0x68 0x20    
   \              0x53 0x65    
   \   00000038   0x6E 0x73          DC8 6EH, 73H, 6FH, 72H, 20H, 52H, 65H, 67H
   \              0x6F 0x72    
   \              0x20 0x52    
   \              0x65 0x67    
   \   00000040   0x69 0x73          DC8 69H, 73H, 74H, 65H, 72H, 73H, 0AH, 20H
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x0A 0x20    
   \   00000048   0x20 0x4C          DC8 20H, 4CH, 20H, 2DH, 20H, 4CH, 45H, 44H
   \              0x20 0x2D    
   \              0x20 0x4C    
   \              0x45 0x44    
   \   00000050   0x20 0x53          DC8 20H, 53H, 70H, 69H, 6EH, 20H, 54H, 65H
   \              0x70 0x69    
   \              0x6E 0x20    
   \              0x54 0x65    
   \   00000058   0x73 0x74          DC8 73H, 74H, 0AH, 20H, 20H, 52H, 20H, 2DH
   \              0x0A 0x20    
   \              0x20 0x52    
   \              0x20 0x2D    
   \   00000060   0x20 0x52          DC8 20H, 52H, 65H, 61H, 64H, 20H, 52H, 65H
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x52 0x65    
   \   00000068   0x67 0x69          DC8 67H, 69H, 73H, 74H, 65H, 72H, 0AH, 20H
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x0A 0x20    
   \   00000070   0x20 0x54          DC8 20H, 54H, 20H, 2DH, 20H, 54H, 6FH, 75H
   \              0x20 0x2D    
   \              0x20 0x54    
   \              0x6F 0x75    
   \   00000078   0x63 0x68          DC8 63H, 68H, 20H, 54H, 65H, 73H, 74H, 0AH
   \              0x20 0x54    
   \              0x65 0x73    
   \              0x74 0x0A    
   \   00000080   0x20 0x20          DC8 20H, 20H, 57H, 20H, 2DH, 20H, 57H, 72H
   \              0x57 0x20    
   \              0x2D 0x20    
   \              0x57 0x72    
   \   00000088   0x69 0x74          DC8 69H, 74H, 65H, 20H, 52H, 65H, 67H, 69H
   \              0x65 0x20    
   \              0x52 0x65    
   \              0x67 0x69    
   \   00000090   0x73 0x74          DC8 73H, 74H, 65H, 72H, 0AH, 20H, 20H, 58H
   \              0x65 0x72    
   \              0x0A 0x20    
   \              0x20 0x58    
   \   00000098   0x20 0x2D          DC8 20H, 2DH, 20H, 52H, 65H, 74H, 75H, 72H
   \              0x20 0x52    
   \              0x65 0x74    
   \              0x75 0x72    
   \   000000A0   0x6E 0x20          DC8 6EH, 20H, 74H, 6FH, 20H, 6DH, 61H, 69H
   \              0x74 0x6F    
   \              0x20 0x6D    
   \              0x61 0x69    
   \   000000A8   0x6E 0x20          DC8 6EH, 20H, 6DH, 65H, 6EH, 75H, 0AH, 20H
   \              0x6D 0x65    
   \              0x6E 0x75    
   \              0x0A 0x20    
   \   000000B0   0x20 0x3F          DC8 20H, 3FH, 20H, 2DH, 20H, 44H, 69H, 73H
   \              0x20 0x2D    
   \              0x20 0x44    
   \              0x69 0x73    
   \   000000B8   0x70 0x6C          DC8 70H, 6CH, 61H, 79H, 73H, 20H, 74H, 68H
   \              0x61 0x79    
   \              0x73 0x20    
   \              0x74 0x68    
   \   000000C0   0x69 0x73          DC8 69H, 73H, 20H, 6DH, 65H, 73H, 73H, 61H
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \   000000C8   0x67 0x65          DC8 67H, 65H, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_27:
   \   00000000   0x0A 0x53          DC8 "\012Skylock Version %s %s\012"
   \              0x6B 0x79    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x25 0x73    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_28:
   \   00000000   0x30 0x34          DC8 "04/16/2015"
   \              0x2F 0x31    
   \              0x36 0x2F    
   \              0x32 0x30    
   \              0x31 0x35    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_29:
   \   00000000   0x4D 0x61          DC8 "Manufacturing Interface Active\012>"
   \              0x6E 0x75    
   \              0x66 0x61    
   \              0x63 0x74    
   \              0x75 0x72    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x49 0x6E    
   \              0x74 0x65    
   \              0x72 0x66    
   \              0x61 0x63    
   \              0x65 0x20    
   \              0x41 0x63    
   \              0x74 0x69    
   \              0x76 0x65    
   \              0x0A 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_30:
   \   00000000   0x46 0x49          DC8 "FICR\012"
   \              0x43 0x52    
   \              0x0A 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_31:
   \   00000000   0x0A 0x55          DC8 "\012UICR\012"
   \              0x49 0x43    
   \              0x52 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_32:
   \   00000000   0x48 0x65          DC8 "Hey, need a reboot command here\012>"
   \              0x79 0x2C    
   \              0x20 0x6E    
   \              0x65 0x65    
   \              0x64 0x20    
   \              0x61 0x20    
   \              0x72 0x65    
   \              0x62 0x6F    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x20 0x68    
   \              0x65 0x72    
   \              0x65 0x0A    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_33:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6DH, 6DH, 61H, 6EH, 64H, 20H
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \   00000008   0x48 0x65          DC8 48H, 65H, 6CH, 70H, 0AH, 20H, 20H, 41H
   \              0x6C 0x70    
   \              0x0A 0x20    
   \              0x20 0x41    
   \   00000010   0x20 0x2D          DC8 20H, 2DH, 20H, 41H, 63H, 63H, 65H, 6CH
   \              0x20 0x41    
   \              0x63 0x63    
   \              0x65 0x6C    
   \   00000018   0x65 0x72          DC8 65H, 72H, 6FH, 6DH, 65H, 74H, 65H, 72H
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \   00000020   0x0A 0x20          DC8 0AH, 20H, 20H, 44H, 20H, 2DH, 20H, 44H
   \              0x20 0x44    
   \              0x20 0x2D    
   \              0x20 0x44    
   \   00000028   0x75 0x6D          DC8 75H, 6DH, 70H, 20H, 46H, 49H, 43H, 52H
   \              0x70 0x20    
   \              0x46 0x49    
   \              0x43 0x52    
   \   00000030   0x20 0x61          DC8 20H, 61H, 6EH, 64H, 20H, 55H, 49H, 43H
   \              0x6E 0x64    
   \              0x20 0x55    
   \              0x49 0x43    
   \   00000038   0x52 0x20          DC8 52H, 20H, 4EH, 56H, 20H, 4DH, 65H, 6DH
   \              0x4E 0x56    
   \              0x20 0x4D    
   \              0x65 0x6D    
   \   00000040   0x6F 0x72          DC8 6FH, 72H, 79H, 0AH, 20H, 20H, 4DH, 20H
   \              0x79 0x0A    
   \              0x20 0x20    
   \              0x4D 0x20    
   \   00000048   0x2D 0x20          DC8 2DH, 20H, 4DH, 6FH, 74H, 6FH, 72H, 0AH
   \              0x4D 0x6F    
   \              0x74 0x6F    
   \              0x72 0x0A    
   \   00000050   0x20 0x20          DC8 20H, 20H, 52H, 20H, 2DH, 20H, 52H, 65H
   \              0x52 0x20    
   \              0x2D 0x20    
   \              0x52 0x65    
   \   00000058   0x62 0x6F          DC8 62H, 6FH, 6FH, 74H, 0AH, 20H, 20H, 53H
   \              0x6F 0x74    
   \              0x0A 0x20    
   \              0x20 0x53    
   \   00000060   0x20 0x2D          DC8 20H, 2DH, 20H, 4DH, 61H, 67H, 6EH, 65H
   \              0x20 0x4D    
   \              0x61 0x67    
   \              0x6E 0x65    
   \   00000068   0x74 0x69          DC8 74H, 69H, 63H, 20H, 53H, 65H, 6EH, 73H
   \              0x63 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \   00000070   0x6F 0x72          DC8 6FH, 72H, 0AH, 20H, 20H, 54H, 20H, 2DH
   \              0x0A 0x20    
   \              0x20 0x54    
   \              0x20 0x2D    
   \   00000078   0x20 0x54          DC8 20H, 54H, 6FH, 75H, 63H, 68H, 20H, 53H
   \              0x6F 0x75    
   \              0x63 0x68    
   \              0x20 0x53    
   \   00000080   0x65 0x6E          DC8 65H, 6EH, 73H, 6FH, 72H, 0AH, 20H, 20H
   \              0x73 0x6F    
   \              0x72 0x0A    
   \              0x20 0x20    
   \   00000088   0x3F 0x20          DC8 3FH, 20H, 2DH, 20H, 44H, 69H, 73H, 70H
   \              0x2D 0x20    
   \              0x44 0x69    
   \              0x73 0x70    
   \   00000090   0x6C 0x61          DC8 6CH, 61H, 79H, 73H, 20H, 74H, 68H, 69H
   \              0x79 0x73    
   \              0x20 0x74    
   \              0x68 0x69    
   \   00000098   0x73 0x20          DC8 73H, 20H, 6DH, 65H, 73H, 73H, 61H, 67H
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \   000000A0   0x65 0x0A          DC8 65H, 0AH, 3EH, 0
   \              0x3E 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   MFG_Accel
         8   -> MFG_I2C_Read
         8   -> MFG_I2C_ReadBuffer
         8   -> MFG_I2C_Write
         8   -> UART0_RxWaiting
         8   -> __aeabi_memset
         8   -> dumpRegData
         8   -> getchar
         8   -> makeUpperCase
         8   -> printf
      16   MFG_I2C_Read
        16   -> I2C_FullRead
        16   -> getHexByte
        16   -> printf
      16   MFG_I2C_ReadBuffer
        16   -> I2C_Read
        16   -> I2C_Write
      16   MFG_I2C_Write
        16   -> I2C_Read
        16   -> I2C_Write
        16   -> getHexByte
       8   MFG_Magnet
         8   -> MFG_I2C_Read
         8   -> MFG_I2C_ReadBuffer
         8   -> MFG_I2C_Write
         8   -> UART0_RxWaiting
         8   -> __aeabi_memset
         8   -> dumpRegData
         8   -> getchar
         8   -> makeUpperCase
         8   -> printf
       8   MFG_Mode
         8   -> MFG_Accel
         8   -> MFG_Magnet
         8   -> MFG_Motor
         8   -> MFG_Touch
         8   -> Timer2_Start
         8   -> UART0_RxWaiting
         8   -> dumpRegData
         8   -> getchar
         8   -> makeUpperCase
         8   -> printf
      24   MFG_Motor
        24   -> MFG_I2C_Read
        24   -> MFG_I2C_ReadBuffer
        24   -> MFG_I2C_Write
        24   -> Motor_Lock
        24   -> Motor_Start
        24   -> Motor_Stop
        24   -> TS_TouchLED
        24   -> Timer2_Count
        24   -> Timer2_Start
        24   -> Timer2_Stop
        24   -> UART0_RxWaiting
        24   -> __aeabi_memset
        24   -> dumpRegData
        24   -> getchar
        24   -> makeUpperCase
        24   -> printf
      16   MFG_Touch
        16   -> I2C_Read
        16   -> I2C_Write
        16   -> MFG_I2C_Read
        16   -> MFG_I2C_ReadBuffer
        16   -> MFG_I2C_Write
        16   -> TS_ToggleLED
        16   -> TS_ToggleTestLED
        16   -> TS_TouchLED
        16   -> UART0_RxWaiting
        16   -> __aeabi_memset
        16   -> dumpRegData
        16   -> getHexByte
        16   -> getchar
        16   -> makeUpperCase
        16   -> printf
       4   asciitohex
      32   dumpRegData
        32   -> printf
      32   getHexByte
        32   -> asciitohex
        32   -> getchar
        32   -> makeUpperCase
        32   -> printf
        32   -> sprintf
        32   -> validHexChar
       4   makeUpperCase
       4   validHexChar


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      56  ?_0
      56  ?_1
       2  ?_10
       4  ?_11
       4  ?_12
      36  ?_13
      24  ?_14
      36  ?_15
       4  ?_16
       2  ?_17
     136  ?_18
      32  ?_19
      12  ?_2
      24  ?_20
      44  ?_21
      40  ?_22
     232  ?_23
      44  ?_24
      24  ?_25
     204  ?_26
      24  ?_27
      12  ?_28
      36  ?_29
       8  ?_3
       8  ?_30
       8  ?_31
      36  ?_32
     164  ?_33
       4  ?_4
       4  ?_5
      60  ?_6
      12  ?_7
       8  ?_8
       8  ?_9
     130  MFG_Accel
      42  MFG_I2C_Read
      40  MFG_I2C_ReadBuffer
      76  MFG_I2C_Write
     156  MFG_Magnet
     228  MFG_Mode
     476  MFG_Motor
     302  MFG_Touch
      18  asciitohex
     134  dumpRegData
     228  getHexByte
      22  makeUpperCase
     132  mfgBuffer
      28  validHexChar

 
   132 bytes in section .bss
 1 408 bytes in section .rodata
 2 076 bytes in section .text
 
 2 076 bytes of CODE  memory
 1 408 bytes of CONST memory
   132 bytes of DATA  memory

Errors: none
Warnings: none
