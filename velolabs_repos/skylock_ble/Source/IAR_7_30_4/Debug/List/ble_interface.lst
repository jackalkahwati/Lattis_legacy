###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        16/Apr/2015  21:19:48
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\VeloLabs\SkyLock Project\Source\ble_interface.c
#    Command line =  
#        "C:\VeloLabs\SkyLock Project\Source\ble_interface.c" -D NRF51 -D
#        BLE_STACK_SUPPORT_REQD -lCN "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\List\" -o "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\Obj\" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Normal.h" -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\include\" -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\include\ARMFiles\" -I
#        "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\drivers_nrf\hal\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\softdevice\s110\headers\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\toolchain\" -I
#        "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\softdevice\common\softdevice_handler\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\util\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\scheduler\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\timer\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\ble\common\" -Ol
#    List file    =  
#        C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\List\ble_interface.lst
#    Object file  =  
#        C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\Obj\ble_interface.o
#
###############################################################################

C:\VeloLabs\SkyLock Project\Source\ble_interface.c
      1          /*
      2          ** Proprietary Rights Notice
      3          **
      4          ** This material contains the valuable properties and trade secrets of:
      5          **
      6          **    Velo Labs
      7          **    San Francisco, CA, USA
      8          **
      9          ** All rights reserved. No part of this work may be reproduced, distributed, or
     10          ** transmitted in any form or by any means, including photocopying, recording,
     11          ** or other electronic or mechanical methods, without the prior written permission
     12          ** of Velo Labs.
     13          **
     14          ** Copyright (c) 2015, Velo Labs
     15          ** Contains Confidential and Trade Secret Information
     16          */
     17          
     18          /*
     19          ** File Name:  ble_interface.c
     20          **
     21          ** Purpose:    Routines to manage the BLE interface
     22          **
     23          ** Implementation Notest:
     24          **
     25          ** #1). Nordic seems to like using code macros. I really do not approve of those things. For one they
     26          **      make it difficult to debug code because when doing symbolic debugging they are typically hidden
     27          **      from view. But more important they tend to waste code space. These ARM CPU's are fast so there is
     28          **      no benefit for inline code. Using a function instead saves code space which may be at a premium
     29          **      at some point. The one downside is a function will hit the stack, but this is a single stack product,
     30          **      so the cost for that should be minimal.
     31          **
     32          ** #2). The other thing I found is they have hidden things inside the macros. Like the Soft Device init macro
     33          **      allocates a buffer. Don't keep things like this hidden.
     34          **
     35          ** #3). The Nordic code seems to have some extra function layers (functions call functions that then call the
     36          **      soft device. Again, this can unnecessarily load the stack. I don't necessarily want to avoid all of this
     37          **      but if it makes more sense to just call the soft device function, then do that.
     38          */
     39          
     40          #include "master.h"
     41          #include "stdio.h"
     42          #include "string.h"
     43          #include "hardware.h"
     44          #include "ble_gap.h"
     45          #include "softdevice_handler.h"
     46          #include "ble_skylock.h"
     47          #include "app_timer.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void app_timer_evt_get(void *, uint16_t)
   \                     app_timer_evt_get: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0xB289             UXTH     R1,R1
   \   00000006   0x2908             CMP      R1,#+8
   \   00000008   0xD101             BNE      ??app_timer_evt_get_0
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xE000             B        ??app_timer_evt_get_1
   \                     ??app_timer_evt_get_0: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
   \                     ??app_timer_evt_get_1: (+1)
   \   00000010   0xB2C0             UXTB     R0,R0
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD105             BNE      ??app_timer_evt_get_2
   \   00000016   0x....             LDR      R2,??DataTable5
   \   00000018   0x218D             MOVS     R1,#+141
   \   0000001A   0x0049             LSLS     R1,R1,#+1        ;; #+282
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       app_error_handler
   \                     ??app_timer_evt_get_2: (+1)
   \   00000022   0x6860             LDR      R0,[R4, #+4]
   \   00000024   0x6821             LDR      R1,[R4, #+0]
   \   00000026   0x4788             BLX      R1
   \   00000028   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t app_timer_evt_schedule(void (*)(void *), void *)
   \                     app_timer_evt_schedule: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0x9101             STR      R1,[SP, #+4]
   \   00000008   0x....             LDR      R2,??DataTable5_1
   \   0000000A   0x2108             MOVS     R1,#+8
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x.... 0x....      BL       app_sched_event_put
   \   00000012   0xBD0E             POP      {R1-R3,PC}       ;; return
     48          #include "ble_advdata.h"
     49          //#include "ble_lbs.h"
     50          #include "utils.h"
     51          #include "ble_conn_params.h"
     52          #include "app_timer.h"
     53          #include "i2c.h"
     54          #include "ble_hci.h"
     55          #include "uart.h"
     56          #include "timers.h"
     57          
     58          /**********************************************************************************************************************
     59          ** Global structures required by the Soft Device are listed next. Please describe everything that we know            **
     60          ** about these elements so as to help others understand what is going on.                                            **
     61          **                                                                                                                   **
     62          ** When possible keep the same name as Nordic was using to possibly help reduce any confusion. Try to list where     **
     63          ** Noridic was using or defining the value though.                                                                   **
     64          **********************************************************************************************************************/
     65          
     66          /*
     67          ** Place all our BLE service definitions here.
     68          */
     69          #define SKY_UUID_BASE {0xdd, 0xea, 0x70, 0x6a, 0x9d, 0x53, 0x4b, 0xbb, 0xac, 0x0b, 0x74, 0xba, 0x81, 0x9e, 0x7d, 0x9c}
     70          #define SKY_UUID_LED_SERVICE     (0x1523)
     71          #define SKY_UUID_LED_STATE       (0x1524)
     72          #define SKY_UUID_LED_ON          (0x1525)
     73          #define SKY_UUID_LED_OFF         (0x1526)
     74          #define SKY_UUID_LED_TOGGLE      (SKY_UUID_LED_OFF + 1)
     75          #define SKY_UUID_TXPOWER         (SKY_UUID_LED_TOGGLE + 1)
     76          #define SKY_UUID_LOCK_SERVICE    (SKY_UUID_TXPOWER + 1)
     77          #define SKY_UUID_LOCK_STATE      (SKY_UUID_LOCK_SERVICE + 1)
     78          #define SKY_UUID_LOCK_SHIFT      (SKY_UUID_LOCK_STATE + 1)
     79          #define SKY_UUID_LOCK_INVERT     (SKY_UUID_LOCK_SHIFT + 1)
     80          
     81          typedef struct
     82          {
     83             uint16_t                   service_handle;
     84             uint8_t                    uuid_type;
     85             uint16_t                   conn_handle;
     86          
     87             ble_gatts_char_handles_t   ledStateHandle;
     88             ble_gatts_char_handles_t   ledOnHandle;
     89             ble_gatts_char_handles_t   ledOffHandle;
     90             ble_gatts_char_handles_t   ledToggleHandle;
     91          
     92             ble_gatts_char_handles_t   txpower;
     93          
     94          } bleLEDservices;
     95          

   \                                 In section .bss, align 4
     96          bleLEDservices       serviceLED;
   \                     serviceLED:
   \   00000000                      DS8 48

   \                                 In section .bss, align 1
     97          uint8_t              serviceLEDState;
   \                     serviceLEDState:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     98          uint8_t              serviceLEDWrite;
   \                     serviceLEDWrite:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     99          uint8_t              txpower[2];
   \                     txpower:
   \   00000000                      DS8 2
    100          
    101          typedef struct
    102          {
    103             uint16_t                   service_handle;
    104             uint8_t                    uuid_type;
    105             uint16_t                   conn_handle;
    106          
    107             ble_gatts_char_handles_t   lockStateHandle;
    108             ble_gatts_char_handles_t   lockShiftHandle;
    109             ble_gatts_char_handles_t   lockInvertHandle;
    110          
    111          } bleLockservices;
    112          

   \                                 In section .bss, align 4
    113          bleLockservices      serviceLock;
   \                     serviceLock:
   \   00000000                      DS8 32

   \                                 In section .bss, align 1
    114          uint8_t              serviceLockState, localLockState;
   \                     serviceLockState:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     localLockState:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    115          uint8_t              serviceLockShift;
   \                     serviceLockShift:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    116          uint8_t              serviceLockInvert;
   \                     serviceLockInvert:
   \   00000000                      DS8 1
    117          
    118          
    119          #define  BLE_CHAR_READ        (0x01)
    120          #define  BLE_CHAR_WRITE       (0x02)
    121          
    122          
    123          /* Scheduler stuff - this should move when I write our own and toss the Nordic version */
    124          #define SCHED_MAX_EVENT_DATA_SIZE      sizeof(app_timer_event_t)                /**< Maximum size of scheduler events. Note that scheduler BLE stack events do not contain any data, as the events are being pulled from the stack in the event handler. */
    125          #define SCHED_QUEUE_SIZE               25                                       /**< Maximum number of events in the scheduler queue. */
    126          #define APP_SCHED_BUFFER_SIZE          ((SCHED_MAX_EVENT_DATA_SIZE + APP_SCHED_EVENT_HEADER_SIZE) * (SCHED_QUEUE_SIZE + 1))

   \                                 In section .bss, align 4
    127          uint32_t APP_SCHED_BUF[CEIL_DIV(APP_SCHED_BUFFER_SIZE, sizeof(uint32_t))];
   \                     APP_SCHED_BUF:
   \   00000000                      DS8 416
    128          
    129          
    130          
    131          #define IS_SRVC_CHANGED_CHARACT_PRESENT 0                                        /**< Include or not the service_changed characteristic. if not enabled, the server's database cannot be changed for the lifetime of the device*/
    132          #define APP_ADV_INTERVAL                64                                       /**< The advertising interval (in units of 0.625 ms. This value corresponds to 40 ms). */
    133          #define APP_ADV_TIMEOUT_IN_SECONDS      180                                      /**< The advertising timeout (in units of seconds). */
    134          

   \                                 In section .bss, align 4
    135          static ble_gap_sec_params_t             m_sec_params;                               /**< Security requirements for this application. */
   \                     m_sec_params:
   \   00000000                      DS8 8

   \                                 In section .data, align 2
    136          static uint16_t                         m_conn_handle = BLE_CONN_HANDLE_INVALID;    /**< Handle of the current connection. */
   \                     m_conn_handle:
   \   00000000   0xFFFF             DC16 65535
    137          
    138          
    139          /**@brief Function for starting advertising.
    140           */

   \                                 In section .text, align 2, keep-with-next
    141          static void advertising_start(void)
    142          {
   \                     advertising_start: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    143              uint32_t             err_code;
    144              ble_gap_adv_params_t adv_params;
    145          
    146              // Start advertising
    147              memset(&adv_params, 0, sizeof(adv_params));
   \   00000004   0x2114             MOVS     R1,#+20
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x466C             MOV      R4,SP
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
    148          
    149              adv_params.type        = BLE_GAP_ADV_TYPE_ADV_IND;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x4669             MOV      R1,SP
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    150              adv_params.p_peer_addr = NULL;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9001             STR      R0,[SP, #+4]
    151              adv_params.fp          = BLE_GAP_ADV_FP_ANY;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x4669             MOV      R1,SP
   \   0000001E   0x7208             STRB     R0,[R1, #+8]
    152              adv_params.interval    = APP_ADV_INTERVAL;
   \   00000020   0x2040             MOVS     R0,#+64
   \   00000022   0x4669             MOV      R1,SP
   \   00000024   0x8208             STRH     R0,[R1, #+16]
    153          //    adv_params.timeout     = APP_ADV_TIMEOUT_IN_SECONDS;
    154                /* Disable timeout by setting to 0 */
    155              adv_params.timeout     = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x4669             MOV      R1,SP
   \   0000002A   0x8248             STRH     R0,[R1, #+18]
    156          
    157              err_code = sd_ble_gap_adv_start(&adv_params);
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0xDF73             SVC      0x73
    158              APP_ERROR_CHECK(err_code);
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD003             BEQ      ??advertising_start_0
   \   00000034   0x....             LDR      R2,??DataTable5_2
   \   00000036   0x219E             MOVS     R1,#+158
   \   00000038   0x.... 0x....      BL       app_error_handler
    159          //    nrf_gpio_pin_set(ADVERTISING_LED_PIN_NO);
    160          }
   \                     ??advertising_start_0: (+1)
   \   0000003C   0xB006             ADD      SP,SP,#+24
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    161          
    162          
    163          
    164          /**@brief Function for handling the Application's BLE Stack events.
    165           *
    166           * @param[in]   p_ble_evt   Bluetooth stack event.
    167           */

   \                                 In section .text, align 2, keep-with-next
    168          static void on_ble_evt(ble_evt_t * p_ble_evt)
    169          {
   \                     on_ble_evt: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    170              uint32_t                         err_code;
    171              static ble_gap_evt_auth_status_t m_auth_status;
    172              ble_gap_enc_info_t *             p_enc_info;
    173          
    174              switch (p_ble_evt->header.evt_id)
   \   00000004   0x8808             LDRH     R0,[R1, #+0]
   \   00000006   0x2810             CMP      R0,#+16
   \   00000008   0xD00C             BEQ      ??on_ble_evt_0
   \   0000000A   0x2811             CMP      R0,#+17
   \   0000000C   0xD00E             BEQ      ??on_ble_evt_1
   \   0000000E   0x2813             CMP      R0,#+19
   \   00000010   0xD012             BEQ      ??on_ble_evt_2
   \   00000012   0x2814             CMP      R0,#+20
   \   00000014   0xD02E             BEQ      ??on_ble_evt_3
   \   00000016   0x2817             CMP      R0,#+23
   \   00000018   0xD026             BEQ      ??on_ble_evt_4
   \   0000001A   0x2819             CMP      R0,#+25
   \   0000001C   0xD047             BEQ      ??on_ble_evt_5
   \   0000001E   0x2852             CMP      R0,#+82
   \   00000020   0xD016             BEQ      ??on_ble_evt_6
   \   00000022   0xE045             B        ??on_ble_evt_7
    175              {
    176                  case BLE_GAP_EVT_CONNECTED:
    177          //            nrf_gpio_pin_set(CONNECTED_LED_PIN_NO);
    178          //            nrf_gpio_pin_clear(ADVERTISING_LED_PIN_NO);
    179                      m_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
   \                     ??on_ble_evt_0: (+1)
   \   00000024   0x8888             LDRH     R0,[R1, #+4]
   \   00000026   0x....             LDR      R1,??DataTable5_3
   \   00000028   0x8008             STRH     R0,[R1, #+0]
    180          
    181          //            err_code = app_button_enable();
    182          //            APP_ERROR_CHECK(err_code);
    183                      break;
   \   0000002A   0xE041             B        ??on_ble_evt_8
    184          
    185                  case BLE_GAP_EVT_DISCONNECTED:
    186          //            nrf_gpio_pin_clear(CONNECTED_LED_PIN_NO);
    187                      m_conn_handle = BLE_CONN_HANDLE_INVALID;
   \                     ??on_ble_evt_1: (+1)
   \   0000002C   0x....             LDR      R0,??DataTable5_4  ;; 0xffff
   \   0000002E   0x....             LDR      R1,??DataTable5_3
   \   00000030   0x8008             STRH     R0,[R1, #+0]
    188          
    189          //            err_code = app_button_disable();
    190          //            APP_ERROR_CHECK(err_code);
    191          
    192                      advertising_start();
   \   00000032   0x.... 0x....      BL       advertising_start
    193                      break;
   \   00000036   0xE03B             B        ??on_ble_evt_8
    194          
    195                  case BLE_GAP_EVT_SEC_PARAMS_REQUEST:
    196                      err_code = sd_ble_gap_sec_params_reply(m_conn_handle,
    197                                                             BLE_GAP_SEC_STATUS_SUCCESS,
    198                                                             &m_sec_params);
   \                     ??on_ble_evt_2: (+1)
   \   00000038   0x....             LDR      R2,??DataTable5_5
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x....             LDR      R0,??DataTable5_3
   \   0000003E   0x8800             LDRH     R0,[R0, #+0]
   \   00000040   0xDF7F             SVC      0x7F
    199                      APP_ERROR_CHECK(err_code);
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD003             BEQ      ??on_ble_evt_9
   \   00000046   0x....             LDR      R2,??DataTable5_2
   \   00000048   0x21C7             MOVS     R1,#+199
   \   0000004A   0x.... 0x....      BL       app_error_handler
    200                      break;
   \                     ??on_ble_evt_9: (+1)
   \   0000004E   0xE02F             B        ??on_ble_evt_8
    201          
    202                  case BLE_GATTS_EVT_SYS_ATTR_MISSING:
    203                      err_code = sd_ble_gatts_sys_attr_set(m_conn_handle, NULL, 0);
   \                     ??on_ble_evt_6: (+1)
   \   00000050   0x2200             MOVS     R2,#+0
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x....             LDR      R0,??DataTable5_3
   \   00000056   0x8800             LDRH     R0,[R0, #+0]
   \   00000058   0xDFA9             SVC      0xA9
    204                      APP_ERROR_CHECK(err_code);
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD003             BEQ      ??on_ble_evt_10
   \   0000005E   0x....             LDR      R2,??DataTable5_2
   \   00000060   0x21CC             MOVS     R1,#+204
   \   00000062   0x.... 0x....      BL       app_error_handler
    205                      break;
   \                     ??on_ble_evt_10: (+1)
   \   00000066   0xE023             B        ??on_ble_evt_8
    206          
    207                  case BLE_GAP_EVT_AUTH_STATUS:
    208                      m_auth_status = p_ble_evt->evt.gap_evt.params.auth_status;
   \                     ??on_ble_evt_4: (+1)
   \   00000068   0x....             LDR      R0,??DataTable6
   \   0000006A   0x1D89             ADDS     R1,R1,#+6
   \   0000006C   0x2232             MOVS     R2,#+50
   \   0000006E   0x.... 0x....      BL       __aeabi_memcpy
    209                      break;
   \   00000072   0xE01D             B        ??on_ble_evt_8
    210          
    211                  case BLE_GAP_EVT_SEC_INFO_REQUEST:
    212                      p_enc_info = &m_auth_status.periph_keys.enc_info;
   \                     ??on_ble_evt_3: (+1)
   \   00000074   0x....             LDR      R0,??DataTable6_1
    213                      if (p_enc_info->div == p_ble_evt->evt.gap_evt.params.sec_info_request.div)
   \   00000076   0x8802             LDRH     R2,[R0, #+0]
   \   00000078   0x89C9             LDRH     R1,[R1, #+14]
   \   0000007A   0x428A             CMP      R2,R1
   \   0000007C   0xD10B             BNE      ??on_ble_evt_11
    214                      {
    215                          err_code = sd_ble_gap_sec_info_reply(m_conn_handle, p_enc_info, NULL);
   \   0000007E   0x2200             MOVS     R2,#+0
   \   00000080   0x0001             MOVS     R1,R0
   \   00000082   0x....             LDR      R0,??DataTable5_3
   \   00000084   0x8800             LDRH     R0,[R0, #+0]
   \   00000086   0xDF81             SVC      0x81
    216                          APP_ERROR_CHECK(err_code);
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD003             BEQ      ??on_ble_evt_12
   \   0000008C   0x....             LDR      R2,??DataTable5_2
   \   0000008E   0x21D8             MOVS     R1,#+216
   \   00000090   0x.... 0x....      BL       app_error_handler
   \                     ??on_ble_evt_12: (+1)
   \   00000094   0xE00A             B        ??on_ble_evt_13
    217                      }
    218                      else
    219                      {
    220                          // No keys found for this device
    221                          err_code = sd_ble_gap_sec_info_reply(m_conn_handle, NULL, NULL);
   \                     ??on_ble_evt_11: (+1)
   \   00000096   0x2200             MOVS     R2,#+0
   \   00000098   0x2100             MOVS     R1,#+0
   \   0000009A   0x....             LDR      R0,??DataTable5_3
   \   0000009C   0x8800             LDRH     R0,[R0, #+0]
   \   0000009E   0xDF81             SVC      0x81
    222                          APP_ERROR_CHECK(err_code);
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD003             BEQ      ??on_ble_evt_14
   \   000000A4   0x....             LDR      R2,??DataTable5_2
   \   000000A6   0x21DE             MOVS     R1,#+222
   \   000000A8   0x.... 0x....      BL       app_error_handler
    223                      }
    224                      break;
   \                     ??on_ble_evt_14: (+1)
   \                     ??on_ble_evt_13: (+1)
   \   000000AC   0xE000             B        ??on_ble_evt_8
    225          
    226                  case BLE_GAP_EVT_TIMEOUT:
    227                      if (p_ble_evt->evt.gap_evt.params.timeout.src == BLE_GAP_TIMEOUT_SRC_ADVERTISEMENT)
    228                      {
    229          //                nrf_gpio_pin_clear(ADVERTISING_LED_PIN_NO);
    230          
    231                          // Configure buttons with sense level low as wakeup source.
    232          //                nrf_gpio_cfg_sense_input(WAKEUP_BUTTON_PIN,
    233          //                                         BUTTON_PULL,
    234          //                                         NRF_GPIO_PIN_SENSE_LOW);
    235          
    236                          // Go to system-off mode (this function will not return; wakeup will cause a reset)
    237          //                err_code = sd_power_system_off();
    238          //                APP_ERROR_CHECK(err_code);
    239                      }
    240                      break;
   \                     ??on_ble_evt_5: (+1)
   \   000000AE   0xE7FF             B        ??on_ble_evt_8
    241          
    242                  default:
    243                      // No implementation needed.
    244                      break;
    245              }
    246          }
   \                     ??on_ble_evt_7: (+1)
   \                     ??on_ble_evt_8: (+1)
   \   000000B0   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     ??m_auth_status:
   \   00000000                      DS8 52
    247          
    248          
    249          
    250          
    251          
    252          
    253          
    254          
    255          
    256          
    257          
    258          
    259          /*
    260          ** Function for handling a BLE stack event. This function i
    261          */
    262          
    263          #if 0
    264            **@brief Function for dispatching a BLE stack event to all modules with a BLE stack event handler.
    265           *
    266           * @details This function is called from the scheduler in the main loop after a BLE stack
    267           *          event has been received.
    268           *
    269           * @param[in]   p_ble_evt   Bluetooth stack event.
    270           */
    271          #endif

   \                                 In section .text, align 2, keep-with-next
    272          void ble_evt_dispatch(ble_evt_t * p_ble_evt)
    273          {
   \                     ble_evt_dispatch: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
    274             uint8_t tmp;
    275             printf("ble_evt called %02x\n", p_ble_evt->header.evt_id);
   \   00000004   0x8829             LDRH     R1,[R5, #+0]
   \   00000006   0x....             LDR      R0,??DataTable7
   \   00000008   0x.... 0x....      BL       printf
    276             UART0_TxFlush ();
   \   0000000C   0x.... 0x....      BL       UART0_TxFlush
    277          
    278          
    279             on_ble_evt(p_ble_evt);
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0x.... 0x....      BL       on_ble_evt
    280             ble_conn_params_on_ble_evt(p_ble_evt);
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0x.... 0x....      BL       ble_conn_params_on_ble_evt
    281          
    282             switch (p_ble_evt->header.evt_id)
   \   0000001C   0x8828             LDRH     R0,[R5, #+0]
   \   0000001E   0x2810             CMP      R0,#+16
   \   00000020   0xD007             BEQ      ??ble_evt_dispatch_0
   \   00000022   0x2811             CMP      R0,#+17
   \   00000024   0xD006             BEQ      ??ble_evt_dispatch_1
   \   00000026   0x281A             CMP      R0,#+26
   \   00000028   0xD100             BNE      .+4
   \   0000002A   0xE0BE             B        ??ble_evt_dispatch_2
   \   0000002C   0x2850             CMP      R0,#+80
   \   0000002E   0xD002             BEQ      ??ble_evt_dispatch_3
   \   00000030   0xE0C6             B        ??ble_evt_dispatch_4
    283                {
    284                case BLE_GAP_EVT_CONNECTED:
    285                   //on_connect(p_lbs, p_ble_evt);
    286                   break;
   \                     ??ble_evt_dispatch_0: (+1)
   \   00000032   0xE0C5             B        ??ble_evt_dispatch_5
    287          
    288                case BLE_GAP_EVT_DISCONNECTED:
    289                   //on_disconnect(p_lbs, p_ble_evt);
    290                   break;
   \                     ??ble_evt_dispatch_1: (+1)
   \   00000034   0xE0C4             B        ??ble_evt_dispatch_5
    291          
    292                case BLE_GATTS_EVT_WRITE:
    293                   {
    294                   ble_gatts_evt_write_t * p_evt_write = &p_ble_evt->evt.gatts_evt.params.write;
   \                     ??ble_evt_dispatch_3: (+1)
   \   00000036   0x1DAD             ADDS     R5,R5,#+6
    295          
    296                   if (p_evt_write->len == 1)
   \   00000038   0x8B28             LDRH     R0,[R5, #+24]
   \   0000003A   0x2801             CMP      R0,#+1
   \   0000003C   0xD000             BEQ      .+4
   \   0000003E   0xE0B3             B        ??ble_evt_dispatch_6
    297                      {
    298                      tmp = p_evt_write->data[0];
   \   00000040   0x7EAC             LDRB     R4,[R5, #+26]
    299          
    300                      if (p_evt_write->handle == serviceLED.ledToggleHandle.value_handle)
   \   00000042   0x8828             LDRH     R0,[R5, #+0]
   \   00000044   0x....             LDR      R1,??DataTable7_1
   \   00000046   0x8BC9             LDRH     R1,[R1, #+30]
   \   00000048   0x4288             CMP      R0,R1
   \   0000004A   0xD108             BNE      ??ble_evt_dispatch_7
    301                         {
    302                         serviceLEDState = (TS_ToggleLED (tmp << 2)) >> 2;
   \   0000004C   0x00A0             LSLS     R0,R4,#+2
   \   0000004E   0xB2C0             UXTB     R0,R0
   \   00000050   0x.... 0x....      BL       TS_ToggleLED
   \   00000054   0xB2C0             UXTB     R0,R0
   \   00000056   0x0880             LSRS     R0,R0,#+2
   \   00000058   0x....             LDR      R1,??DataTable7_2
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
   \   0000005C   0xE0A4             B        ??ble_evt_dispatch_6
    303                         }
    304          
    305                      else if (p_evt_write->handle == serviceLED.ledOnHandle.value_handle)
   \                     ??ble_evt_dispatch_7: (+1)
   \   0000005E   0x8828             LDRH     R0,[R5, #+0]
   \   00000060   0x....             LDR      R1,??DataTable7_1
   \   00000062   0x89C9             LDRH     R1,[R1, #+14]
   \   00000064   0x4288             CMP      R0,R1
   \   00000066   0xD10B             BNE      ??ble_evt_dispatch_8
    306                         {
    307                         serviceLEDState |= tmp;
   \   00000068   0x....             LDR      R0,??DataTable7_2
   \   0000006A   0x7800             LDRB     R0,[R0, #+0]
   \   0000006C   0x4304             ORRS     R4,R4,R0
   \   0000006E   0x....             LDR      R0,??DataTable7_2
   \   00000070   0x7004             STRB     R4,[R0, #+0]
    308                         TS_SetLED(serviceLEDState << 2);
   \   00000072   0x....             LDR      R0,??DataTable7_2
   \   00000074   0x7800             LDRB     R0,[R0, #+0]
   \   00000076   0x0080             LSLS     R0,R0,#+2
   \   00000078   0xB2C0             UXTB     R0,R0
   \   0000007A   0x.... 0x....      BL       TS_SetLED
   \   0000007E   0xE093             B        ??ble_evt_dispatch_6
    309                         }
    310          
    311                      else if (p_evt_write->handle == serviceLED.ledOffHandle.value_handle)
   \                     ??ble_evt_dispatch_8: (+1)
   \   00000080   0x8828             LDRH     R0,[R5, #+0]
   \   00000082   0x....             LDR      R1,??DataTable7_1
   \   00000084   0x8AC9             LDRH     R1,[R1, #+22]
   \   00000086   0x4288             CMP      R0,R1
   \   00000088   0xD10B             BNE      ??ble_evt_dispatch_9
    312                         {
    313                         serviceLEDState &= ~tmp;
   \   0000008A   0x....             LDR      R0,??DataTable7_2
   \   0000008C   0x7800             LDRB     R0,[R0, #+0]
   \   0000008E   0x43A0             BICS     R0,R0,R4
   \   00000090   0x....             LDR      R1,??DataTable7_2
   \   00000092   0x7008             STRB     R0,[R1, #+0]
    314                         TS_SetLED(serviceLEDState << 2);
   \   00000094   0x....             LDR      R0,??DataTable7_2
   \   00000096   0x7800             LDRB     R0,[R0, #+0]
   \   00000098   0x0080             LSLS     R0,R0,#+2
   \   0000009A   0xB2C0             UXTB     R0,R0
   \   0000009C   0x.... 0x....      BL       TS_SetLED
   \   000000A0   0xE082             B        ??ble_evt_dispatch_6
    315                         }
    316          
    317                      else if (p_evt_write->handle == serviceLED.ledStateHandle.value_handle)
   \                     ??ble_evt_dispatch_9: (+1)
   \   000000A2   0x8828             LDRH     R0,[R5, #+0]
   \   000000A4   0x....             LDR      R1,??DataTable7_1
   \   000000A6   0x88C9             LDRH     R1,[R1, #+6]
   \   000000A8   0x4288             CMP      R0,R1
   \   000000AA   0xD108             BNE      ??ble_evt_dispatch_10
    318                         {
    319                         serviceLEDState = tmp;
   \   000000AC   0x....             LDR      R0,??DataTable7_2
   \   000000AE   0x7004             STRB     R4,[R0, #+0]
    320                         TS_SetLED(serviceLEDState << 2);
   \   000000B0   0x....             LDR      R0,??DataTable7_2
   \   000000B2   0x7800             LDRB     R0,[R0, #+0]
   \   000000B4   0x0080             LSLS     R0,R0,#+2
   \   000000B6   0xB2C0             UXTB     R0,R0
   \   000000B8   0x.... 0x....      BL       TS_SetLED
   \   000000BC   0xE074             B        ??ble_evt_dispatch_6
    321                         }
    322          
    323                      else if (p_evt_write->handle == serviceLED.txpower.value_handle)
   \                     ??ble_evt_dispatch_10: (+1)
   \   000000BE   0x8828             LDRH     R0,[R5, #+0]
   \   000000C0   0x....             LDR      R1,??DataTable7_1
   \   000000C2   0x8CC9             LDRH     R1,[R1, #+38]
   \   000000C4   0x4288             CMP      R0,R1
   \   000000C6   0xD116             BNE      ??ble_evt_dispatch_11
    324                         {
    325                         uint8_t err_code;
    326          
    327                         err_code = sd_ble_gap_tx_power_set (tmp);
   \   000000C8   0x0020             MOVS     R0,R4
   \   000000CA   0xB240             SXTB     R0,R0
   \   000000CC   0xDF77             SVC      0x77
    328                         printf("Write TX power returns %02x %04X\n", tmp, err_code);
   \   000000CE   0xB2C0             UXTB     R0,R0
   \   000000D0   0x0002             MOVS     R2,R0
   \   000000D2   0xB2E4             UXTB     R4,R4
   \   000000D4   0x0021             MOVS     R1,R4
   \   000000D6   0x....             LDR      R0,??DataTable7_3
   \   000000D8   0x.... 0x....      BL       printf
    329                         UART0_TxFlush ();
   \   000000DC   0x.... 0x....      BL       UART0_TxFlush
    330          
    331                         err_code = sd_ble_gap_rssi_start (m_conn_handle);
   \   000000E0   0x....             LDR      R0,??DataTable5_3
   \   000000E2   0x8800             LDRH     R0,[R0, #+0]
   \   000000E4   0xDF83             SVC      0x83
    332                         printf("Error code from RSSI is %u\n", err_code);
   \   000000E6   0xB2C0             UXTB     R0,R0
   \   000000E8   0x0001             MOVS     R1,R0
   \   000000EA   0x....             LDR      R0,??DataTable7_4
   \   000000EC   0x.... 0x....      BL       printf
    333                         UART0_TxFlush ();
   \   000000F0   0x.... 0x....      BL       UART0_TxFlush
   \   000000F4   0xE058             B        ??ble_evt_dispatch_6
    334                         }
    335          
    336                      else if (p_evt_write->handle == serviceLock.lockStateHandle.value_handle)
   \                     ??ble_evt_dispatch_11: (+1)
   \   000000F6   0x8828             LDRH     R0,[R5, #+0]
   \   000000F8   0x....             LDR      R1,??DataTable7_5
   \   000000FA   0x88C9             LDRH     R1,[R1, #+6]
   \   000000FC   0x4288             CMP      R0,R1
   \   000000FE   0xD127             BNE      ??ble_evt_dispatch_12
    337                         {
    338                         printf("Got lock write of %u\n", tmp);
   \   00000100   0xB2E4             UXTB     R4,R4
   \   00000102   0x0021             MOVS     R1,R4
   \   00000104   0x....             LDR      R0,??DataTable7_6
   \   00000106   0x.... 0x....      BL       printf
    339                         if (tmp <= 1)
   \   0000010A   0xB2E4             UXTB     R4,R4
   \   0000010C   0x2C02             CMP      R4,#+2
   \   0000010E   0xDA4B             BGE      ??ble_evt_dispatch_6
    340                            {
    341                            if (tmp != localLockState)
   \   00000110   0x....             LDR      R0,??DataTable7_7
   \   00000112   0x7800             LDRB     R0,[R0, #+0]
   \   00000114   0xB2E4             UXTB     R4,R4
   \   00000116   0x4284             CMP      R4,R0
   \   00000118   0xD014             BEQ      ??ble_evt_dispatch_13
    342                               {
    343                               printf("Should be moving motor\n");
   \   0000011A   0x....             LDR      R0,??DataTable7_8
   \   0000011C   0x.... 0x....      BL       printf
    344                               localLockState = tmp;
   \   00000120   0x....             LDR      R0,??DataTable7_7
   \   00000122   0x7004             STRB     R4,[R0, #+0]
    345                               Timer2_Start();
   \   00000124   0x.... 0x....      BL       Timer2_Start
    346                               Motor_Lock (localLockState == 1, MOTOR_LOCK_COUNT);
   \   00000128   0x....             LDR      R0,??DataTable7_7
   \   0000012A   0x7800             LDRB     R0,[R0, #+0]
   \   0000012C   0x2801             CMP      R0,#+1
   \   0000012E   0xD101             BNE      ??ble_evt_dispatch_14
   \   00000130   0x2001             MOVS     R0,#+1
   \   00000132   0xE000             B        ??ble_evt_dispatch_15
   \                     ??ble_evt_dispatch_14: (+1)
   \   00000134   0x2000             MOVS     R0,#+0
   \                     ??ble_evt_dispatch_15: (+1)
   \   00000136   0x2146             MOVS     R1,#+70
   \   00000138   0xB2C0             UXTB     R0,R0
   \   0000013A   0x.... 0x....      BL       Motor_Lock
    347                               Timer2_Stop();
   \   0000013E   0x.... 0x....      BL       Timer2_Stop
   \   00000142   0xE031             B        ??ble_evt_dispatch_6
    348                               }
    349                            else
    350                               printf("not moving motor %u\n", tmp);
   \                     ??ble_evt_dispatch_13: (+1)
   \   00000144   0xB2E4             UXTB     R4,R4
   \   00000146   0x0021             MOVS     R1,R4
   \   00000148   0x....             LDR      R0,??DataTable7_9
   \   0000014A   0x.... 0x....      BL       printf
   \   0000014E   0xE02B             B        ??ble_evt_dispatch_6
    351                            }
    352                         }
    353          
    354                      else if (p_evt_write->handle == serviceLock.lockShiftHandle.value_handle)
   \                     ??ble_evt_dispatch_12: (+1)
   \   00000150   0x8828             LDRH     R0,[R5, #+0]
   \   00000152   0x....             LDR      R1,??DataTable7_5
   \   00000154   0x89C9             LDRH     R1,[R1, #+14]
   \   00000156   0x4288             CMP      R0,R1
   \   00000158   0xD116             BNE      ??ble_evt_dispatch_16
    355                         {
    356                         printf("Got lock shift of %u\n", tmp);
   \   0000015A   0xB2E4             UXTB     R4,R4
   \   0000015C   0x0021             MOVS     R1,R4
   \   0000015E   0x....             LDR      R0,??DataTable7_10
   \   00000160   0x.... 0x....      BL       printf
    357                         if (tmp <= 1)
   \   00000164   0xB2E4             UXTB     R4,R4
   \   00000166   0x2C02             CMP      R4,#+2
   \   00000168   0xDA1E             BGE      ??ble_evt_dispatch_6
    358                            {
    359                            Timer2_Start();
   \   0000016A   0x.... 0x....      BL       Timer2_Start
    360                            Motor_Lock (tmp, 10);
   \   0000016E   0xB2E4             UXTB     R4,R4
   \   00000170   0x2C00             CMP      R4,#+0
   \   00000172   0xD001             BEQ      ??ble_evt_dispatch_17
   \   00000174   0x2001             MOVS     R0,#+1
   \   00000176   0xE000             B        ??ble_evt_dispatch_18
   \                     ??ble_evt_dispatch_17: (+1)
   \   00000178   0x2000             MOVS     R0,#+0
   \                     ??ble_evt_dispatch_18: (+1)
   \   0000017A   0x210A             MOVS     R1,#+10
   \   0000017C   0xB2C0             UXTB     R0,R0
   \   0000017E   0x.... 0x....      BL       Motor_Lock
    361                            Timer2_Stop();
   \   00000182   0x.... 0x....      BL       Timer2_Stop
   \   00000186   0xE00F             B        ??ble_evt_dispatch_6
    362                            }
    363                         }
    364          
    365                      else if (p_evt_write->handle == serviceLock.lockInvertHandle.value_handle)
   \                     ??ble_evt_dispatch_16: (+1)
   \   00000188   0x8828             LDRH     R0,[R5, #+0]
   \   0000018A   0x....             LDR      R1,??DataTable7_5
   \   0000018C   0x8AC9             LDRH     R1,[R1, #+22]
   \   0000018E   0x4288             CMP      R0,R1
   \   00000190   0xD10A             BNE      ??ble_evt_dispatch_6
    366                         {
    367                         localLockState ^= 0x01;
   \   00000192   0x....             LDR      R0,??DataTable7_7
   \   00000194   0x7800             LDRB     R0,[R0, #+0]
   \   00000196   0x2101             MOVS     R1,#+1
   \   00000198   0x4041             EORS     R1,R1,R0
   \   0000019A   0x....             LDR      R0,??DataTable7_7
   \   0000019C   0x7001             STRB     R1,[R0, #+0]
    368                         printf("Lock state is now %u\n", localLockState);
   \   0000019E   0x....             LDR      R0,??DataTable7_7
   \   000001A0   0x7801             LDRB     R1,[R0, #+0]
   \   000001A2   0x....             LDR      R0,??DataTable7_11
   \   000001A4   0x.... 0x....      BL       printf
    369                         }
    370          
    371                      }
    372                   break;
   \                     ??ble_evt_dispatch_6: (+1)
   \   000001A8   0xE00A             B        ??ble_evt_dispatch_5
    373                   }
    374          
    375                case BLE_GAP_EVT_RSSI_CHANGED:
    376                   printf("got RSSI of %d\n", p_ble_evt->evt.gap_evt.params.rssi_changed.rssi);
   \                     ??ble_evt_dispatch_2: (+1)
   \   000001AA   0x2006             MOVS     R0,#+6
   \   000001AC   0x5629             LDRSB    R1,[R5, R0]
   \   000001AE   0x....             LDR      R0,??DataTable7_12
   \   000001B0   0x.... 0x....      BL       printf
    377                   UART0_TxFlush ();
   \   000001B4   0x.... 0x....      BL       UART0_TxFlush
    378                   txpower[1] = p_ble_evt->evt.gap_evt.params.rssi_changed.rssi;
   \   000001B8   0x79A8             LDRB     R0,[R5, #+6]
   \   000001BA   0x....             LDR      R1,??DataTable8
   \   000001BC   0x7048             STRB     R0,[R1, #+1]
    379                   break;
   \   000001BE   0xE7FF             B        ??ble_evt_dispatch_5
    380          
    381                default:
    382                   // No implementation needed.
    383                   break;
    384                }
    385          }
   \                     ??ble_evt_dispatch_4: (+1)
   \                     ??ble_evt_dispatch_5: (+1)
   \   000001C0   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    386          
    387          
    388          /**@brief Function for dispatching a system event to interested modules.
    389           *
    390           * @details This function is called from the System event interrupt handler after a system
    391           *          event has been received.
    392           *
    393           * @param[in]   sys_evt   System stack event.
    394           */

   \                                 In section .text, align 2, keep-with-next
    395          void sys_evt_dispatch(uint32_t sys_evt)
    396          {
   \                     sys_evt_dispatch: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    397             printf("got sys_evt_dispatch\n");
   \   00000002   0x....             LDR      R0,??DataTable8_1
   \   00000004   0x.... 0x....      BL       printf
    398             UART0_TxFlush ();
   \   00000008   0x.... 0x....      BL       UART0_TxFlush
    399          #if 0
    400              pstorage_sys_event_handler(sys_evt);
    401          #endif
    402          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    403          
    404          
    405          /*
    406          **  GAP initialization.
    407          **
    408          **  This function sets up all the necessary GAP (Generic Access Profile) parameters of the
    409          **  device including the device name, appearance, and the preferred connection parameters.
    410          **
    411          **  Sets:
    412          **  #1). Sets the security mode. For now, using OPEN which is mode 1, level 1.
    413          **
    414          **  #2). Assigns the device name. For now this will by "Skylock" followed by an ASCII serial number.
    415          **
    416          **  #3). Connection parameters. The way this works is once we enter a connection (we are the server), the client will transmit
    417          **       a connection event at some rate. We can choose to listen to all of these (which wastes energy so we really don't want
    418          **       to listen to all of them). If we want to send some data though we have to wait for a connection event and then we
    419          **       can send something. So the key things you want to accomplish here are the following:
    420          **
    421          **       a). What rate do we want to hit the client if we have something to send? This should most likely be our minimum
    422          **           connection event time.
    423          **
    424          **       b). The reverse of this is how fast do we want the device to respond to a command the client
    425          **           has. If we don't listen to every connection event then we have to figure out how many we choose to miss for our
    426          **           latency response time. The Slave latency should address this although its not clear with this interface if we
    427          **           are specifying how many events we are allowed to miss? I think that might be what we are providing. So the
    428          **           slave latency in time would be the minimum connection interval * slave latency. Book I'm reading argues it
    429          **           makes no sense to have an effictive slave latency less than 300 mSec or more than 1 second.
    430          **
    431          **       c). The supervisor timeout then needs to be something that is longer than the minimum connection interval * slave latency.
    432          **           Because if we allow the device to miss multiple connection events, you can't allow it to miss so many that it now
    433          **           reaches the timeout condition. In reading, it is suggested that you set this up so you have a minimum of at least
    434          **           6 chances to hear a connection event before you allow a timeout to happen.
    435          **
    436          **       d). Not sure what the maximum connection interval is supposed to be. I guess the easy answer is set them the same? I suppose
    437          **           it may be best to provide a range though in case there are some negotiations to deal with.
    438          **
    439          **       e). Skylock doesn't have to be that quick. A response time to user commands within 1/2 a second seems fine. Also, the speed
    440          **           the Skylock needs to push a message probably isn't that fast either. So given that, lets go with the following:
    441          **
    442          **           Minimum connection interval of 100 mSec
    443          **           Maximum connection interval of 150 mSec
    444          **           Slave Latency (5 failures in a row allowed)
    445          **           Connection Timeout (2 seconds)
    446          */
    447          
    448          //#define MIN_CONN_INTERVAL               (MSEC_TO_UNITS(100, UNIT_1_25_MS))
    449          #define MIN_CONN_INTERVAL               (MSEC_TO_UNITS(30, UNIT_1_25_MS))  // IPhone BLE apps keeps wanting 30 msec or we disconnect
    450          #define MAX_CONN_INTERVAL               (MSEC_TO_UNITS(150, UNIT_1_25_MS))
    451          #define SLAVE_LATENCY                   (5)
    452          #define CONN_SUP_TIMEOUT                (MSEC_TO_UNITS(2000, UNIT_10_MS))
    453          

   \                                 In section .text, align 2, keep-with-next
    454          void
    455          gap_params_init (void)
    456          {
   \                     gap_params_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    457             ble_gap_conn_params_t   gap_conn_params;
    458             ble_gap_conn_sec_mode_t sec_mode;
    459          
    460                /*
    461                ** For now, set security mode to OPEN
    462                ** Also provide the device name that we will advertise. Should probably be "Skylock" plus
    463                ** a serial number or something so we can tell devices apart.
    464                */
    465             sec_mode.sm = 1;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x4669             MOV      R1,SP
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    466             sec_mode.lv = 1;
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000010   0x0F00             LSRS     R0,R0,#+28
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x4301             ORRS     R1,R1,R0
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x7001             STRB     R1,[R0, #+0]
    467             sprintf((char *)UTIL_tmpBuffer, "Skylock %08u", 1);
   \   0000001A   0x2201             MOVS     R2,#+1
   \   0000001C   0x....             LDR      R1,??DataTable7_13
   \   0000001E   0x....             LDR      R0,??DataTable10
   \   00000020   0x.... 0x....      BL       sprintf
    468             SKY_check_error (sd_ble_gap_device_name_set (&sec_mode, (char const *)UTIL_tmpBuffer, strlen((char *)UTIL_tmpBuffer)));
   \   00000024   0x....             LDR      R0,??DataTable10
   \   00000026   0x.... 0x....      BL       strlen
   \   0000002A   0x0002             MOVS     R2,R0
   \   0000002C   0xB292             UXTH     R2,R2
   \   0000002E   0x....             LDR      R1,??DataTable10
   \   00000030   0x4668             MOV      R0,SP
   \   00000032   0xDF7C             SVC      0x7C
   \   00000034   0x.... 0x....      BL       SKY_check_error
    469          
    470             memset (&gap_conn_params, 0, sizeof(gap_conn_params));
   \   00000038   0x2108             MOVS     R1,#+8
   \   0000003A   0x2200             MOVS     R2,#+0
   \   0000003C   0xAC01             ADD      R4,SP,#+4
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       __aeabi_memset
    471          
    472             gap_conn_params.min_conn_interval = MIN_CONN_INTERVAL;
   \   00000044   0x2018             MOVS     R0,#+24
   \   00000046   0x4669             MOV      R1,SP
   \   00000048   0x8088             STRH     R0,[R1, #+4]
    473             gap_conn_params.max_conn_interval = MAX_CONN_INTERVAL;
   \   0000004A   0x2078             MOVS     R0,#+120
   \   0000004C   0xA901             ADD      R1,SP,#+4
   \   0000004E   0x8048             STRH     R0,[R1, #+2]
    474             gap_conn_params.slave_latency     = SLAVE_LATENCY;
   \   00000050   0x2005             MOVS     R0,#+5
   \   00000052   0xA901             ADD      R1,SP,#+4
   \   00000054   0x8088             STRH     R0,[R1, #+4]
    475             gap_conn_params.conn_sup_timeout  = CONN_SUP_TIMEOUT;
   \   00000056   0x20C8             MOVS     R0,#+200
   \   00000058   0xA901             ADD      R1,SP,#+4
   \   0000005A   0x80C8             STRH     R0,[R1, #+6]
    476          
    477             SKY_check_error (sd_ble_gap_ppcp_set (&gap_conn_params));
   \   0000005C   0xA801             ADD      R0,SP,#+4
   \   0000005E   0xDF7A             SVC      0x7A
   \   00000060   0x.... 0x....      BL       SKY_check_error
    478          }
   \   00000064   0xBD1F             POP      {R0-R4,PC}       ;; return
    479          
    480          /**@brief Function for initializing the Advertising functionality.
    481           *
    482           * @details Encodes the required advertising data and passes it to the stack.
    483           *          Also builds a structure to be passed to the stack when starting advertising.
    484           */

   \                                 In section .text, align 2, keep-with-next
    485          void
    486          advertising_init(void)
    487          {
   \                     advertising_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB09E             SUB      SP,SP,#+120
    488             ble_advdata_t advdata;
    489             ble_advdata_t scanrsp;
    490          //   uint8_t       flags = BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE;
    491             uint8_t       flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   \   00000004   0x2006             MOVS     R0,#+6
   \   00000006   0x4669             MOV      R1,SP
   \   00000008   0x7108             STRB     R0,[R1, #+4]
    492          
    493             ble_uuid_t adv_uuids[] = {SKY_UUID_LED_SERVICE, serviceLED.uuid_type};
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x....             LDR      R1,??DataTable7_14
   \   0000000E   0x680A             LDR      R2,[R1, #0]
   \   00000010   0x6002             STR      R2,[R0, #0]
   \   00000012   0x....             LDR      R0,??DataTable11
   \   00000014   0x7880             LDRB     R0,[R0, #+2]
   \   00000016   0x4669             MOV      R1,SP
   \   00000018   0x7088             STRB     R0,[R1, #+2]
    494          
    495                // Build and set advertising data
    496             memset(&advdata, 0, sizeof(advdata));
   \   0000001A   0x2138             MOVS     R1,#+56
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0xAC02             ADD      R4,SP,#+8
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       __aeabi_memset
    497          
    498             advdata.name_type               = BLE_ADVDATA_FULL_NAME;
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0x4669             MOV      R1,SP
   \   0000002A   0x7208             STRB     R0,[R1, #+8]
    499             advdata.include_appearance      = true;
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0xA902             ADD      R1,SP,#+8
   \   00000030   0x7088             STRB     R0,[R1, #+2]
    500             advdata.flags.size              = sizeof(flags);
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xA902             ADD      R1,SP,#+8
   \   00000036   0x8088             STRH     R0,[R1, #+4]
    501             advdata.flags.p_data            = &flags;
   \   00000038   0xA801             ADD      R0,SP,#+4
   \   0000003A   0x9004             STR      R0,[SP, #+16]
    502          
    503             memset(&scanrsp, 0, sizeof(scanrsp));
   \   0000003C   0x2138             MOVS     R1,#+56
   \   0000003E   0x2200             MOVS     R2,#+0
   \   00000040   0xAC10             ADD      R4,SP,#+64
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0x.... 0x....      BL       __aeabi_memset
    504             scanrsp.uuids_complete.uuid_cnt = sizeof(adv_uuids) / sizeof(adv_uuids[0]);
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0xA910             ADD      R1,SP,#+64
   \   0000004C   0x8308             STRH     R0,[R1, #+24]
    505             scanrsp.uuids_complete.p_uuids  = adv_uuids;
   \   0000004E   0x4668             MOV      R0,SP
   \   00000050   0x9017             STR      R0,[SP, #+92]
    506          
    507             SKY_check_error (ble_advdata_set(&advdata, &scanrsp));
   \   00000052   0xA910             ADD      R1,SP,#+64
   \   00000054   0xA802             ADD      R0,SP,#+8
   \   00000056   0x.... 0x....      BL       ble_advdata_set
   \   0000005A   0x.... 0x....      BL       SKY_check_error
    508          }
   \   0000005E   0xB01E             ADD      SP,SP,#+120
   \   00000060   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x1523             DC16 5411
   \   00000002   0x00 0x00          DC8 0, 0
    509          
    510          
    511          /*
    512          ** This function is used to add a characteristic to a primary service
    513          */

   \                                 In section .text, align 2, keep-with-next
    514          void
    515          BLE_addCharacteristic (uint16_t serviceHandle, ble_gatts_char_handles_t *charHandle,
    516                                 uint8_t flag, char const *name, uint8_t *ptrData, uint8_t lenData, ble_uuid_t * uuid)
    517          {
   \                     BLE_addCharacteristic: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB08E             SUB      SP,SP,#+56
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001C             MOVS     R4,R3
    518             ble_gatts_char_md_t  char_md;
    519             ble_gatts_attr_t     attr_char_value;
    520             ble_gatts_attr_md_t  attr_md;
    521          
    522             memset(&char_md, 0, sizeof(char_md));
   \   0000000A   0x211C             MOVS     R1,#+28
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0xAF01             ADD      R7,SP,#+4
   \   00000010   0x0038             MOVS     R0,R7
   \   00000012   0x.... 0x....      BL       __aeabi_memset
    523             memset(&attr_md, 0, sizeof(attr_md));
   \   00000016   0x2103             MOVS     R1,#+3
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x466F             MOV      R7,SP
   \   0000001C   0x0038             MOVS     R0,R7
   \   0000001E   0x.... 0x....      BL       __aeabi_memset
    524             memset(&attr_char_value, 0, sizeof(attr_char_value));
   \   00000022   0x2114             MOVS     R1,#+20
   \   00000024   0x2200             MOVS     R2,#+0
   \   00000026   0xAF08             ADD      R7,SP,#+32
   \   00000028   0x0038             MOVS     R0,R7
   \   0000002A   0x.... 0x....      BL       __aeabi_memset
    525          
    526             if (flag & BLE_CHAR_READ)
   \   0000002E   0x07F0             LSLS     R0,R6,#+31
   \   00000030   0xD515             BPL      ??BLE_addCharacteristic_0
    527                {
    528                char_md.char_props.read   = 1;
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x7900             LDRB     R0,[R0, #+4]
   \   00000036   0x2102             MOVS     R1,#+2
   \   00000038   0x4301             ORRS     R1,R1,R0
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x7101             STRB     R1,[R0, #+4]
    529                BLE_GAP_CONN_SEC_MODE_SET_OPEN (&attr_md.read_perm);
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x21F0             MOVS     R1,#+240
   \   00000044   0x4001             ANDS     R1,R1,R0
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x4308             ORRS     R0,R0,R1
   \   0000004A   0x4669             MOV      R1,SP
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
   \   0000004E   0x4668             MOV      R0,SP
   \   00000050   0x7800             LDRB     R0,[R0, #+0]
   \   00000052   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000054   0x0F00             LSRS     R0,R0,#+28
   \   00000056   0x2110             MOVS     R1,#+16
   \   00000058   0x4301             ORRS     R1,R1,R0
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x7001             STRB     R1,[R0, #+0]
    530                }
    531          
    532             if (flag & BLE_CHAR_WRITE)
   \                     ??BLE_addCharacteristic_0: (+1)
   \   0000005E   0x07B0             LSLS     R0,R6,#+30
   \   00000060   0xD515             BPL      ??BLE_addCharacteristic_1
    533                {
    534                char_md.char_props.write  = 1;
   \   00000062   0x4668             MOV      R0,SP
   \   00000064   0x7900             LDRB     R0,[R0, #+4]
   \   00000066   0x2108             MOVS     R1,#+8
   \   00000068   0x4301             ORRS     R1,R1,R0
   \   0000006A   0x4668             MOV      R0,SP
   \   0000006C   0x7101             STRB     R1,[R0, #+4]
    535                BLE_GAP_CONN_SEC_MODE_SET_OPEN (&attr_md.write_perm);
   \   0000006E   0x4668             MOV      R0,SP
   \   00000070   0x7840             LDRB     R0,[R0, #+1]
   \   00000072   0x21F0             MOVS     R1,#+240
   \   00000074   0x4001             ANDS     R1,R1,R0
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0x4308             ORRS     R0,R0,R1
   \   0000007A   0x4669             MOV      R1,SP
   \   0000007C   0x7048             STRB     R0,[R1, #+1]
   \   0000007E   0x4668             MOV      R0,SP
   \   00000080   0x7840             LDRB     R0,[R0, #+1]
   \   00000082   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000084   0x0F00             LSRS     R0,R0,#+28
   \   00000086   0x2110             MOVS     R1,#+16
   \   00000088   0x4301             ORRS     R1,R1,R0
   \   0000008A   0x4668             MOV      R0,SP
   \   0000008C   0x7041             STRB     R1,[R0, #+1]
    536                }
    537          
    538             char_md.p_char_user_desc  = (uint8_t *)name;
   \                     ??BLE_addCharacteristic_1: (+1)
   \   0000008E   0x9402             STR      R4,[SP, #+8]
    539             char_md.char_user_desc_max_size = strlen(name);
   \   00000090   0x0020             MOVS     R0,R4
   \   00000092   0x.... 0x....      BL       strlen
   \   00000096   0xA901             ADD      R1,SP,#+4
   \   00000098   0x8108             STRH     R0,[R1, #+8]
    540             char_md.char_user_desc_size =  strlen(name);
   \   0000009A   0x0020             MOVS     R0,R4
   \   0000009C   0x.... 0x....      BL       strlen
   \   000000A0   0xA901             ADD      R1,SP,#+4
   \   000000A2   0x8148             STRH     R0,[R1, #+10]
    541             char_md.p_char_pf         = NULL;
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x9004             STR      R0,[SP, #+16]
    542             char_md.p_user_desc_md    = NULL;
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x9005             STR      R0,[SP, #+20]
    543             char_md.p_cccd_md         = NULL;
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x9006             STR      R0,[SP, #+24]
    544             char_md.p_sccd_md         = NULL;
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x9007             STR      R0,[SP, #+28]
    545          
    546             attr_md.vloc       = BLE_GATTS_VLOC_USER;
   \   000000B4   0x4668             MOV      R0,SP
   \   000000B6   0x7880             LDRB     R0,[R0, #+2]
   \   000000B8   0x21F9             MOVS     R1,#+249
   \   000000BA   0x4001             ANDS     R1,R1,R0
   \   000000BC   0x2004             MOVS     R0,#+4
   \   000000BE   0x4308             ORRS     R0,R0,R1
   \   000000C0   0x4669             MOV      R1,SP
   \   000000C2   0x7088             STRB     R0,[R1, #+2]
    547             attr_md.rd_auth    = 0;
   \   000000C4   0x4668             MOV      R0,SP
   \   000000C6   0x7880             LDRB     R0,[R0, #+2]
   \   000000C8   0x21F7             MOVS     R1,#+247
   \   000000CA   0x4001             ANDS     R1,R1,R0
   \   000000CC   0x4668             MOV      R0,SP
   \   000000CE   0x7081             STRB     R1,[R0, #+2]
    548             attr_md.wr_auth    = 0;
   \   000000D0   0x4668             MOV      R0,SP
   \   000000D2   0x7880             LDRB     R0,[R0, #+2]
   \   000000D4   0x21EF             MOVS     R1,#+239
   \   000000D6   0x4001             ANDS     R1,R1,R0
   \   000000D8   0x4668             MOV      R0,SP
   \   000000DA   0x7081             STRB     R1,[R0, #+2]
    549             attr_md.vlen       = 0;
   \   000000DC   0x4668             MOV      R0,SP
   \   000000DE   0x7880             LDRB     R0,[R0, #+2]
   \   000000E0   0x21FE             MOVS     R1,#+254
   \   000000E2   0x4001             ANDS     R1,R1,R0
   \   000000E4   0x4668             MOV      R0,SP
   \   000000E6   0x7081             STRB     R1,[R0, #+2]
    550          
    551             attr_char_value.p_uuid       = uuid;
   \   000000E8   0x9816             LDR      R0,[SP, #+88]
   \   000000EA   0x9008             STR      R0,[SP, #+32]
    552             attr_char_value.p_attr_md    = &attr_md;
   \   000000EC   0x4668             MOV      R0,SP
   \   000000EE   0x9009             STR      R0,[SP, #+36]
   \   000000F0   0x9815             LDR      R0,[SP, #+84]
    553             attr_char_value.init_len     = lenData;
   \   000000F2   0xB2C0             UXTB     R0,R0
   \   000000F4   0xA908             ADD      R1,SP,#+32
   \   000000F6   0x8108             STRH     R0,[R1, #+8]
    554             attr_char_value.init_offs    = 0;
   \   000000F8   0x2100             MOVS     R1,#+0
   \   000000FA   0xAA08             ADD      R2,SP,#+32
   \   000000FC   0x8151             STRH     R1,[R2, #+10]
    555             attr_char_value.max_len      = lenData;
   \   000000FE   0xB2C0             UXTB     R0,R0
   \   00000100   0xA908             ADD      R1,SP,#+32
   \   00000102   0x8188             STRH     R0,[R1, #+12]
    556             attr_char_value.p_value      = ptrData;
   \   00000104   0x9814             LDR      R0,[SP, #+80]
   \   00000106   0x900C             STR      R0,[SP, #+48]
    557          
    558             SKY_check_error (sd_ble_gatts_characteristic_add (serviceHandle, &char_md, &attr_char_value, charHandle));
   \   00000108   0x002B             MOVS     R3,R5
   \   0000010A   0xAA08             ADD      R2,SP,#+32
   \   0000010C   0xA901             ADD      R1,SP,#+4
   \   0000010E   0x4668             MOV      R0,SP
   \   00000110   0x8F00             LDRH     R0,[R0, #+56]
   \   00000112   0xDFA2             SVC      0xA2
   \   00000114   0x.... 0x....      BL       SKY_check_error
    559          }
   \   00000118   0xB00F             ADD      SP,SP,#+60
   \   0000011A   0xBDF0             POP      {R4-R7,PC}       ;; return
    560          
    561          /*
    562          ** Setup all the services we are going to provide on this device. All services will be primary unless
    563          ** otherwise noted. For each service there will be characteristics
    564          **
    565          ** Service: LED
    566          **    Characteristic #1: LED ON (Write only)
    567          **    Characteristic #2: LED OFF (Write only)
    568          **    Characteristic #3: LED Toggle (Write only)
    569          **    Characteristic #4: LED State (Read only)
    570          **
    571          **    All characteristics take a 1 byte field that maps to the LED's. There are 6 LED's so the low 6 bits
    572          **    each represent one LED. Each characteristic works likes by only addressing the LED's that have a bit
    573          **    set. So if you sent LED ON with 0x01, that would light the first LED. if you then sent LED ON with 0x02
    574          **    that would light the 2nd LED, and the 1st LED would still be lit. Sending LED ON with 0x3F would turn
    575          **    all LED's on.
    576          */

   \                                 In section .text, align 2, keep-with-next
    577          void
    578          services_init (void)
    579          {
   \                     services_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
    580             ble_uuid128_t        base_uuid = {SKY_UUID_BASE};
   \   00000004   0xA804             ADD      R0,SP,#+16
   \   00000006   0x....             LDR      R1,??DataTable11_1
   \   00000008   0x2210             MOVS     R2,#+16
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy4
    581             ble_uuid_t           uuid;
    582          
    583                /* Initialize service structure */
    584             serviceLED.conn_handle = BLE_CONN_HANDLE_INVALID;
   \   0000000E   0x....             LDR      R0,??DataTable11_2  ;; 0xffff
   \   00000010   0x....             LDR      R1,??DataTable11
   \   00000012   0x8088             STRH     R0,[R1, #+4]
    585             serviceLock.conn_handle = BLE_CONN_HANDLE_INVALID;
   \   00000014   0x....             LDR      R0,??DataTable11_2  ;; 0xffff
   \   00000016   0x....             LDR      R1,??DataTable12
   \   00000018   0x8088             STRH     R0,[R1, #+4]
    586          
    587                /* Register the Vendor specific 128-bit UUID */
    588             SKY_check_error (sd_ble_uuid_vs_add (&base_uuid, &serviceLED.uuid_type));
   \   0000001A   0x....             LDR      R1,??DataTable11_3
   \   0000001C   0xA804             ADD      R0,SP,#+16
   \   0000001E   0xDF63             SVC      0x63
   \   00000020   0x.... 0x....      BL       SKY_check_error
    589          
    590             uuid.type = serviceLED.uuid_type;
   \   00000024   0x....             LDR      R0,??DataTable11
   \   00000026   0x7880             LDRB     R0,[R0, #+2]
   \   00000028   0xA903             ADD      R1,SP,#+12
   \   0000002A   0x7088             STRB     R0,[R1, #+2]
    591             uuid.uuid = SKY_UUID_LED_SERVICE;
   \   0000002C   0x....             LDR      R0,??DataTable11_4  ;; 0x1523
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x8188             STRH     R0,[R1, #+12]
    592          
    593             SKY_check_error (sd_ble_gatts_service_add (BLE_GATTS_SRVC_TYPE_PRIMARY, &uuid, &serviceLED.service_handle));
   \   00000032   0x....             LDR      R2,??DataTable11
   \   00000034   0xA903             ADD      R1,SP,#+12
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0xDFA0             SVC      0xA0
   \   0000003A   0x.... 0x....      BL       SKY_check_error
    594          
    595             uuid.uuid = SKY_UUID_LED_STATE;
   \   0000003E   0x....             LDR      R0,??DataTable11_5  ;; 0x1524
   \   00000040   0x4669             MOV      R1,SP
   \   00000042   0x8188             STRH     R0,[R1, #+12]
    596             BLE_addCharacteristic (serviceLED.service_handle, &serviceLED.ledStateHandle, BLE_CHAR_READ | BLE_CHAR_WRITE,
    597                                    "LED State", &serviceLEDState, sizeof (uint8_t), &uuid);
   \   00000044   0xA803             ADD      R0,SP,#+12
   \   00000046   0x9002             STR      R0,[SP, #+8]
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x9001             STR      R0,[SP, #+4]
   \   0000004C   0x....             LDR      R0,??DataTable11_6
   \   0000004E   0x9000             STR      R0,[SP, #+0]
   \   00000050   0x....             LDR      R3,??DataTable11_7
   \   00000052   0x2203             MOVS     R2,#+3
   \   00000054   0x....             LDR      R1,??DataTable11_8
   \   00000056   0x....             LDR      R0,??DataTable11
   \   00000058   0x8800             LDRH     R0,[R0, #+0]
   \   0000005A   0x.... 0x....      BL       BLE_addCharacteristic
    598          
    599             uuid.uuid = SKY_UUID_LED_ON;
   \   0000005E   0x....             LDR      R0,??DataTable11_9  ;; 0x1525
   \   00000060   0x4669             MOV      R1,SP
   \   00000062   0x8188             STRH     R0,[R1, #+12]
    600             BLE_addCharacteristic (serviceLED.service_handle, &serviceLED.ledOnHandle, BLE_CHAR_WRITE,
    601                                    "LED On", &serviceLEDWrite, sizeof (uint8_t), &uuid);
   \   00000064   0xA803             ADD      R0,SP,#+12
   \   00000066   0x9002             STR      R0,[SP, #+8]
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x9001             STR      R0,[SP, #+4]
   \   0000006C   0x....             LDR      R0,??DataTable11_10
   \   0000006E   0x9000             STR      R0,[SP, #+0]
   \   00000070   0x....             LDR      R3,??DataTable11_11
   \   00000072   0x2202             MOVS     R2,#+2
   \   00000074   0x....             LDR      R1,??DataTable11_12
   \   00000076   0x....             LDR      R0,??DataTable11
   \   00000078   0x8800             LDRH     R0,[R0, #+0]
   \   0000007A   0x.... 0x....      BL       BLE_addCharacteristic
    602          
    603             uuid.uuid = SKY_UUID_LED_OFF;
   \   0000007E   0x....             LDR      R0,??DataTable11_13  ;; 0x1526
   \   00000080   0x4669             MOV      R1,SP
   \   00000082   0x8188             STRH     R0,[R1, #+12]
    604             BLE_addCharacteristic (serviceLED.service_handle, &serviceLED.ledOffHandle, BLE_CHAR_WRITE,
    605                                    "LED Off", &serviceLEDWrite, sizeof (uint8_t), &uuid);
   \   00000084   0xA803             ADD      R0,SP,#+12
   \   00000086   0x9002             STR      R0,[SP, #+8]
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x9001             STR      R0,[SP, #+4]
   \   0000008C   0x....             LDR      R0,??DataTable11_10
   \   0000008E   0x9000             STR      R0,[SP, #+0]
   \   00000090   0x....             LDR      R3,??DataTable12_1
   \   00000092   0x2202             MOVS     R2,#+2
   \   00000094   0x....             LDR      R1,??DataTable12_2
   \   00000096   0x....             LDR      R0,??DataTable11
   \   00000098   0x8800             LDRH     R0,[R0, #+0]
   \   0000009A   0x.... 0x....      BL       BLE_addCharacteristic
    606          
    607             uuid.uuid = SKY_UUID_LED_TOGGLE;
   \   0000009E   0x....             LDR      R0,??DataTable12_3  ;; 0x1527
   \   000000A0   0x4669             MOV      R1,SP
   \   000000A2   0x8188             STRH     R0,[R1, #+12]
    608             BLE_addCharacteristic (serviceLED.service_handle, &serviceLED.ledToggleHandle, BLE_CHAR_WRITE,
    609                                    "LED Toggle", &serviceLEDWrite, sizeof (uint8_t), &uuid);
   \   000000A4   0xA803             ADD      R0,SP,#+12
   \   000000A6   0x9002             STR      R0,[SP, #+8]
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0x9001             STR      R0,[SP, #+4]
   \   000000AC   0x....             LDR      R0,??DataTable11_10
   \   000000AE   0x9000             STR      R0,[SP, #+0]
   \   000000B0   0x....             LDR      R3,??DataTable12_4
   \   000000B2   0x2202             MOVS     R2,#+2
   \   000000B4   0x....             LDR      R1,??DataTable12_5
   \   000000B6   0x....             LDR      R0,??DataTable11
   \   000000B8   0x8800             LDRH     R0,[R0, #+0]
   \   000000BA   0x.... 0x....      BL       BLE_addCharacteristic
    610          
    611             uuid.uuid = SKY_UUID_TXPOWER;
   \   000000BE   0x....             LDR      R0,??DataTable12_6  ;; 0x1528
   \   000000C0   0x4669             MOV      R1,SP
   \   000000C2   0x8188             STRH     R0,[R1, #+12]
    612             BLE_addCharacteristic (serviceLED.service_handle, &serviceLED.txpower, BLE_CHAR_WRITE | BLE_CHAR_READ,
    613                                    "TX Power", txpower, sizeof(txpower), &uuid);
   \   000000C4   0xA803             ADD      R0,SP,#+12
   \   000000C6   0x9002             STR      R0,[SP, #+8]
   \   000000C8   0x2002             MOVS     R0,#+2
   \   000000CA   0x9001             STR      R0,[SP, #+4]
   \   000000CC   0x....             LDR      R0,??DataTable8
   \   000000CE   0x9000             STR      R0,[SP, #+0]
   \   000000D0   0x....             LDR      R3,??DataTable12_7
   \   000000D2   0x2203             MOVS     R2,#+3
   \   000000D4   0x....             LDR      R1,??DataTable12_8
   \   000000D6   0x....             LDR      R0,??DataTable11
   \   000000D8   0x8800             LDRH     R0,[R0, #+0]
   \   000000DA   0x.... 0x....      BL       BLE_addCharacteristic
    614          
    615             uuid.uuid = SKY_UUID_LOCK_SERVICE;
   \   000000DE   0x....             LDR      R0,??DataTable12_9  ;; 0x1529
   \   000000E0   0x4669             MOV      R1,SP
   \   000000E2   0x8188             STRH     R0,[R1, #+12]
    616          
    617             SKY_check_error (sd_ble_gatts_service_add (BLE_GATTS_SRVC_TYPE_PRIMARY, &uuid, &serviceLock.service_handle));
   \   000000E4   0x....             LDR      R2,??DataTable12
   \   000000E6   0xA903             ADD      R1,SP,#+12
   \   000000E8   0x2001             MOVS     R0,#+1
   \   000000EA   0xDFA0             SVC      0xA0
   \   000000EC   0x.... 0x....      BL       SKY_check_error
    618          
    619             uuid.uuid = SKY_UUID_LOCK_STATE;
   \   000000F0   0x....             LDR      R0,??DataTable12_10  ;; 0x152a
   \   000000F2   0x4669             MOV      R1,SP
   \   000000F4   0x8188             STRH     R0,[R1, #+12]
    620             BLE_addCharacteristic (serviceLock.service_handle, &serviceLock.lockStateHandle, BLE_CHAR_READ | BLE_CHAR_WRITE,
    621                                    "Lock State", &serviceLockState, sizeof (uint8_t), &uuid);
   \   000000F6   0xA803             ADD      R0,SP,#+12
   \   000000F8   0x9002             STR      R0,[SP, #+8]
   \   000000FA   0x2001             MOVS     R0,#+1
   \   000000FC   0x9001             STR      R0,[SP, #+4]
   \   000000FE   0x....             LDR      R0,??DataTable12_11
   \   00000100   0x9000             STR      R0,[SP, #+0]
   \   00000102   0x....             LDR      R3,??DataTable12_12
   \   00000104   0x2203             MOVS     R2,#+3
   \   00000106   0x....             LDR      R1,??DataTable12_13
   \   00000108   0x....             LDR      R0,??DataTable12
   \   0000010A   0x8800             LDRH     R0,[R0, #+0]
   \   0000010C   0x.... 0x....      BL       BLE_addCharacteristic
    622          
    623             uuid.uuid = SKY_UUID_LOCK_SHIFT;
   \   00000110   0x....             LDR      R0,??DataTable12_14  ;; 0x152b
   \   00000112   0x4669             MOV      R1,SP
   \   00000114   0x8188             STRH     R0,[R1, #+12]
    624             BLE_addCharacteristic (serviceLock.service_handle, &serviceLock.lockShiftHandle, BLE_CHAR_WRITE,
    625                                    "Lock Shift", &serviceLockShift, sizeof (uint8_t), &uuid);
   \   00000116   0xA803             ADD      R0,SP,#+12
   \   00000118   0x9002             STR      R0,[SP, #+8]
   \   0000011A   0x2001             MOVS     R0,#+1
   \   0000011C   0x9001             STR      R0,[SP, #+4]
   \   0000011E   0x....             LDR      R0,??DataTable12_15
   \   00000120   0x9000             STR      R0,[SP, #+0]
   \   00000122   0x....             LDR      R3,??DataTable12_16
   \   00000124   0x2202             MOVS     R2,#+2
   \   00000126   0x....             LDR      R1,??DataTable12_17
   \   00000128   0x....             LDR      R0,??DataTable12
   \   0000012A   0x8800             LDRH     R0,[R0, #+0]
   \   0000012C   0x.... 0x....      BL       BLE_addCharacteristic
    626          
    627             uuid.uuid = SKY_UUID_LOCK_INVERT;
   \   00000130   0x....             LDR      R0,??DataTable12_18  ;; 0x152c
   \   00000132   0x4669             MOV      R1,SP
   \   00000134   0x8188             STRH     R0,[R1, #+12]
    628             BLE_addCharacteristic (serviceLock.service_handle, &serviceLock.lockInvertHandle, BLE_CHAR_WRITE,
    629                                    "Lock Invert", &serviceLockInvert, sizeof (uint8_t), &uuid);
   \   00000136   0xA803             ADD      R0,SP,#+12
   \   00000138   0x9002             STR      R0,[SP, #+8]
   \   0000013A   0x2001             MOVS     R0,#+1
   \   0000013C   0x9001             STR      R0,[SP, #+4]
   \   0000013E   0x....             LDR      R0,??DataTable12_19
   \   00000140   0x9000             STR      R0,[SP, #+0]
   \   00000142   0x....             LDR      R3,??DataTable12_20
   \   00000144   0x2202             MOVS     R2,#+2
   \   00000146   0x....             LDR      R1,??DataTable12_21
   \   00000148   0x....             LDR      R0,??DataTable12
   \   0000014A   0x8800             LDRH     R0,[R0, #+0]
   \   0000014C   0x.... 0x....      BL       BLE_addCharacteristic
    630          }
   \   00000150   0xB009             ADD      SP,SP,#+36
   \   00000152   0xBD00             POP      {PC}             ;; return
    631          
    632          
    633          
    634          #define APP_TIMER_PRESCALER             0                                           /**< Value of the RTC1 PRESCALER register. */
    635          #define APP_TIMER_MAX_TIMERS            4                                           /**< Maximum number of simultaneously created timers. */
    636          #define APP_TIMER_OP_QUEUE_SIZE         4                                           /**< Size of timer operation queues. */
    637          
    638          
    639          /**@brief Function for initializing the Connection Parameters module.
    640           */
    641          #define FIRST_CONN_PARAMS_UPDATE_DELAY  APP_TIMER_TICKS(20000, APP_TIMER_PRESCALER) /**< Time from initiating event (connect or start of notification) to first time sd_ble_gap_conn_param_update is called (15 seconds). */
    642          #define NEXT_CONN_PARAMS_UPDATE_DELAY   APP_TIMER_TICKS(5000, APP_TIMER_PRESCALER)  /**< Time between each call to sd_ble_gap_conn_param_update after the first call (5 seconds). */
    643          #define MAX_CONN_PARAMS_UPDATE_COUNT    3                                           /**< Number of attempts before giving up the connection parameter negotiation. */

   \                                 In section .text, align 2, keep-with-next
    644          static void on_conn_params_evt(ble_conn_params_evt_t * p_evt)
    645          {
   \                     on_conn_params_evt: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    646              uint32_t err_code;
    647          
    648              printf("Got on_conn_params_evt call %u\n", p_evt->evt_type);
   \   00000004   0x7821             LDRB     R1,[R4, #+0]
   \   00000006   0x....             LDR      R0,??DataTable12_22
   \   00000008   0x.... 0x....      BL       printf
    649              UART0_TxFlush ();
   \   0000000C   0x.... 0x....      BL       UART0_TxFlush
    650              if(p_evt->evt_type == BLE_CONN_PARAMS_EVT_FAILED)
   \   00000010   0x7820             LDRB     R0,[R4, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD109             BNE      ??on_conn_params_evt_0
    651              {
    652                  err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
   \   00000016   0x213B             MOVS     R1,#+59
   \   00000018   0x....             LDR      R0,??DataTable12_23
   \   0000001A   0x8800             LDRH     R0,[R0, #+0]
   \   0000001C   0xDF76             SVC      0x76
    653                  APP_ERROR_CHECK(err_code);
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD003             BEQ      ??on_conn_params_evt_1
   \   00000022   0x....             LDR      R2,??DataTable12_24
   \   00000024   0x....             LDR      R1,??DataTable12_25  ;; 0x28d
   \   00000026   0x.... 0x....      BL       app_error_handler
    654              }
    655          }
   \                     ??on_conn_params_evt_1: (+1)
   \                     ??on_conn_params_evt_0: (+1)
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
    656          

   \                                 In section .text, align 2, keep-with-next
    657          static void conn_params_error_handler(uint32_t nrf_error)
    658          {
   \                     conn_params_error_handler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    659             printf("conn_params_error_handler\n");
   \   00000004   0x....             LDR      R0,??DataTable12_26
   \   00000006   0x.... 0x....      BL       printf
    660             UART0_TxFlush ();
   \   0000000A   0x.... 0x....      BL       UART0_TxFlush
    661              APP_ERROR_HANDLER(nrf_error);
   \   0000000E   0x....             LDR      R2,??DataTable12_24
   \   00000010   0x....             LDR      R1,??DataTable12_27  ;; 0x295
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       app_error_handler
    662          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    663          

   \                                 In section .text, align 2, keep-with-next
    664          static void conn_params_init(void)
    665          {
   \                     conn_params_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
    666              ble_conn_params_init_t cp_init;
    667          
    668              memset(&cp_init, 0, sizeof(cp_init));
   \   00000004   0x211C             MOVS     R1,#+28
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x466C             MOV      R4,SP
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
    669          
    670              cp_init.p_conn_params                  = NULL;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9000             STR      R0,[SP, #+0]
    671              cp_init.first_conn_params_update_delay = FIRST_CONN_PARAMS_UPDATE_DELAY;
   \   00000014   0x20A0             MOVS     R0,#+160
   \   00000016   0x0300             LSLS     R0,R0,#+12       ;; #+655360
   \   00000018   0x9001             STR      R0,[SP, #+4]
    672              cp_init.next_conn_params_update_delay  = NEXT_CONN_PARAMS_UPDATE_DELAY;
   \   0000001A   0x20A0             MOVS     R0,#+160
   \   0000001C   0x0280             LSLS     R0,R0,#+10       ;; #+163840
   \   0000001E   0x9002             STR      R0,[SP, #+8]
    673              cp_init.max_conn_params_update_count   = MAX_CONN_PARAMS_UPDATE_COUNT;
   \   00000020   0x2003             MOVS     R0,#+3
   \   00000022   0x4669             MOV      R1,SP
   \   00000024   0x7308             STRB     R0,[R1, #+12]
    674              cp_init.start_on_notify_cccd_handle    = BLE_GATT_HANDLE_INVALID;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x4669             MOV      R1,SP
   \   0000002A   0x81C8             STRH     R0,[R1, #+14]
    675              cp_init.disconnect_on_fail             = false;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x7408             STRB     R0,[R1, #+16]
    676              cp_init.evt_handler                    = on_conn_params_evt;
   \   00000032   0x....             LDR      R0,??DataTable12_28
   \   00000034   0x9005             STR      R0,[SP, #+20]
    677              cp_init.error_handler                  = conn_params_error_handler;
   \   00000036   0x....             LDR      R0,??DataTable12_29
   \   00000038   0x9006             STR      R0,[SP, #+24]
    678          
    679              SKY_check_error (ble_conn_params_init(&cp_init));
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x.... 0x....      BL       ble_conn_params_init
   \   00000040   0x.... 0x....      BL       SKY_check_error
    680          }
   \   00000044   0xB008             ADD      SP,SP,#+32
   \   00000046   0xBD10             POP      {R4,PC}          ;; return
    681          
    682          
    683          
    684          
    685          /*
    686          ** This routine should get Bluetooth configured and up and running
    687          */

   \                                 In section .text, align 2, keep-with-next
    688          void
    689          BLE_Setup (void)
    690          {
   \                     BLE_Setup: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    691             uint8_t latch_irq;
    692          
    693             ble_enable_params_t  ble_enable_params;
    694          
    695                // Initialize timer module, making it use the scheduler
    696             APP_TIMER_INIT(APP_TIMER_PRESCALER, APP_TIMER_MAX_TIMERS, APP_TIMER_OP_QUEUE_SIZE, true);
   \   00000002   0x....             LDR      R0,??DataTable12_30
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0x....             LDR      R3,??DataTable12_31
   \   00000008   0x2205             MOVS     R2,#+5
   \   0000000A   0x2104             MOVS     R1,#+4
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       app_timer_init
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD004             BEQ      ??BLE_Setup_0
   \   00000016   0x....             LDR      R2,??DataTable12_24
   \   00000018   0x21AE             MOVS     R1,#+174
   \   0000001A   0x0089             LSLS     R1,R1,#+2        ;; #+696
   \   0000001C   0x.... 0x....      BL       app_error_handler
    697          
    698                /* Initialize the SoftDevice handler module */
    699             SKY_softdevice_handler_init ();
   \                     ??BLE_Setup_0: (+1)
   \   00000020   0x.... 0x....      BL       SKY_softdevice_handler_init
    700          
    701                /* Enable BLE stack */
    702             memset(&ble_enable_params, 0, sizeof(ble_enable_params));
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0xAC01             ADD      R4,SP,#+4
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       __aeabi_memset
    703             ble_enable_params.gatts_enable_params.service_changed = IS_SRVC_CHANGED_CHARACT_PRESENT;
   \   00000030   0x4668             MOV      R0,SP
   \   00000032   0x7900             LDRB     R0,[R0, #+4]
   \   00000034   0x21FE             MOVS     R1,#+254
   \   00000036   0x4001             ANDS     R1,R1,R0
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x7101             STRB     R1,[R0, #+4]
    704             SKY_check_error (sd_ble_enable(&ble_enable_params));
   \   0000003C   0xA801             ADD      R0,SP,#+4
   \   0000003E   0xDF60             SVC      0x60
   \   00000040   0x.... 0x....      BL       SKY_check_error
    705          
    706             SKY_check_error (app_sched_init (SCHED_MAX_EVENT_DATA_SIZE, SCHED_QUEUE_SIZE, APP_SCHED_BUF));
   \   00000044   0x....             LDR      R2,??DataTable12_32
   \   00000046   0x2119             MOVS     R1,#+25
   \   00000048   0x2008             MOVS     R0,#+8
   \   0000004A   0x.... 0x....      BL       app_sched_init
   \   0000004E   0x.... 0x....      BL       SKY_check_error
    707          
    708             gap_params_init();
   \   00000052   0x.... 0x....      BL       gap_params_init
    709             services_init();
   \   00000056   0x.... 0x....      BL       services_init
    710             advertising_init();
   \   0000005A   0x.... 0x....      BL       advertising_init
    711             conn_params_init();
   \   0000005E   0x.... 0x....      BL       conn_params_init
    712             advertising_start();
   \   00000062   0x.... 0x....      BL       advertising_start
    713          
    714             latch_irq = TS_IRQCounter;
   \   00000066   0x....             LDR      R0,??DataTable12_33
   \   00000068   0x7804             LDRB     R4,[R0, #+0]
   \   0000006A   0xE006             B        ??BLE_Setup_1
    715             for (;;)
    716                {
    717                SKY_softdevice_events_execute();
    718                app_sched_execute();
    719          
    720                SKY_check_error (sd_app_evt_wait());
    721          
    722                   /*
    723                   ** May want to just call this everytime through the loop to make sure an LED doesn't get stuck.
    724                   ** Although have to counter that with when BLE plays with the LED's. Maybe have a lockout
    725                   ** period when something else is using the LED's?
    726                   */
    727                if (latch_irq != TS_IRQCounter)
    728                   {
    729                   latch_irq = TS_IRQCounter;
    730                   if (TS_TouchLED (TRUE))
    731                      {
    732                      localLockState ^= 0x01;
    733                      Timer2_Start();
    734                      Motor_Lock (localLockState == 1, MOTOR_LOCK_COUNT);
   \                     ??BLE_Setup_2: (+1)
   \   0000006C   0x2000             MOVS     R0,#+0
   \                     ??BLE_Setup_3: (+1)
   \   0000006E   0x2146             MOVS     R1,#+70
   \   00000070   0xB2C0             UXTB     R0,R0
   \   00000072   0x.... 0x....      BL       Motor_Lock
    735                      Timer2_Stop();
   \   00000076   0x.... 0x....      BL       Timer2_Stop
   \                     ??BLE_Setup_1: (+1)
   \   0000007A   0x.... 0x....      BL       SKY_softdevice_events_execute
   \   0000007E   0x.... 0x....      BL       app_sched_execute
   \   00000082   0xDF40             SVC      0x40
   \   00000084   0x.... 0x....      BL       SKY_check_error
   \   00000088   0x....             LDR      R0,??DataTable12_33
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0xB2E4             UXTB     R4,R4
   \   0000008E   0x4284             CMP      R4,R0
   \   00000090   0xD0F3             BEQ      ??BLE_Setup_1
   \   00000092   0x....             LDR      R0,??DataTable12_33
   \   00000094   0x7804             LDRB     R4,[R0, #+0]
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0x.... 0x....      BL       TS_TouchLED
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD0EC             BEQ      ??BLE_Setup_1
   \   000000A0   0x....             LDR      R0,??DataTable12_34
   \   000000A2   0x7800             LDRB     R0,[R0, #+0]
   \   000000A4   0x2101             MOVS     R1,#+1
   \   000000A6   0x4041             EORS     R1,R1,R0
   \   000000A8   0x....             LDR      R0,??DataTable12_34
   \   000000AA   0x7001             STRB     R1,[R0, #+0]
   \   000000AC   0x.... 0x....      BL       Timer2_Start
   \   000000B0   0x....             LDR      R0,??DataTable12_34
   \   000000B2   0x7800             LDRB     R0,[R0, #+0]
   \   000000B4   0x2801             CMP      R0,#+1
   \   000000B6   0xD1D9             BNE      ??BLE_Setup_2
   \   000000B8   0x2001             MOVS     R0,#+1
   \   000000BA   0xE7D8             B        ??BLE_Setup_3
    736                      }
    737                   }
    738                }
    739          }

   \                                 In section .bss, align 4
   \                     ??APP_TIMER_BUF:
   \   00000000                      DS8 616

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     app_timer_evt_get

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     m_conn_handle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     m_sec_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     ??m_auth_status

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     ??m_auth_status+0x6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     serviceLED

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     serviceLEDState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     serviceLock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     localLockState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x........         DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     txpower

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     UTIL_tmpBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     serviceLED

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     serviceLED+0x2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x00001523         DC32     0x1523

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x00001524         DC32     0x1524

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     serviceLEDState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     serviceLED+0x6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x00001525         DC32     0x1525

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x........         DC32     serviceLEDWrite

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0x........         DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \   00000000   0x........         DC32     serviceLED+0xE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_13:
   \   00000000   0x00001526         DC32     0x1526

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     serviceLock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     serviceLED+0x16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x00001527         DC32     0x1527

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x........         DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x........         DC32     serviceLED+0x1E

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x00001528         DC32     0x1528

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x........         DC32     ?_18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x........         DC32     serviceLED+0x26

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x00001529         DC32     0x1529

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x0000152A         DC32     0x152a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x........         DC32     serviceLockState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x........         DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0x........         DC32     serviceLock+0x6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0x0000152B         DC32     0x152b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \   00000000   0x........         DC32     serviceLockShift

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \   00000000   0x........         DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \   00000000   0x........         DC32     serviceLock+0xE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \   00000000   0x0000152C         DC32     0x152c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_19:
   \   00000000   0x........         DC32     serviceLockInvert

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_20:
   \   00000000   0x........         DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_21:
   \   00000000   0x........         DC32     serviceLock+0x16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_22:
   \   00000000   0x........         DC32     ?_22

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_23:
   \   00000000   0x........         DC32     m_conn_handle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_24:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_25:
   \   00000000   0x0000028D         DC32     0x28d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_26:
   \   00000000   0x........         DC32     ?_23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_27:
   \   00000000   0x00000295         DC32     0x295

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_28:
   \   00000000   0x........         DC32     on_conn_params_evt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_29:
   \   00000000   0x........         DC32     conn_params_error_handler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_30:
   \   00000000   0x........         DC32     app_timer_evt_schedule

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_31:
   \   00000000   0x........         DC32     ??APP_TIMER_BUF

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_32:
   \   00000000   0x........         DC32     APP_SCHED_BUF

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_33:
   \   00000000   0x........         DC32     TS_IRQCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_34:
   \   00000000   0x........         DC32     localLockState

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 56H, 65H, 6CH, 6FH, 4CH
   \              0x5C 0x56    
   \              0x65 0x6C    
   \              0x6F 0x4C    
   \   00000008   0x61 0x62          DC8 61H, 62H, 73H, 5CH, 53H, 6BH, 79H, 4CH
   \              0x73 0x5C    
   \              0x53 0x6B    
   \              0x79 0x4C    
   \   00000010   0x6F 0x63          DC8 6FH, 63H, 6BH, 20H, 50H, 72H, 6FH, 6AH
   \              0x6B 0x20    
   \              0x50 0x72    
   \              0x6F 0x6A    
   \   00000018   0x65 0x63          DC8 65H, 63H, 74H, 5CH, 53H, 6FH, 75H, 72H
   \              0x74 0x5C    
   \              0x53 0x6F    
   \              0x75 0x72    
   \   00000020   0x63 0x65          DC8 63H, 65H, 5CH, 49H, 41H, 52H, 5FH, 37H
   \              0x5C 0x49    
   \              0x41 0x52    
   \              0x5F 0x37    
   \   00000028   0x5F 0x33          DC8 5FH, 33H, 30H, 5FH, 34H, 5CH, 2EH, 2EH
   \              0x30 0x5F    
   \              0x34 0x5C    
   \              0x2E 0x2E    
   \   00000030   0x5C 0x2E          DC8 5CH, 2EH, 2EH, 5CH, 53H, 44H, 4BH, 5FH
   \              0x2E 0x5C    
   \              0x53 0x44    
   \              0x4B 0x5F    
   \   00000038   0x37 0x5F          DC8 37H, 5FH, 32H, 5FH, 30H, 5CH, 63H, 6FH
   \              0x32 0x5F    
   \              0x30 0x5C    
   \              0x63 0x6F    
   \   00000040   0x6D 0x70          DC8 6DH, 70H, 6FH, 6EH, 65H, 6EH, 74H, 73H
   \              0x6F 0x6E    
   \              0x65 0x6E    
   \              0x74 0x73    
   \   00000048   0x5C 0x6C          DC8 5CH, 6CH, 69H, 62H, 72H, 61H, 72H, 69H
   \              0x69 0x62    
   \              0x72 0x61    
   \              0x72 0x69    
   \   00000050   0x65 0x73          DC8 65H, 73H, 5CH, 74H, 69H, 6DH, 65H, 72H
   \              0x5C 0x74    
   \              0x69 0x6D    
   \              0x65 0x72    
   \   00000058   0x5C 0x61          DC8 5CH, 61H, 70H, 70H, 5FH, 74H, 69H, 6DH
   \              0x70 0x70    
   \              0x5F 0x74    
   \              0x69 0x6D    
   \   00000060   0x65 0x72          DC8 65H, 72H, 2EH, 68H, 0
   \              0x2E 0x68    
   \              0x00         
   \   00000065   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 56H, 65H, 6CH, 6FH, 4CH
   \              0x5C 0x56    
   \              0x65 0x6C    
   \              0x6F 0x4C    
   \   00000008   0x61 0x62          DC8 61H, 62H, 73H, 5CH, 53H, 6BH, 79H, 4CH
   \              0x73 0x5C    
   \              0x53 0x6B    
   \              0x79 0x4C    
   \   00000010   0x6F 0x63          DC8 6FH, 63H, 6BH, 20H, 50H, 72H, 6FH, 6AH
   \              0x6B 0x20    
   \              0x50 0x72    
   \              0x6F 0x6A    
   \   00000018   0x65 0x63          DC8 65H, 63H, 74H, 5CH, 53H, 6FH, 75H, 72H
   \              0x74 0x5C    
   \              0x53 0x6F    
   \              0x75 0x72    
   \   00000020   0x63 0x65          DC8 63H, 65H, 5CH, 62H, 6CH, 65H, 5FH, 69H
   \              0x5C 0x62    
   \              0x6C 0x65    
   \              0x5F 0x69    
   \   00000028   0x6E 0x74          DC8 6EH, 74H, 65H, 72H, 66H, 61H, 63H, 65H
   \              0x65 0x72    
   \              0x66 0x61    
   \              0x63 0x65    
   \   00000030   0x2E 0x63          DC8 2EH, 63H, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x62 0x6C          DC8 "ble_evt called %02x\012"
   \              0x65 0x5F    
   \              0x65 0x76    
   \              0x74 0x20    
   \              0x63 0x61    
   \              0x6C 0x6C    
   \              0x65 0x64    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x57 0x72          DC8 "Write TX power returns %02x %04X\012"
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x54 0x58    
   \              0x20 0x70    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x72    
   \              0x65 0x74    
   \              0x75 0x72    
   \              0x6E 0x73    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x20    
   \              0x25 0x30    
   \              0x34 0x58    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x45 0x72          DC8 "Error code from RSSI is %u\012"
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x63 0x6F    
   \              0x64 0x65    
   \              0x20 0x66    
   \              0x72 0x6F    
   \              0x6D 0x20    
   \              0x52 0x53    
   \              0x53 0x49    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x25 0x75    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x47 0x6F          DC8 "Got lock write of %u\012"
   \              0x74 0x20    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x25 0x75    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x53 0x68          DC8 "Should be moving motor\012"
   \              0x6F 0x75    
   \              0x6C 0x64    
   \              0x20 0x62    
   \              0x65 0x20    
   \              0x6D 0x6F    
   \              0x76 0x69    
   \              0x6E 0x67    
   \              0x20 0x6D    
   \              0x6F 0x74    
   \              0x6F 0x72    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x6E 0x6F          DC8 "not moving motor %u\012"
   \              0x74 0x20    
   \              0x6D 0x6F    
   \              0x76 0x69    
   \              0x6E 0x67    
   \              0x20 0x6D    
   \              0x6F 0x74    
   \              0x6F 0x72    
   \              0x20 0x25    
   \              0x75 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x47 0x6F          DC8 "Got lock shift of %u\012"
   \              0x74 0x20    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x20 0x73    
   \              0x68 0x69    
   \              0x66 0x74    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x25 0x75    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x4C 0x6F          DC8 "Lock state is now %u\012"
   \              0x63 0x6B    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x77 0x20    
   \              0x25 0x75    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x67 0x6F          DC8 "got RSSI of %d\012"
   \              0x74 0x20    
   \              0x52 0x53    
   \              0x53 0x49    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x67 0x6F          DC8 "got sys_evt_dispatch\012"
   \              0x74 0x20    
   \              0x73 0x79    
   \              0x73 0x5F    
   \              0x65 0x76    
   \              0x74 0x5F    
   \              0x64 0x69    
   \              0x73 0x70    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x53 0x6B          DC8 "Skylock %08u"
   \              0x79 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x25 0x30    
   \              0x38 0x75    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0xDD 0xEA          DC8 221, 234, 112, 106, 157, 83, 75, 187, 172, 11, 116, 186, 129, 158
   \              0x70 0x6A    
   \              0x9D 0x53    
   \              0x4B 0xBB    
   \              0xAC 0x0B    
   \              0x74 0xBA    
   \              0x81 0x9E    
   \   0000000E   0x7D 0x9C          DC8 125, 156

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x4C 0x45          DC8 "LED State"
   \              0x44 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x4C 0x45          DC8 "LED On"
   \              0x44 0x20    
   \              0x4F 0x6E    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x4C 0x45          DC8 "LED Off"
   \              0x44 0x20    
   \              0x4F 0x66    
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x4C 0x45          DC8 "LED Toggle"
   \              0x44 0x20    
   \              0x54 0x6F    
   \              0x67 0x67    
   \              0x6C 0x65    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_18:
   \   00000000   0x54 0x58          DC8 "TX Power"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x4C 0x6F          DC8 "Lock State"
   \              0x63 0x6B    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x4C 0x6F          DC8 "Lock Shift"
   \              0x63 0x6B    
   \              0x20 0x53    
   \              0x68 0x69    
   \              0x66 0x74    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x4C 0x6F          DC8 "Lock Invert"
   \              0x63 0x6B    
   \              0x20 0x49    
   \              0x6E 0x76    
   \              0x65 0x72    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x47 0x6F          DC8 "Got on_conn_params_evt call %u\012"
   \              0x74 0x20    
   \              0x6F 0x6E    
   \              0x5F 0x63    
   \              0x6F 0x6E    
   \              0x6E 0x5F    
   \              0x70 0x61    
   \              0x72 0x61    
   \              0x6D 0x73    
   \              0x5F 0x65    
   \              0x76 0x74    
   \              0x20 0x63    
   \              0x61 0x6C    
   \              0x6C 0x20    
   \              0x25 0x75    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x63 0x6F          DC8 "conn_params_error_handler\012"
   \              0x6E 0x6E    
   \              0x5F 0x70    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x73 0x5F    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x5F    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x6C 0x65    
   \              0x72 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0
    740          
    741          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   BLE_Setup
        16   -> Motor_Lock
        16   -> SKY_check_error
        16   -> SKY_softdevice_events_execute
        16   -> SKY_softdevice_handler_init
        16   -> TS_TouchLED
        16   -> Timer2_Start
        16   -> Timer2_Stop
        16   -> __aeabi_memset
        16   -> advertising_init
        16   -> advertising_start
        16   -> app_error_handler
        16   -> app_sched_execute
        16   -> app_sched_init
        16   -> app_timer_init
        16   -> conn_params_init
        16   -> gap_params_init
        16   -> services_init
      80   BLE_addCharacteristic
        80   -> SKY_check_error
        80   -> __aeabi_memset
        80   -> strlen
     128   advertising_init
       128   -> SKY_check_error
       128   -> __aeabi_memset
       128   -> ble_advdata_set
      32   advertising_start
        32   -> __aeabi_memset
        32   -> app_error_handler
       8   app_timer_evt_get
         8   -- Indirect call
         8   -> app_error_handler
      16   app_timer_evt_schedule
        16   -> app_sched_event_put
      16   ble_evt_dispatch
        16   -> Motor_Lock
        16   -> TS_SetLED
        16   -> TS_ToggleLED
        16   -> Timer2_Start
        16   -> Timer2_Stop
        16   -> UART0_TxFlush
        16   -> ble_conn_params_on_ble_evt
        16   -> on_ble_evt
        16   -> printf
       8   conn_params_error_handler
         8   -> UART0_TxFlush
         8   -> app_error_handler
         8   -> printf
      40   conn_params_init
        40   -> SKY_check_error
        40   -> __aeabi_memset
        40   -> ble_conn_params_init
      24   gap_params_init
        24   -> SKY_check_error
        24   -> __aeabi_memset
        24   -> sprintf
        24   -> strlen
       8   on_ble_evt
         8   -> __aeabi_memcpy
         8   -> advertising_start
         8   -> app_error_handler
       8   on_conn_params_evt
         8   -> UART0_TxFlush
         8   -> app_error_handler
         8   -> printf
      40   services_init
        40   -> BLE_addCharacteristic
        40   -> SKY_check_error
        40   -> __aeabi_memcpy4
       8   sys_evt_dispatch
         8   -> UART0_TxFlush
         8   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_13
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_26
       4  ??DataTable12_27
       4  ??DataTable12_28
       4  ??DataTable12_29
       4  ??DataTable12_3
       4  ??DataTable12_30
       4  ??DataTable12_31
       4  ??DataTable12_32
       4  ??DataTable12_33
       4  ??DataTable12_34
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       4  ??DataTable8
       4  ??DataTable8_1
     104  ?_0
      52  ?_1
      16  ?_10
      24  ?_11
      16  ?_12
      16  ?_13
      12  ?_14
       8  ?_15
       8  ?_16
      12  ?_17
      12  ?_18
      12  ?_19
      24  ?_2
      12  ?_20
      12  ?_21
      32  ?_22
      28  ?_23
       4  ?_24
      36  ?_3
      28  ?_4
      24  ?_5
      24  ?_6
      24  ?_7
      24  ?_8
      24  ?_9
     416  APP_SCHED_BUF
     616  APP_TIMER_BUF
     188  BLE_Setup
     284  BLE_addCharacteristic
      98  advertising_init
      64  advertising_start
      42  app_timer_evt_get
      20  app_timer_evt_schedule
     450  ble_evt_dispatch
      26  conn_params_error_handler
      72  conn_params_init
     102  gap_params_init
       1  localLockState
      52  m_auth_status
       2  m_conn_handle
       8  m_sec_params
     178  on_ble_evt
      44  on_conn_params_evt
      48  serviceLED
       1  serviceLEDState
       1  serviceLEDWrite
      32  serviceLock
       1  serviceLockInvert
       1  serviceLockShift
       1  serviceLockState
     340  services_init
      14  sys_evt_dispatch
       2  txpower

 
 1 180 bytes in section .bss
     2 bytes in section .data
   588 bytes in section .rodata
 2 222 bytes in section .text
 
 2 222 bytes of CODE  memory
   588 bytes of CONST memory
 1 182 bytes of DATA  memory

Errors: none
Warnings: 1
