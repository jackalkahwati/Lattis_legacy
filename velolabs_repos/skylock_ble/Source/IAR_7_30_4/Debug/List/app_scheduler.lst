###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        16/Apr/2015  21:19:47
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\VeloLabs\SkyLock
#        Project\SDK_7_2_0\components\libraries\scheduler\app_scheduler.c
#    Command line =  
#        "C:\VeloLabs\SkyLock
#        Project\SDK_7_2_0\components\libraries\scheduler\app_scheduler.c" -D
#        NRF51 -D BLE_STACK_SUPPORT_REQD -lCN "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\List\" -o "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\Obj\" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Normal.h" -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\include\" -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\include\ARMFiles\" -I
#        "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\drivers_nrf\hal\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\softdevice\s110\headers\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\toolchain\" -I
#        "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\softdevice\common\softdevice_handler\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\util\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\scheduler\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\timer\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\ble\common\" -Ol
#    List file    =  
#        C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\List\app_scheduler.lst
#    Object file  =  
#        C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\Obj\app_scheduler.o
#
###############################################################################

C:\VeloLabs\SkyLock Project\SDK_7_2_0\components\libraries\scheduler\app_scheduler.c
      1          /* Copyright (c) 2012 Nordic Semiconductor. All Rights Reserved.
      2           *
      3           * The information contained herein is property of Nordic Semiconductor ASA.
      4           * Terms and conditions of usage are described in detail in NORDIC
      5           * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
      6           *
      7           * Licensees are granted free, non-transferable use of the information. NO
      8           * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
      9           * the file.
     10           *
     11           */
     12          
     13          #include "app_scheduler.h"
     14          #include <stdlib.h>
     15          #include <stdint.h>
     16          #include <string.h>
     17          #include "nrf_soc.h"
     18          #include "nrf_assert.h"
     19          #include "app_util.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp bool is_word_aligned(void *)
   \                     is_word_aligned: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0780             LSLS     R0,R0,#+30
   \   00000004   0xD101             BNE      ??is_word_aligned_0
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0xE000             B        ??is_word_aligned_1
   \                     ??is_word_aligned_0: (+1)
   \   0000000A   0x2000             MOVS     R0,#+0
   \                     ??is_word_aligned_1: (+1)
   \   0000000C   0xB2C0             UXTB     R0,R0
   \   0000000E   0xBD00             POP      {PC}             ;; return
     20          #include "app_util_platform.h"
     21          
     22          /**@brief Structure for holding a scheduled event header. */
     23          typedef struct
     24          {
     25              app_sched_event_handler_t handler;          /**< Pointer to event handler to receive the event. */
     26              uint16_t                  event_data_size;  /**< Size of event data. */
     27          } event_header_t;
     28          
     29          STATIC_ASSERT(sizeof(event_header_t) <= APP_SCHED_EVENT_HEADER_SIZE);
     30          

   \                                 In section .bss, align 4
     31          static event_header_t * m_queue_event_headers;  /**< Array for holding the queue event headers. */
   \                     m_queue_event_headers:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     32          static uint8_t        * m_queue_event_data;     /**< Array for holding the queue event data. */
   \                     m_queue_event_data:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     33          static volatile uint8_t m_queue_start_index;    /**< Index of queue entry at the start of the queue. */
   \                     m_queue_start_index:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     34          static volatile uint8_t m_queue_end_index;      /**< Index of queue entry at the end of the queue. */
   \                     m_queue_end_index:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     35          static uint16_t         m_queue_event_size;     /**< Maximum event size in queue. */
   \                     m_queue_event_size:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     36          static uint16_t         m_queue_size;           /**< Number of queue entries. */
   \                     m_queue_size:
   \   00000000                      DS8 2
     37          
     38          /**@brief Macro for checking if a queue is full. */
     39          #define APP_SCHED_QUEUE_FULL() (next_index(m_queue_end_index) == m_queue_start_index)
     40          
     41          /**@brief Macro for checking if a queue is empty. */
     42          #define APP_SCHED_QUEUE_EMPTY() (m_queue_end_index == m_queue_start_index)
     43          
     44          
     45          /**@brief Function for incrementing a queue index, and handle wrap-around.
     46           *
     47           * @param[in]   index   Old index.
     48           *
     49           * @return      New (incremented) index.
     50           */

   \                                 In section .text, align 2, keep-with-next
     51          static __INLINE uint8_t next_index(uint8_t index)
     52          {
   \                     next_index: (+1)
   \   00000000   0xB500             PUSH     {LR}
     53              return (index < m_queue_size) ? (index + 1) : 0;
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0xB2C9             UXTB     R1,R1
   \   00000006   0x....             LDR      R2,??DataTable3
   \   00000008   0x8812             LDRH     R2,[R2, #+0]
   \   0000000A   0xB289             UXTH     R1,R1
   \   0000000C   0x4291             CMP      R1,R2
   \   0000000E   0xD201             BCS      ??next_index_0
   \   00000010   0x1C40             ADDS     R0,R0,#+1
   \   00000012   0xE000             B        ??next_index_1
   \                     ??next_index_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \                     ??next_index_1: (+1)
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0xBD00             POP      {PC}             ;; return
     54          }
     55          
     56          

   \                                 In section .text, align 2, keep-with-next
     57          uint32_t app_sched_init(uint16_t event_size, uint16_t queue_size, void * p_event_buffer)
     58          {
   \                     app_sched_init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     59              uint16_t data_start_index = (queue_size + 1) * sizeof(event_header_t);
   \   00000008   0xB2AD             UXTH     R5,R5
   \   0000000A   0x002F             MOVS     R7,R5
   \   0000000C   0x1C7F             ADDS     R7,R7,#+1
   \   0000000E   0x2008             MOVS     R0,#+8
   \   00000010   0x4347             MULS     R7,R0,R7
     60          
     61              // Check that buffer is correctly aligned
     62              if (!is_word_aligned(p_event_buffer))
   \   00000012   0x0030             MOVS     R0,R6
   \   00000014   0x.... 0x....      BL       is_word_aligned
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE      ??app_sched_init_0
     63              {
     64                  return NRF_ERROR_INVALID_PARAM;
   \   0000001C   0x2007             MOVS     R0,#+7
   \   0000001E   0xE010             B        ??app_sched_init_1
     65              }
     66          
     67              // Initialize event scheduler
     68              m_queue_event_headers = p_event_buffer;
   \                     ??app_sched_init_0: (+1)
   \   00000020   0x....             LDR      R0,??DataTable3_1
   \   00000022   0x6006             STR      R6,[R0, #+0]
     69              m_queue_event_data    = &((uint8_t *)p_event_buffer)[data_start_index];
   \   00000024   0xB2BF             UXTH     R7,R7
   \   00000026   0x19F0             ADDS     R0,R6,R7
   \   00000028   0x....             LDR      R1,??DataTable3_2
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     70              m_queue_end_index     = 0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x....             LDR      R1,??DataTable3_3
   \   00000030   0x7008             STRB     R0,[R1, #+0]
     71              m_queue_start_index   = 0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR      R1,??DataTable3_4
   \   00000036   0x7008             STRB     R0,[R1, #+0]
     72              m_queue_event_size    = event_size;
   \   00000038   0x....             LDR      R0,??DataTable3_5
   \   0000003A   0x8004             STRH     R4,[R0, #+0]
     73              m_queue_size          = queue_size;
   \   0000003C   0x....             LDR      R0,??DataTable3
   \   0000003E   0x8005             STRH     R5,[R0, #+0]
     74          
     75              return NRF_SUCCESS;
   \   00000040   0x2000             MOVS     R0,#+0
   \                     ??app_sched_init_1: (+1)
   \   00000042   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     76          }
     77          
     78          

   \                                 In section .text, align 2, keep-with-next
     79          uint32_t app_sched_event_put(void                    * p_event_data,
     80                                       uint16_t                  event_data_size,
     81                                       app_sched_event_handler_t handler)
     82          {
   \                     app_sched_event_put: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0017             MOVS     R7,R2
     83              uint32_t err_code;
     84          
     85              if (event_data_size <= m_queue_event_size)
   \   00000008   0x....             LDR      R0,??DataTable3_5
   \   0000000A   0x8800             LDRH     R0,[R0, #+0]
   \   0000000C   0xB2B6             UXTH     R6,R6
   \   0000000E   0x42B0             CMP      R0,R6
   \   00000010   0xD344             BCC      ??app_sched_event_put_0
     86              {
     87                  uint16_t event_index = 0xFFFF;
   \   00000012   0x....             LDR      R4,??DataTable3_6  ;; 0xffff
     88          
     89                  CRITICAL_REGION_ENTER();
   \   00000014   0x.... 0x....      BL       critical_region_enter
     90          
     91                  if (!APP_SCHED_QUEUE_FULL())
   \   00000018   0x....             LDR      R0,??DataTable3_3
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x.... 0x....      BL       next_index
   \   00000020   0x....             LDR      R1,??DataTable3_4
   \   00000022   0x7809             LDRB     R1,[R1, #+0]
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xD007             BEQ      ??app_sched_event_put_1
     92                  {
     93                      event_index       = m_queue_end_index;
   \   00000028   0x....             LDR      R0,??DataTable3_3
   \   0000002A   0x7804             LDRB     R4,[R0, #+0]
     94                      m_queue_end_index = next_index(m_queue_end_index);
   \   0000002C   0x....             LDR      R0,??DataTable3_3
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x.... 0x....      BL       next_index
   \   00000034   0x....             LDR      R1,??DataTable3_3
   \   00000036   0x7008             STRB     R0,[R1, #+0]
     95                  }
     96          
     97                  CRITICAL_REGION_EXIT();
   \                     ??app_sched_event_put_1: (+1)
   \   00000038   0x.... 0x....      BL       critical_region_exit
     98          
     99                  if (event_index != 0xFFFF)
   \   0000003C   0xB2A4             UXTH     R4,R4
   \   0000003E   0x....             LDR      R0,??DataTable3_6  ;; 0xffff
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD029             BEQ      ??app_sched_event_put_2
    100                  {
    101                      // NOTE: This can be done outside the critical region since the event consumer will
    102                      //       always be called from the main loop, and will thus never interrupt this code.
    103                      m_queue_event_headers[event_index].handler = handler;
   \   00000044   0x....             LDR      R0,??DataTable3_1
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xB2A4             UXTH     R4,R4
   \   0000004A   0x2108             MOVS     R1,#+8
   \   0000004C   0x4361             MULS     R1,R4,R1
   \   0000004E   0x5047             STR      R7,[R0, R1]
    104                      if ((p_event_data != NULL) && (event_data_size > 0))
   \   00000050   0x2D00             CMP      R5,#+0
   \   00000052   0xD017             BEQ      ??app_sched_event_put_3
   \   00000054   0xB2B6             UXTH     R6,R6
   \   00000056   0x2E00             CMP      R6,#+0
   \   00000058   0xD014             BEQ      ??app_sched_event_put_3
    105                      {
    106                          memcpy(&m_queue_event_data[event_index * m_queue_event_size],
    107                                 p_event_data,
    108                                 event_data_size);
   \   0000005A   0xB2B6             UXTH     R6,R6
   \   0000005C   0x0032             MOVS     R2,R6
   \   0000005E   0x0029             MOVS     R1,R5
   \   00000060   0x....             LDR      R0,??DataTable3_2
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xB2A4             UXTH     R4,R4
   \   00000066   0x....             LDR      R3,??DataTable3_5
   \   00000068   0x881B             LDRH     R3,[R3, #+0]
   \   0000006A   0x4363             MULS     R3,R4,R3
   \   0000006C   0x18C5             ADDS     R5,R0,R3
   \   0000006E   0x0028             MOVS     R0,R5
   \   00000070   0x.... 0x....      BL       __aeabi_memcpy
    109                          m_queue_event_headers[event_index].event_data_size = event_data_size;
   \   00000074   0x....             LDR      R0,??DataTable3_1
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0xB2A4             UXTH     R4,R4
   \   0000007A   0x2108             MOVS     R1,#+8
   \   0000007C   0x4361             MULS     R1,R4,R1
   \   0000007E   0x1840             ADDS     R0,R0,R1
   \   00000080   0x8086             STRH     R6,[R0, #+4]
   \   00000082   0xE007             B        ??app_sched_event_put_4
    110                      }
    111                      else
    112                      {
    113                          m_queue_event_headers[event_index].event_data_size = 0;
   \                     ??app_sched_event_put_3: (+1)
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x....             LDR      R1,??DataTable3_1
   \   00000088   0x6809             LDR      R1,[R1, #+0]
   \   0000008A   0xB2A4             UXTH     R4,R4
   \   0000008C   0x2208             MOVS     R2,#+8
   \   0000008E   0x4362             MULS     R2,R4,R2
   \   00000090   0x1889             ADDS     R1,R1,R2
   \   00000092   0x8088             STRH     R0,[R1, #+4]
    114                      }
    115          
    116                      err_code = NRF_SUCCESS;
   \                     ??app_sched_event_put_4: (+1)
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0xE002             B        ??app_sched_event_put_5
    117                  }
    118                  else
    119                  {
    120                      err_code = NRF_ERROR_NO_MEM;
   \                     ??app_sched_event_put_2: (+1)
   \   00000098   0x2004             MOVS     R0,#+4
   \   0000009A   0xE000             B        ??app_sched_event_put_5
    121                  }
    122              }
    123              else
    124              {
    125                  err_code = NRF_ERROR_INVALID_LENGTH;
   \                     ??app_sched_event_put_0: (+1)
   \   0000009C   0x2009             MOVS     R0,#+9
    126              }
    127          
    128              return err_code;
   \                     ??app_sched_event_put_5: (+1)
   \   0000009E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    129          }
    130          
    131          
    132          /**@brief Function for reading the next event from specified event queue.
    133           *
    134           * @param[out]  pp_event_data       Pointer to pointer to event data.
    135           * @param[out]  p_event_data_size   Pointer to size of event data.
    136           * @param[out]  p_event_handler     Pointer to event handler function pointer.
    137           *
    138           * @return      NRF_SUCCESS if new event, NRF_ERROR_NOT_FOUND if event queue is empty.
    139           */

   \                                 In section .text, align 2, keep-with-next
    140          static uint32_t app_sched_event_get(void                     ** pp_event_data,
    141                                              uint16_t *                  p_event_data_size,
    142                                              app_sched_event_handler_t * p_event_handler)
    143          {
   \                     app_sched_event_get: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0015             MOVS     R5,R2
    144              uint32_t err_code = NRF_ERROR_NOT_FOUND;
   \   00000008   0x2005             MOVS     R0,#+5
    145          
    146              if (!APP_SCHED_QUEUE_EMPTY())
   \   0000000A   0x....             LDR      R1,??DataTable3_3
   \   0000000C   0x7809             LDRB     R1,[R1, #+0]
   \   0000000E   0x....             LDR      R2,??DataTable3_4
   \   00000010   0x7812             LDRB     R2,[R2, #+0]
   \   00000012   0xB2C9             UXTB     R1,R1
   \   00000014   0x4291             CMP      R1,R2
   \   00000016   0xD01F             BEQ      ??app_sched_event_get_0
    147              {
    148                  uint16_t event_index;
    149          
    150                  // NOTE: There is no need for a critical region here, as this function will only be called
    151                  //       from app_sched_execute() from inside the main loop, so it will never interrupt
    152                  //       app_sched_event_put(). Also, updating of (i.e. writing to) the start index will be
    153                  //       an atomic operation.
    154                  event_index         = m_queue_start_index;
   \   00000018   0x....             LDR      R0,??DataTable3_4
   \   0000001A   0x7806             LDRB     R6,[R0, #+0]
    155                  m_queue_start_index = next_index(m_queue_start_index);
   \   0000001C   0x....             LDR      R0,??DataTable3_4
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x.... 0x....      BL       next_index
   \   00000024   0x....             LDR      R1,??DataTable3_4
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    156          
    157                  *pp_event_data     = &m_queue_event_data[event_index * m_queue_event_size];
   \   00000028   0x....             LDR      R0,??DataTable3_2
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xB2B6             UXTH     R6,R6
   \   0000002E   0x....             LDR      R1,??DataTable3_5
   \   00000030   0x8809             LDRH     R1,[R1, #+0]
   \   00000032   0x4371             MULS     R1,R6,R1
   \   00000034   0x1840             ADDS     R0,R0,R1
   \   00000036   0x6020             STR      R0,[R4, #+0]
    158                  *p_event_data_size = m_queue_event_headers[event_index].event_data_size;
   \   00000038   0x....             LDR      R0,??DataTable3_1
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xB2B6             UXTH     R6,R6
   \   0000003E   0x2108             MOVS     R1,#+8
   \   00000040   0x4371             MULS     R1,R6,R1
   \   00000042   0x1840             ADDS     R0,R0,R1
   \   00000044   0x8880             LDRH     R0,[R0, #+4]
   \   00000046   0x8038             STRH     R0,[R7, #+0]
    159                  *p_event_handler   = m_queue_event_headers[event_index].handler;
   \   00000048   0x....             LDR      R0,??DataTable3_1
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xB2B6             UXTH     R6,R6
   \   0000004E   0x2108             MOVS     R1,#+8
   \   00000050   0x4371             MULS     R1,R6,R1
   \   00000052   0x5840             LDR      R0,[R0, R1]
   \   00000054   0x6028             STR      R0,[R5, #+0]
    160          
    161                  err_code = NRF_SUCCESS;
   \   00000056   0x2000             MOVS     R0,#+0
    162              }
    163          
    164              return err_code;
   \                     ??app_sched_event_get_0: (+1)
   \   00000058   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    165          }
    166          
    167          

   \                                 In section .text, align 2, keep-with-next
    168          void app_sched_execute(void)
    169          {
   \                     app_sched_execute: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
   \   00000002   0xE004             B        ??app_sched_execute_0
    170              void                    * p_event_data;
    171              uint16_t                  event_data_size;
    172              app_sched_event_handler_t event_handler;
    173          
    174              // Get next event (if any), and execute handler
    175              while ((app_sched_event_get(&p_event_data, &event_data_size, &event_handler) == NRF_SUCCESS))
    176              {
    177                  event_handler(p_event_data, event_data_size);
   \                     ??app_sched_execute_1: (+1)
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x8881             LDRH     R1,[R0, #+4]
   \   00000008   0x9802             LDR      R0,[SP, #+8]
   \   0000000A   0x9A00             LDR      R2,[SP, #+0]
   \   0000000C   0x4790             BLX      R2
    178              }
   \                     ??app_sched_execute_0: (+1)
   \   0000000E   0x466A             MOV      R2,SP
   \   00000010   0xA901             ADD      R1,SP,#+4
   \   00000012   0xA802             ADD      R0,SP,#+8
   \   00000014   0x.... 0x....      BL       app_sched_event_get
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD0F3             BEQ      ??app_sched_execute_1
    179          }
   \   0000001C   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     m_queue_size

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     m_queue_event_headers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     m_queue_event_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     m_queue_end_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     m_queue_start_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     m_queue_event_size

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x0000FFFF         DC32     0xffff

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   app_sched_event_get
        24   -> next_index
      24   app_sched_event_put
        24   -> __aeabi_memcpy
        24   -> critical_region_enter
        24   -> critical_region_exit
        24   -> next_index
      16   app_sched_execute
        16   -- Indirect call
        16   -> app_sched_event_get
      24   app_sched_init
        24   -> is_word_aligned
       4   is_word_aligned
       4   next_index


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
      90  app_sched_event_get
     160  app_sched_event_put
      30  app_sched_execute
      68  app_sched_init
      16  is_word_aligned
       1  m_queue_end_index
       4  m_queue_event_data
       4  m_queue_event_headers
       2  m_queue_event_size
       2  m_queue_size
       1  m_queue_start_index
      26  next_index

 
  14 bytes in section .bss
 418 bytes in section .text
 
 418 bytes of CODE memory
  14 bytes of DATA memory

Errors: none
Warnings: 2
