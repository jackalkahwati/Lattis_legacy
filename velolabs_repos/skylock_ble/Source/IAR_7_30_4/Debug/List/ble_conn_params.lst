###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        16/Apr/2015  21:19:48
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\VeloLabs\SkyLock
#        Project\SDK_7_2_0\components\ble\common\ble_conn_params.c
#    Command line =  
#        "C:\VeloLabs\SkyLock
#        Project\SDK_7_2_0\components\ble\common\ble_conn_params.c" -D NRF51 -D
#        BLE_STACK_SUPPORT_REQD -lCN "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\List\" -o "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\Obj\" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Normal.h" -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\include\" -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\include\ARMFiles\" -I
#        "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\drivers_nrf\hal\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\softdevice\s110\headers\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\toolchain\" -I
#        "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\softdevice\common\softdevice_handler\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\util\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\scheduler\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\libraries\timer\"
#        -I "C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\..\..\SDK_7_2_0\components\ble\common\" -Ol
#    List file    =  
#        C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\List\ble_conn_params.lst
#    Object file  =  
#        C:\VeloLabs\SkyLock
#        Project\Source\IAR_7_30_4\Debug\Obj\ble_conn_params.o
#
###############################################################################

C:\VeloLabs\SkyLock Project\SDK_7_2_0\components\ble\common\ble_conn_params.c
      1          /* Copyright (c) 2012 Nordic Semiconductor. All Rights Reserved.
      2           *
      3           * The information contained herein is property of Nordic Semiconductor ASA.
      4           * Terms and conditions of usage are described in detail in NORDIC
      5           * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
      6           *
      7           * Licensees are granted free, non-transferable use of the information. NO
      8           * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
      9           * the file.
     10           *
     11           */
     12          
     13          #include "ble_conn_params.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint16_t uint16_decode(uint8_t const *)
   \                     uint16_decode: (+1)
   \   00000000   0x7801             LDRB     R1,[R0, #+0]
   \   00000002   0x7840             LDRB     R0,[R0, #+1]
   \   00000004   0x0200             LSLS     R0,R0,#+8
   \   00000006   0x4308             ORRS     R0,R0,R1
   \   00000008   0xB280             UXTH     R0,R0
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp bool ble_srv_is_notification_enabled(uint8_t *)
   \                     ble_srv_is_notification_enabled: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       uint16_decode
   \   00000006   0x0001             MOVS     R1,R0
   \   00000008   0x0008             MOVS     R0,R1
   \   0000000A   0x07C0             LSLS     R0,R0,#+31       ;; ZeroExtS R0,R0,#+31,#+31
   \   0000000C   0x0FC0             LSRS     R0,R0,#+31
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
     14          #include <stdlib.h>
     15          #include "nordic_common.h"
     16          #include "ble_hci.h"
     17          #include "app_timer.h"
     18          #include "ble_srv_common.h"
     19          #include "app_util.h"
     20          
     21          

   \                                 In section .bss, align 4
     22          static ble_conn_params_init_t m_conn_params_config;     /**< Configuration as specified by the application. */
   \                     m_conn_params_config:
   \   00000000                      DS8 28

   \                                 In section .bss, align 4
     23          static ble_gap_conn_params_t  m_preferred_conn_params;  /**< Connection parameters preferred by the application. */
   \                     m_preferred_conn_params:
   \   00000000                      DS8 8

   \                                 In section .bss, align 1
     24          static uint8_t                m_update_count;           /**< Number of Connection Parameter Update messages that has currently been sent. */
   \                     m_update_count:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     25          static uint16_t               m_conn_handle;            /**< Current connection handle. */
   \                     m_conn_handle:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     26          static ble_gap_conn_params_t  m_current_conn_params;    /**< Connection parameters received in the most recent Connect event. */
   \                     m_current_conn_params:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     27          static app_timer_id_t         m_conn_params_timer_id;   /**< Connection parameters timer. */
   \                     m_conn_params_timer_id:
   \   00000000                      DS8 4
     28          

   \                                 In section .bss, align 1
     29          static bool m_change_param = false;
   \                     m_change_param:
   \   00000000                      DS8 1
     30          

   \                                 In section .text, align 2, keep-with-next
     31          static bool is_conn_params_ok(ble_gap_conn_params_t * p_conn_params)
     32          {
   \                     is_conn_params_ok: (+1)
   \   00000000   0xB500             PUSH     {LR}
     33              // Check if interval is within the acceptable range.
     34              // NOTE: Using max_conn_interval in the received event data because this contains
     35              //       the client's connection interval.
     36              if (
     37                  (p_conn_params->max_conn_interval >= m_preferred_conn_params.min_conn_interval)
     38                  &&
     39                  (p_conn_params->max_conn_interval <= m_preferred_conn_params.max_conn_interval)
     40                 )
   \   00000002   0x8841             LDRH     R1,[R0, #+2]
   \   00000004   0x....             LDR      R2,??DataTable8
   \   00000006   0x8812             LDRH     R2,[R2, #+0]
   \   00000008   0x4291             CMP      R1,R2
   \   0000000A   0xD306             BCC      ??is_conn_params_ok_0
   \   0000000C   0x....             LDR      R1,??DataTable8
   \   0000000E   0x8849             LDRH     R1,[R1, #+2]
   \   00000010   0x8840             LDRH     R0,[R0, #+2]
   \   00000012   0x4281             CMP      R1,R0
   \   00000014   0xD301             BCC      ??is_conn_params_ok_0
     41              {
     42                  return true;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xE000             B        ??is_conn_params_ok_1
     43              }
     44              else
     45              {
     46                  return false;
   \                     ??is_conn_params_ok_0: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \                     ??is_conn_params_ok_1: (+1)
   \   0000001C   0xBD00             POP      {PC}             ;; return
     47              }
     48          }
     49          
     50          

   \                                 In section .text, align 2, keep-with-next
     51          static void update_timeout_handler(void * p_context)
     52          {
   \                     update_timeout_handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     53              UNUSED_PARAMETER(p_context);
     54          
     55          printf("update timer %u\n", m_conn_handle);
   \   00000002   0x....             LDR      R0,??DataTable8_1
   \   00000004   0x8801             LDRH     R1,[R0, #+0]
   \   00000006   0x....             LDR      R0,??DataTable7
   \   00000008   0x.... 0x....      BL       printf
     56              if (m_conn_handle != BLE_CONN_HANDLE_INVALID)
   \   0000000C   0x....             LDR      R0,??DataTable8_1
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0x....             LDR      R1,??DataTable8_2  ;; 0xffff
   \   00000012   0x4288             CMP      R0,R1
   \   00000014   0xD03A             BEQ      ??update_timeout_handler_0
     57              {
     58                  // Check if we have reached the maximum number of attempts
     59                  m_update_count++;
   \   00000016   0x....             LDR      R0,??DataTable8_3
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x....             LDR      R1,??DataTable8_3
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
     60                  if (m_update_count <= m_conn_params_config.max_conn_params_update_count)
   \   00000020   0x....             LDR      R0,??DataTable8_4
   \   00000022   0x7B00             LDRB     R0,[R0, #+12]
   \   00000024   0x....             LDR      R1,??DataTable8_3
   \   00000026   0x7809             LDRB     R1,[R1, #+0]
   \   00000028   0x4288             CMP      R0,R1
   \   0000002A   0xD310             BCC      ??update_timeout_handler_1
     61                  {
     62                      uint32_t err_code;
     63          
     64          printf("update?\n");
   \   0000002C   0x....             LDR      R0,??DataTable8_5
   \   0000002E   0x.... 0x....      BL       printf
     65                      // Parameters are not ok, send connection parameters update request.
     66                      err_code = sd_ble_gap_conn_param_update(m_conn_handle, &m_preferred_conn_params);
   \   00000032   0x....             LDR      R1,??DataTable8
   \   00000034   0x....             LDR      R0,??DataTable8_1
   \   00000036   0x8800             LDRH     R0,[R0, #+0]
   \   00000038   0xDF75             SVC      0x75
     67                      if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD026             BEQ      ??update_timeout_handler_0
   \   0000003E   0x....             LDR      R1,??DataTable8_4
   \   00000040   0x6989             LDR      R1,[R1, #+24]
   \   00000042   0x2900             CMP      R1,#+0
   \   00000044   0xD022             BEQ      ??update_timeout_handler_0
     68                      {
     69                          m_conn_params_config.error_handler(err_code);
   \   00000046   0x....             LDR      R1,??DataTable8_4
   \   00000048   0x6989             LDR      R1,[R1, #+24]
   \   0000004A   0x4788             BLX      R1
   \   0000004C   0xE01E             B        ??update_timeout_handler_0
     70                      }
     71                  }
     72                  else
     73                  {
     74                      m_update_count = 0;
   \                     ??update_timeout_handler_1: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x....             LDR      R1,??DataTable8_3
   \   00000052   0x7008             STRB     R0,[R1, #+0]
     75          
     76                      // Negotiation failed, disconnect automatically if this has been configured
     77                      if (m_conn_params_config.disconnect_on_fail)
   \   00000054   0x....             LDR      R0,??DataTable8_4
   \   00000056   0x7C00             LDRB     R0,[R0, #+16]
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD00C             BEQ      ??update_timeout_handler_2
     78                      {
     79                          uint32_t err_code;
     80          
     81                          err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
   \   0000005C   0x213B             MOVS     R1,#+59
   \   0000005E   0x....             LDR      R0,??DataTable8_1
   \   00000060   0x8800             LDRH     R0,[R0, #+0]
   \   00000062   0xDF76             SVC      0x76
     82                          if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD006             BEQ      ??update_timeout_handler_2
   \   00000068   0x....             LDR      R1,??DataTable8_4
   \   0000006A   0x6989             LDR      R1,[R1, #+24]
   \   0000006C   0x2900             CMP      R1,#+0
   \   0000006E   0xD002             BEQ      ??update_timeout_handler_2
     83                          {
     84                              m_conn_params_config.error_handler(err_code);
   \   00000070   0x....             LDR      R1,??DataTable8_4
   \   00000072   0x6989             LDR      R1,[R1, #+24]
   \   00000074   0x4788             BLX      R1
     85                          }
     86                      }
     87          
     88                      // Notify the application that the procedure has failed
     89                      if (m_conn_params_config.evt_handler != NULL)
   \                     ??update_timeout_handler_2: (+1)
   \   00000076   0x....             LDR      R0,??DataTable8_4
   \   00000078   0x6940             LDR      R0,[R0, #+20]
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD006             BEQ      ??update_timeout_handler_0
     90                      {
     91                          ble_conn_params_evt_t evt;
     92          
     93                          evt.evt_type = BLE_CONN_PARAMS_EVT_FAILED;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x4669             MOV      R1,SP
   \   00000082   0x7008             STRB     R0,[R1, #+0]
     94                          m_conn_params_config.evt_handler(&evt);
   \   00000084   0x4668             MOV      R0,SP
   \   00000086   0x....             LDR      R1,??DataTable8_4
   \   00000088   0x6949             LDR      R1,[R1, #+20]
   \   0000008A   0x4788             BLX      R1
     95                      }
     96                  }
     97              }
     98          }
   \                     ??update_timeout_handler_0: (+1)
   \   0000008C   0xBD01             POP      {R0,PC}          ;; return
     99          
    100          

   \                                 In section .text, align 2, keep-with-next
    101          uint32_t ble_conn_params_init(const ble_conn_params_init_t * p_init)
    102          {
   \                     ble_conn_params_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    103              uint32_t err_code;
    104          
    105              m_conn_params_config = *p_init;
   \   00000004   0x....             LDR      R0,??DataTable8_4
   \   00000006   0x0021             MOVS     R1,R4
   \   00000008   0x221C             MOVS     R2,#+28
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy4
    106              m_change_param = false;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR      R1,??DataTable9
   \   00000012   0x7008             STRB     R0,[R1, #+0]
    107              if (p_init->p_conn_params != NULL)
   \   00000014   0x6820             LDR      R0,[R4, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD009             BEQ      ??ble_conn_params_init_0
    108              {
    109                  m_preferred_conn_params = *p_init->p_conn_params;
   \   0000001A   0x....             LDR      R0,??DataTable8
   \   0000001C   0x6821             LDR      R1,[R4, #+0]
   \   0000001E   0x2208             MOVS     R2,#+8
   \   00000020   0x.... 0x....      BL       __aeabi_memcpy
    110          
    111                  // Set the connection params in stack
    112                  err_code = sd_ble_gap_ppcp_set(&m_preferred_conn_params);
   \   00000024   0x....             LDR      R0,??DataTable8
   \   00000026   0xDF7A             SVC      0x7A
    113                  if (err_code != NRF_SUCCESS)
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD004             BEQ      ??ble_conn_params_init_1
    114                  {
    115                      return err_code;
   \   0000002C   0xE00E             B        ??ble_conn_params_init_2
    116                  }
    117              }
    118              else
    119              {
    120                  // Fetch the connection params from stack
    121                  err_code = sd_ble_gap_ppcp_get(&m_preferred_conn_params);
   \                     ??ble_conn_params_init_0: (+1)
   \   0000002E   0x....             LDR      R0,??DataTable8
   \   00000030   0xDF7B             SVC      0x7B
    122                  if (err_code != NRF_SUCCESS)
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD10A             BNE      ??ble_conn_params_init_2
    123                  {
    124                      return err_code;
    125                  }
    126              }
    127          
    128              m_conn_handle  = BLE_CONN_HANDLE_INVALID;
   \                     ??ble_conn_params_init_1: (+1)
   \   00000036   0x....             LDR      R0,??DataTable8_2  ;; 0xffff
   \   00000038   0x....             LDR      R1,??DataTable8_1
   \   0000003A   0x8008             STRH     R0,[R1, #+0]
    129              m_update_count = 0;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x....             LDR      R1,??DataTable8_3
   \   00000040   0x7008             STRB     R0,[R1, #+0]
    130          
    131              return app_timer_create(&m_conn_params_timer_id,
    132                                      APP_TIMER_MODE_SINGLE_SHOT,
    133                                      update_timeout_handler);
   \   00000042   0x....             LDR      R2,??DataTable9_1
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x....             LDR      R0,??DataTable9_2
   \   00000048   0x.... 0x....      BL       app_timer_create
   \                     ??ble_conn_params_init_2: (+1)
   \   0000004C   0xBD10             POP      {R4,PC}          ;; return
    134          }
    135          
    136          

   \                                 In section .text, align 2, keep-with-next
    137          uint32_t ble_conn_params_stop(void)
    138          {
   \                     ble_conn_params_stop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    139              return app_timer_stop(m_conn_params_timer_id);
   \   00000002   0x....             LDR      R0,??DataTable9_2
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      BL       app_timer_stop
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
    140          }
    141          
    142          

   \                                 In section .text, align 2, keep-with-next
    143          static void conn_params_negotiation(void)
    144          {
   \                     conn_params_negotiation: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    145          printf("conn_params_negotiate %u %u %u\n", m_current_conn_params.max_conn_interval, m_preferred_conn_params.min_conn_interval, m_preferred_conn_params.max_conn_interval);
   \   00000002   0x....             LDR      R0,??DataTable8
   \   00000004   0x8843             LDRH     R3,[R0, #+2]
   \   00000006   0x....             LDR      R0,??DataTable8
   \   00000008   0x8802             LDRH     R2,[R0, #+0]
   \   0000000A   0x....             LDR      R0,??DataTable9_3
   \   0000000C   0x8841             LDRH     R1,[R0, #+2]
   \   0000000E   0x....             LDR      R0,??DataTable9_4
   \   00000010   0x.... 0x....      BL       printf
    146              // Start negotiation if the received connection parameters are not acceptable
    147              if (!is_conn_params_ok(&m_current_conn_params))
   \   00000014   0x....             LDR      R0,??DataTable9_3
   \   00000016   0x.... 0x....      BL       is_conn_params_ok
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD134             BNE      ??conn_params_negotiation_0
    148              {
    149                  uint32_t err_code;
    150                  uint32_t timeout_ticks;
    151          
    152          printf("NOT OK, %u\n", m_change_param);
   \   0000001E   0x....             LDR      R0,??DataTable9
   \   00000020   0x7801             LDRB     R1,[R0, #+0]
   \   00000022   0x....             LDR      R0,??DataTable9_5
   \   00000024   0x.... 0x....      BL       printf
    153                  if (m_change_param)
   \   00000028   0x....             LDR      R0,??DataTable9
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD00E             BEQ      ??conn_params_negotiation_1
    154                  {
    155                      // Notify the application that the procedure has failed
    156                      if (m_conn_params_config.evt_handler != NULL)
   \   00000030   0x....             LDR      R0,??DataTable8_4
   \   00000032   0x6940             LDR      R0,[R0, #+20]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD032             BEQ      ??conn_params_negotiation_2
    157                      {
    158          printf("Calling connection handler\n");
   \   00000038   0x....             LDR      R0,??DataTable9_6
   \   0000003A   0x.... 0x....      BL       printf
    159                          ble_conn_params_evt_t evt;
    160          
    161                          evt.evt_type = BLE_CONN_PARAMS_EVT_FAILED;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x4669             MOV      R1,SP
   \   00000042   0x7108             STRB     R0,[R1, #+4]
    162                          m_conn_params_config.evt_handler(&evt);
   \   00000044   0xA801             ADD      R0,SP,#+4
   \   00000046   0x....             LDR      R1,??DataTable8_4
   \   00000048   0x6949             LDR      R1,[R1, #+20]
   \   0000004A   0x4788             BLX      R1
   \   0000004C   0xE027             B        ??conn_params_negotiation_2
    163                      }
    164                  }
    165                  else
    166                  {
    167                      if (m_update_count == 0)
   \                     ??conn_params_negotiation_1: (+1)
   \   0000004E   0x....             LDR      R0,??DataTable8_3
   \   00000050   0x7800             LDRB     R0,[R0, #+0]
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD102             BNE      ??conn_params_negotiation_3
    168                      {
    169                          // First connection parameter update
    170                          timeout_ticks = m_conn_params_config.first_conn_params_update_delay;
   \   00000056   0x....             LDR      R0,??DataTable8_4
   \   00000058   0x6844             LDR      R4,[R0, #+4]
   \   0000005A   0xE001             B        ??conn_params_negotiation_4
    171                      }
    172                      else
    173                      {
    174                          timeout_ticks = m_conn_params_config.next_conn_params_update_delay;
   \                     ??conn_params_negotiation_3: (+1)
   \   0000005C   0x....             LDR      R0,??DataTable8_4
   \   0000005E   0x6884             LDR      R4,[R0, #+8]
    175                      }
    176          
    177          printf("Calling timer with %u\n", timeout_ticks);
   \                     ??conn_params_negotiation_4: (+1)
   \   00000060   0x0021             MOVS     R1,R4
   \   00000062   0x....             LDR      R0,??DataTable9_7
   \   00000064   0x.... 0x....      BL       printf
    178                      err_code = app_timer_start(m_conn_params_timer_id, timeout_ticks, NULL);
   \   00000068   0x2200             MOVS     R2,#+0
   \   0000006A   0x0021             MOVS     R1,R4
   \   0000006C   0x....             LDR      R0,??DataTable9_2
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x.... 0x....      BL       app_timer_start
    179                      if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD012             BEQ      ??conn_params_negotiation_2
   \   00000078   0x....             LDR      R1,??DataTable8_4
   \   0000007A   0x6989             LDR      R1,[R1, #+24]
   \   0000007C   0x2900             CMP      R1,#+0
   \   0000007E   0xD00E             BEQ      ??conn_params_negotiation_2
    180                      {
    181                          m_conn_params_config.error_handler(err_code);
   \   00000080   0x....             LDR      R1,??DataTable8_4
   \   00000082   0x6989             LDR      R1,[R1, #+24]
   \   00000084   0x4788             BLX      R1
   \   00000086   0xE00A             B        ??conn_params_negotiation_2
    182                      }
    183                  }
    184              }
    185              else
    186              {
    187                  // Notify the application that the procedure has succeded
    188                  if (m_conn_params_config.evt_handler != NULL)
   \                     ??conn_params_negotiation_0: (+1)
   \   00000088   0x....             LDR      R0,??DataTable8_4
   \   0000008A   0x6940             LDR      R0,[R0, #+20]
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD006             BEQ      ??conn_params_negotiation_2
    189                  {
    190                      ble_conn_params_evt_t evt;
    191          
    192                      evt.evt_type = BLE_CONN_PARAMS_EVT_SUCCEEDED;
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x4669             MOV      R1,SP
   \   00000094   0x7008             STRB     R0,[R1, #+0]
    193                      m_conn_params_config.evt_handler(&evt);
   \   00000096   0x4668             MOV      R0,SP
   \   00000098   0x....             LDR      R1,??DataTable8_4
   \   0000009A   0x6949             LDR      R1,[R1, #+20]
   \   0000009C   0x4788             BLX      R1
    194                  }
    195              }
    196              m_change_param = false;
   \                     ??conn_params_negotiation_2: (+1)
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x....             LDR      R1,??DataTable9
   \   000000A2   0x7008             STRB     R0,[R1, #+0]
    197          }
   \   000000A4   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    198          
    199          

   \                                 In section .text, align 2, keep-with-next
    200          static void on_connect(ble_evt_t * p_ble_evt)
    201          {
   \                     on_connect: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    202              // Save connection parameters
    203              m_conn_handle         = p_ble_evt->evt.gap_evt.conn_handle;
   \   00000004   0x8888             LDRH     R0,[R1, #+4]
   \   00000006   0x....             LDR      R2,??DataTable8_1
   \   00000008   0x8010             STRH     R0,[R2, #+0]
    204              m_current_conn_params = p_ble_evt->evt.gap_evt.params.connected.conn_params;
   \   0000000A   0x....             LDR      R0,??DataTable9_3
   \   0000000C   0x310E             ADDS     R1,R1,#+14
   \   0000000E   0x2208             MOVS     R2,#+8
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy
    205              m_update_count        = 0;  // Connection parameter negotiation should re-start every connection
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR      R1,??DataTable8_3
   \   00000018   0x7008             STRB     R0,[R1, #+0]
    206          
    207              // Check if we shall handle negotiation on connect
    208              if (m_conn_params_config.start_on_notify_cccd_handle == BLE_GATT_HANDLE_INVALID)
   \   0000001A   0x....             LDR      R0,??DataTable8_4
   \   0000001C   0x89C0             LDRH     R0,[R0, #+14]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD101             BNE      ??on_connect_0
    209              {
    210                  conn_params_negotiation();
   \   00000022   0x.... 0x....      BL       conn_params_negotiation
    211              }
    212          }
   \                     ??on_connect_0: (+1)
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    213          
    214          

   \                                 In section .text, align 2, keep-with-next
    215          static void on_disconnect(ble_evt_t * p_ble_evt)
    216          {
   \                     on_disconnect: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    217              uint32_t err_code;
    218          
    219              m_conn_handle = BLE_CONN_HANDLE_INVALID;
   \   00000002   0x....             LDR      R0,??DataTable8_2  ;; 0xffff
   \   00000004   0x....             LDR      R1,??DataTable8_1
   \   00000006   0x8008             STRH     R0,[R1, #+0]
    220          
    221              // Stop timer if running
    222              m_update_count = 0; // Connection parameters updates should happen during every connection
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR      R1,??DataTable8_3
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    223          
    224              err_code = app_timer_stop(m_conn_params_timer_id);
   \   0000000E   0x....             LDR      R0,??DataTable9_2
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       app_timer_stop
    225              if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD006             BEQ      ??on_disconnect_0
   \   0000001A   0x....             LDR      R1,??DataTable8_4
   \   0000001C   0x6989             LDR      R1,[R1, #+24]
   \   0000001E   0x2900             CMP      R1,#+0
   \   00000020   0xD002             BEQ      ??on_disconnect_0
    226              {
    227                  m_conn_params_config.error_handler(err_code);
   \   00000022   0x....             LDR      R1,??DataTable8_4
   \   00000024   0x6989             LDR      R1,[R1, #+24]
   \   00000026   0x4788             BLX      R1
    228              }
    229          }
   \                     ??on_disconnect_0: (+1)
   \   00000028   0xBD01             POP      {R0,PC}          ;; return
    230          
    231          

   \                                 In section .text, align 2, keep-with-next
    232          static void on_write(ble_evt_t * p_ble_evt)
    233          {
   \                     on_write: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    234              ble_gatts_evt_write_t * p_evt_write = &p_ble_evt->evt.gatts_evt.params.write;
   \   00000002   0x1D80             ADDS     R0,R0,#+6
    235          
    236              // Check if this the correct CCCD
    237              if (
    238                  (p_evt_write->handle == m_conn_params_config.start_on_notify_cccd_handle)
    239                  &&
    240                  (p_evt_write->len == 2)
    241                 )
   \   00000004   0x8801             LDRH     R1,[R0, #+0]
   \   00000006   0x....             LDR      R2,??DataTable8_4
   \   00000008   0x89D2             LDRH     R2,[R2, #+14]
   \   0000000A   0x4291             CMP      R1,R2
   \   0000000C   0xD117             BNE      ??on_write_0
   \   0000000E   0x8B01             LDRH     R1,[R0, #+24]
   \   00000010   0x2902             CMP      R1,#+2
   \   00000012   0xD114             BNE      ??on_write_0
    242              {
    243                  // Check if this is a 'start notification'
    244                  if (ble_srv_is_notification_enabled(p_evt_write->data))
   \   00000014   0x301A             ADDS     R0,R0,#+26
   \   00000016   0x.... 0x....      BL       ble_srv_is_notification_enabled
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD002             BEQ      ??on_write_1
    245                  {
    246                      // Do connection parameter negotiation if necessary
    247                      conn_params_negotiation();
   \   0000001E   0x.... 0x....      BL       conn_params_negotiation
   \   00000022   0xE00C             B        ??on_write_0
    248                  }
    249                  else
    250                  {
    251                      uint32_t err_code;
    252          
    253                      // Stop timer if running
    254                      err_code = app_timer_stop(m_conn_params_timer_id);
   \                     ??on_write_1: (+1)
   \   00000024   0x....             LDR      R0,??DataTable9_2
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x.... 0x....      BL       app_timer_stop
    255                      if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD006             BEQ      ??on_write_0
   \   00000030   0x....             LDR      R1,??DataTable8_4
   \   00000032   0x6989             LDR      R1,[R1, #+24]
   \   00000034   0x2900             CMP      R1,#+0
   \   00000036   0xD002             BEQ      ??on_write_0
    256                      {
    257                          m_conn_params_config.error_handler(err_code);
   \   00000038   0x....             LDR      R1,??DataTable8_4
   \   0000003A   0x6989             LDR      R1,[R1, #+24]
   \   0000003C   0x4788             BLX      R1
    258                      }
    259                  }
    260              }
    261          }
   \                     ??on_write_0: (+1)
   \   0000003E   0xBD01             POP      {R0,PC}          ;; return
    262          
    263          

   \                                 In section .text, align 2, keep-with-next
    264          static void on_conn_params_update(ble_evt_t * p_ble_evt)
    265          {
   \                     on_conn_params_update: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    266              // Copy the parameters
    267              m_current_conn_params = p_ble_evt->evt.gap_evt.params.conn_param_update.conn_params;
   \   00000004   0x....             LDR      R0,??DataTable9_3
   \   00000006   0x1D89             ADDS     R1,R1,#+6
   \   00000008   0x2208             MOVS     R2,#+8
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy
    268          
    269              conn_params_negotiation();
   \   0000000E   0x.... 0x....      BL       conn_params_negotiation
    270          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    271          
    272          

   \                                 In section .text, align 2, keep-with-next
    273          void ble_conn_params_on_ble_evt(ble_evt_t * p_ble_evt)
    274          {
   \                     ble_conn_params_on_ble_evt: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    275              switch (p_ble_evt->header.evt_id)
   \   00000002   0x8801             LDRH     R1,[R0, #+0]
   \   00000004   0x2910             CMP      R1,#+16
   \   00000006   0xD006             BEQ      ??ble_conn_params_on_ble_evt_0
   \   00000008   0x2911             CMP      R1,#+17
   \   0000000A   0xD007             BEQ      ??ble_conn_params_on_ble_evt_1
   \   0000000C   0x2912             CMP      R1,#+18
   \   0000000E   0xD00B             BEQ      ??ble_conn_params_on_ble_evt_2
   \   00000010   0x2950             CMP      R1,#+80
   \   00000012   0xD006             BEQ      ??ble_conn_params_on_ble_evt_3
   \   00000014   0xE00B             B        ??ble_conn_params_on_ble_evt_4
    276              {
    277                  case BLE_GAP_EVT_CONNECTED:
    278                      on_connect(p_ble_evt);
   \                     ??ble_conn_params_on_ble_evt_0: (+1)
   \   00000016   0x.... 0x....      BL       on_connect
    279                      break;
   \   0000001A   0xE008             B        ??ble_conn_params_on_ble_evt_5
    280          
    281                  case BLE_GAP_EVT_DISCONNECTED:
    282                      on_disconnect(p_ble_evt);
   \                     ??ble_conn_params_on_ble_evt_1: (+1)
   \   0000001C   0x.... 0x....      BL       on_disconnect
    283                      break;
   \   00000020   0xE005             B        ??ble_conn_params_on_ble_evt_5
    284          
    285                  case BLE_GATTS_EVT_WRITE:
    286                      on_write(p_ble_evt);
   \                     ??ble_conn_params_on_ble_evt_3: (+1)
   \   00000022   0x.... 0x....      BL       on_write
    287                      break;
   \   00000026   0xE002             B        ??ble_conn_params_on_ble_evt_5
    288          
    289                  case BLE_GAP_EVT_CONN_PARAM_UPDATE:
    290                      on_conn_params_update(p_ble_evt);
   \                     ??ble_conn_params_on_ble_evt_2: (+1)
   \   00000028   0x.... 0x....      BL       on_conn_params_update
    291                      break;
   \   0000002C   0xE7FF             B        ??ble_conn_params_on_ble_evt_5
    292          
    293                  default:
    294                      // No implementation needed.
    295                      break;
    296              }
    297          }
   \                     ??ble_conn_params_on_ble_evt_4: (+1)
   \                     ??ble_conn_params_on_ble_evt_5: (+1)
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
    298          
    299          

   \                                 In section .text, align 2, keep-with-next
    300          uint32_t ble_conn_params_change_conn_params(ble_gap_conn_params_t * new_params)
    301          {
   \                     ble_conn_params_change_conn_params: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    302              uint32_t err_code;
    303          
    304              m_preferred_conn_params = *new_params;
   \   00000004   0x....             LDR      R0,??DataTable9_8
   \   00000006   0x2208             MOVS     R2,#+8
   \   00000008   0x.... 0x....      BL       __aeabi_memcpy
    305              // Set the connection params in stack
    306              err_code = sd_ble_gap_ppcp_set(&m_preferred_conn_params);
   \   0000000C   0x....             LDR      R0,??DataTable9_8
   \   0000000E   0xDF7A             SVC      0x7A
    307              if (err_code == NRF_SUCCESS)
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD11B             BNE      ??ble_conn_params_change_conn_params_0
    308              {
    309                  if (!is_conn_params_ok(&m_current_conn_params))
   \   00000014   0x....             LDR      R0,??DataTable9_3
   \   00000016   0x.... 0x....      BL       is_conn_params_ok
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD10A             BNE      ??ble_conn_params_change_conn_params_1
    310                  {
    311                      m_change_param = true;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x....             LDR      R1,??DataTable9
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    312                      err_code = sd_ble_gap_conn_param_update(m_conn_handle, &m_preferred_conn_params);
   \   00000024   0x....             LDR      R1,??DataTable9_8
   \   00000026   0x....             LDR      R0,??DataTable9_9
   \   00000028   0x8800             LDRH     R0,[R0, #+0]
   \   0000002A   0xDF75             SVC      0x75
    313                      m_update_count = 1;
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x....             LDR      R2,??DataTable9_10
   \   00000030   0x7011             STRB     R1,[R2, #+0]
   \   00000032   0xE00B             B        ??ble_conn_params_change_conn_params_0
    314                  }
    315                  else
    316                  {
    317                      // Notify the application that the procedure has succeded
    318                      if (m_conn_params_config.evt_handler != NULL)
   \                     ??ble_conn_params_change_conn_params_1: (+1)
   \   00000034   0x....             LDR      R0,??DataTable9_11
   \   00000036   0x6940             LDR      R0,[R0, #+20]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD006             BEQ      ??ble_conn_params_change_conn_params_2
    319                      {
    320                          ble_conn_params_evt_t evt;
    321          
    322                          evt.evt_type = BLE_CONN_PARAMS_EVT_SUCCEEDED;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x4669             MOV      R1,SP
   \   00000040   0x7008             STRB     R0,[R1, #+0]
    323                          m_conn_params_config.evt_handler(&evt);
   \   00000042   0x4668             MOV      R0,SP
   \   00000044   0x....             LDR      R1,??DataTable9_11
   \   00000046   0x6949             LDR      R1,[R1, #+20]
   \   00000048   0x4788             BLX      R1
    324                      }
    325                      err_code = NRF_SUCCESS;
   \                     ??ble_conn_params_change_conn_params_2: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
    326                  }
    327              }
    328              return err_code;
   \                     ??ble_conn_params_change_conn_params_0: (+1)
   \   0000004C   0xBD02             POP      {R1,PC}          ;; return
    329          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     m_preferred_conn_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     m_conn_handle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     m_update_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     m_conn_params_config

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     m_change_param

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     update_timeout_handler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     m_conn_params_timer_id

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     m_current_conn_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x........         DC32     m_preferred_conn_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x........         DC32     m_conn_handle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x........         DC32     m_update_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x........         DC32     m_conn_params_config

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x75 0x70          DC8 "update timer %u\012"
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x72    
   \              0x20 0x25    
   \              0x75 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x75 0x70          DC8 "update?\012"
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x3F 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x63 0x6F          DC8 "conn_params_negotiate %u %u %u\012"
   \              0x6E 0x6E    
   \              0x5F 0x70    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x73 0x5F    
   \              0x6E 0x65    
   \              0x67 0x6F    
   \              0x74 0x69    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x25 0x75    
   \              0x20 0x25    
   \              0x75 0x20    
   \              0x25 0x75    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x4E 0x4F          DC8 "NOT OK, %u\012"
   \              0x54 0x20    
   \              0x4F 0x4B    
   \              0x2C 0x20    
   \              0x25 0x75    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x43 0x61          DC8 "Calling connection handler\012"
   \              0x6C 0x6C    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x63 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x6C    
   \              0x65 0x72    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x43 0x61          DC8 "Calling timer with %u\012"
   \              0x6C 0x6C    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x72 0x20    
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x25    
   \              0x75 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ble_conn_params_change_conn_params
         8   -- Indirect call
         8   -> __aeabi_memcpy
         8   -> is_conn_params_ok
       8   ble_conn_params_init
         8   -> __aeabi_memcpy
         8   -> __aeabi_memcpy4
         8   -> app_timer_create
       8   ble_conn_params_on_ble_evt
         8   -> on_conn_params_update
         8   -> on_connect
         8   -> on_disconnect
         8   -> on_write
       8   ble_conn_params_stop
         8   -> app_timer_stop
       8   ble_srv_is_notification_enabled
         8   -> uint16_decode
      16   conn_params_negotiation
        16   -- Indirect call
        16   -> app_timer_start
        16   -> is_conn_params_ok
        16   -> printf
       4   is_conn_params_ok
       8   on_conn_params_update
         8   -> __aeabi_memcpy
         8   -> conn_params_negotiation
       8   on_connect
         8   -> __aeabi_memcpy
         8   -> conn_params_negotiation
       8   on_disconnect
         8   -- Indirect call
         8   -> app_timer_stop
       8   on_write
         8   -- Indirect call
         8   -> app_timer_stop
         8   -> ble_srv_is_notification_enabled
         8   -> conn_params_negotiation
       0   uint16_decode
       8   update_timeout_handler
         8   -- Indirect call
         8   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      20  ?_0
      12  ?_1
      32  ?_2
      12  ?_3
      28  ?_4
      24  ?_5
      78  ble_conn_params_change_conn_params
      78  ble_conn_params_init
      48  ble_conn_params_on_ble_evt
      12  ble_conn_params_stop
      16  ble_srv_is_notification_enabled
     166  conn_params_negotiation
      30  is_conn_params_ok
       1  m_change_param
       2  m_conn_handle
      28  m_conn_params_config
       4  m_conn_params_timer_id
       8  m_current_conn_params
       8  m_preferred_conn_params
       1  m_update_count
      20  on_conn_params_update
      40  on_connect
      42  on_disconnect
      64  on_write
      12  uint16_decode
     142  update_timeout_handler

 
  52 bytes in section .bss
 128 bytes in section .rodata
 824 bytes in section .text
 
 824 bytes of CODE  memory
 128 bytes of CONST memory
  52 bytes of DATA  memory

Errors: none
Warnings: none
