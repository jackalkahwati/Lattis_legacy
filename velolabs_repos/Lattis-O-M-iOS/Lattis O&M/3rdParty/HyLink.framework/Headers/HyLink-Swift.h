// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

/// :nodoc: Base Class : DispInfo, DrvInfo, ErrMsgInfo, PowerInfo, ProfileInfo
SWIFT_CLASS("_TtC6HyLink10HyDataInfo")
@interface HyDataInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Display information
SWIFT_CLASS("_TtC6HyLink8DispInfo")
@interface DispInfo : HyDataInfo
/// Level of assistance
@property (nonatomic) NSInteger assistant_level;
/// Is light on
@property (nonatomic) BOOL is_light_on;
/// Motion assist mode. button type(0), throttle type(1)
@property (nonatomic) NSInteger motion_mode;
/// Battery capacity 0 ~ 100%
@property (nonatomic) int16_t battery_capacity;
/// Battery level 0 ~ 10
@property (nonatomic) int16_t battery_level_in_10;
/// Charger is attached on battery
@property (nonatomic) BOOL is_battery_charge;
/// Total Distance (m)
@property (nonatomic) NSInteger odo;
/// Trip Distance (km)
@property (nonatomic) float trip_distance_km;
/// Remaining Distance (km)
@property (nonatomic) float remaining_distance_km;
/// Total Distance (km)
@property (nonatomic) NSInteger odo_km;
/// Average Speed (km/h)
@property (nonatomic) NSInteger average_speed_km_per_hr;
/// Max Speed (km/h)
@property (nonatomic) NSInteger max_speed_km_per_hr;
/// Trip Time (minute)
@property (nonatomic) NSInteger trip_time;
/// Average current (A)
@property (nonatomic) float average_current;
@end


/// Driver information
SWIFT_CLASS("_TtC6HyLink7DrvInfo")
@interface DrvInfo : HyDataInfo
/// Peak current (A)
@property (nonatomic) float peak_current;
/// Average current (A)
@property (nonatomic) float average_current;
/// Rotation speed
@property (nonatomic) int16_t rpm;
/// Speed per hour (km)
@property (nonatomic) float speed_km_per_hour;
/// Discharge current scale: 0~100%
@property (nonatomic) float discharge_current_scale;
@end

@class NSMutableArray;

/// Error Message
SWIFT_CLASS("_TtC6HyLink10ErrMsgInfo")
@interface ErrMsgInfo : HyDataInfo
@property (nonatomic) BOOL is_error;
@property (nonatomic) BOOL is_maintain;
@property (nonatomic, strong) NSMutableArray * _Nonnull error_code_array;
@end



/// :nodoc:  Hyena Device
SWIFT_CLASS("_TtC6HyLink8HyDevice")
@interface HyDevice : NSObject
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// HyLink objects are used to discover or connect hyena device.
SWIFT_CLASS("_TtC6HyLink6HyLink")
@interface HyLink : NSObject
/// HyLink Shared Instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HyLink * _Nonnull sharedInstance;)
+ (HyLink * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Scans for peripherals that are bikes
- (void)startScanning;
/// Stop scan
- (void)stopScanning;
/// Establishes a local connection to a Hyena device.
/// \param device Hyena Device
///
- (void)connectWithDevice:(HyDevice * _Nonnull)device;
/// Cancels an active or pending local connection to a Hyena device.
/// \param device Hyena Device
///
- (void)disconnectWithDevice:(HyDevice * _Nonnull)device;
/// Start Hyena Device Service
/// \param device Hyena Device
///
- (void)startDeviceServiceWithDevice:(HyDevice * _Nonnull)device;
/// Stop Hyena Device Service
/// \param device Hyena Device
///
- (void)stopDeviceServiceWithDevice:(HyDevice * _Nonnull)device;
/// Send Command to Hyena Deviceï¼Œthe command will be deleted after delivery
/// \param data _type: Hyena Data Type
///
- (void)sendCommand;
@end


/// Power Information
SWIFT_CLASS("_TtC6HyLink9PowerInfo")
@interface PowerInfo : HyDataInfo
@end


/// Profile Information
SWIFT_CLASS("_TtC6HyLink11ProfileInfo")
@interface ProfileInfo : HyDataInfo
/// Frame number
@property (nonatomic, copy) NSString * _Nonnull frame_no;
/// Software Version
@property (nonatomic, copy) NSString * _Nonnull software_version;
/// Hardware Version
@property (nonatomic, copy) NSString * _Nonnull hardware_version;
/// Ride time in Assist Mode 1 (second)
@property (nonatomic) NSInteger assist_mode1_ride_time;
/// Ride distance in Assist Mode 1 (km)
@property (nonatomic) double assist_mode1_ride_distance;
/// Ride time in Assist Mode 2 (second)
@property (nonatomic) NSInteger assist_mode2_ride_time;
/// Ride distance in Assist Mode 2 (km)
@property (nonatomic) double assist_mode2_ride_distance;
/// Ride time in Assist Mode 3 (second)
@property (nonatomic) NSInteger assist_mode3_ride_time;
/// Ride distance in Assist Mode 3 (km)
@property (nonatomic) double assist_mode3_ride_distance;
/// Trip time (second)
@property (nonatomic) NSInteger trip_time;
/// Trip distance (km)
@property (nonatomic) double trip_distance;
@end


@interface UIButton (SWIFT_EXTENSION(HyLink))
@end


@interface UIColor (SWIFT_EXTENSION(HyLink))
@end


@interface UIImage (SWIFT_EXTENSION(HyLink))
@end


@interface UIView (SWIFT_EXTENSION(HyLink))
@end


@interface NSURLSession (SWIFT_EXTENSION(HyLink))
@end

#pragma clang diagnostic pop
